
REAL_TIME_ACESS_CONTROL_SYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a38  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003bd0  08003bd0  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c04  08003c04  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003c04  08003c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c0c  08003c0c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c0c  08003c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c10  08003c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000010  08003c24  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003c24  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e557  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed2  00000000  00000000  0002e597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00030470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00031098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016db6  00000000  00000000  00031c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f574  00000000  00000000  000489d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e3f3  00000000  00000000  00057f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e633d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003300  00000000  00000000  000e6390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003bb8 	.word	0x08003bb8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08003bb8 	.word	0x08003bb8

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <LCD_string>:
//			LCD_command(1);
//			delay(500);
//		}
//}
void LCD_string(char str[])
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	for(int i=0;str[i]!='\0';i++)
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	e009      	b.n	800050e <LCD_string+0x22>
	{
		LCD_data(str[i]);
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	4413      	add	r3, r2
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	4618      	mov	r0, r3
 8000504:	f000 f8c8 	bl	8000698 <LCD_data>
	for(int i=0;str[i]!='\0';i++)
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	3301      	adds	r3, #1
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	4413      	add	r3, r2
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1ef      	bne.n	80004fa <LCD_string+0xe>
	}

}
 800051a:	bf00      	nop
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <LCD_init>:
/* initialize GPIOA/C then initialize LCD controller */
void LCD_init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	PORTS_init();
 8000528:	f000 f82e 	bl	8000588 <PORTS_init>
	delay(20); /* LCD controller reset sequence */
 800052c:	2014      	movs	r0, #20
 800052e:	f000 f8ce 	bl	80006ce <delay>
	LCD_nibble_write(0x30, 0);
 8000532:	2100      	movs	r1, #0
 8000534:	2030      	movs	r0, #48	; 0x30
 8000536:	f000 f85d 	bl	80005f4 <LCD_nibble_write>
	delay(5);
 800053a:	2005      	movs	r0, #5
 800053c:	f000 f8c7 	bl	80006ce <delay>
	LCD_nibble_write(0x30, 0);
 8000540:	2100      	movs	r1, #0
 8000542:	2030      	movs	r0, #48	; 0x30
 8000544:	f000 f856 	bl	80005f4 <LCD_nibble_write>
	delay(1);
 8000548:	2001      	movs	r0, #1
 800054a:	f000 f8c0 	bl	80006ce <delay>
	LCD_nibble_write(0x30, 0);
 800054e:	2100      	movs	r1, #0
 8000550:	2030      	movs	r0, #48	; 0x30
 8000552:	f000 f84f 	bl	80005f4 <LCD_nibble_write>
	delay(1);
 8000556:	2001      	movs	r0, #1
 8000558:	f000 f8b9 	bl	80006ce <delay>
	LCD_nibble_write(0x20, 0); /* use 4-bit data mode */
 800055c:	2100      	movs	r1, #0
 800055e:	2020      	movs	r0, #32
 8000560:	f000 f848 	bl	80005f4 <LCD_nibble_write>
	delay(1);
 8000564:	2001      	movs	r0, #1
 8000566:	f000 f8b2 	bl	80006ce <delay>
	LCD_command(0x28); /* set 4-bit data, 2-line, 5x7 font */
 800056a:	2028      	movs	r0, #40	; 0x28
 800056c:	f000 f872 	bl	8000654 <LCD_command>
	LCD_command(0x06); /* move cursor right */
 8000570:	2006      	movs	r0, #6
 8000572:	f000 f86f 	bl	8000654 <LCD_command>
	LCD_command(0x01); /* clear screen, move cursor to home */
 8000576:	2001      	movs	r0, #1
 8000578:	f000 f86c 	bl	8000654 <LCD_command>
	LCD_command(0x0C); /* turn on display, cursor blinking */
 800057c:	200c      	movs	r0, #12
 800057e:	f000 f869 	bl	8000654 <LCD_command>
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <PORTS_init>:

void PORTS_init(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
		RCC->AHB1ENR |= 0x1;                     // Enable AHB1 BUS which is connected to PA5 via GPIO port A
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <PORTS_init+0x60>)
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <PORTS_init+0x60>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= 0x4;					// Enanle AHB1 bus conneted to GPIO port C
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <PORTS_init+0x60>)
 800059a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <PORTS_init+0x60>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	6313      	str	r3, [r2, #48]	; 0x30
	//	RCC->AHB1ENR |=0x2;						//Enanle AHB1 bus conneted to GPIO port B
		GPIOA->MODER &=~0xFC00;                 //clear all pin PA5 PA6 PA7
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <PORTS_init+0x64>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a10      	ldr	r2, [pc, #64]	; (80005ec <PORTS_init+0x64>)
 80005aa:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80005ae:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |=0x5400; 				//set all pin 5,6,7 as o/p mode
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <PORTS_init+0x64>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a0d      	ldr	r2, [pc, #52]	; (80005ec <PORTS_init+0x64>)
 80005b6:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 80005ba:	6013      	str	r3, [r2, #0]
		GPIOA->BSRR = 0xC00000;	//(3<<22)			//turn off EN and RW pin
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <PORTS_init+0x64>)
 80005be:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80005c2:	619a      	str	r2, [r3, #24]
		GPIOC->MODER &=~0xFF00;				// CLEAR all pin 4-7 of port C
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <PORTS_init+0x68>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <PORTS_init+0x68>)
 80005ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80005ce:	6013      	str	r3, [r2, #0]
		GPIOC->MODER |= 0x5500;				// set all pin 4-7 as o/p mode
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <PORTS_init+0x68>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <PORTS_init+0x68>)
 80005d6:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80005da:	6013      	str	r3, [r2, #0]


}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000
 80005f0:	40020800 	.word	0x40020800

080005f4 <LCD_nibble_write>:

void LCD_nibble_write(char data, unsigned char control)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	460a      	mov	r2, r1
 80005fe:	71fb      	strb	r3, [r7, #7]
 8000600:	4613      	mov	r3, r2
 8000602:	71bb      	strb	r3, [r7, #6]
	/*populate data bits */
	GPIOC->BSRR = 0xF00000; 					/* clear data bits */
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <LCD_nibble_write+0x58>)
 8000606:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800060a:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = data & 0xF0; 					/* set data bits 4-7 */
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	4a0f      	ldr	r2, [pc, #60]	; (800064c <LCD_nibble_write+0x58>)
 8000610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000614:	6193      	str	r3, [r2, #24]
	/* set R/S bit */
	if (control & RS)
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	f003 0320 	and.w	r3, r3, #32
 800061c:	2b00      	cmp	r3, #0
 800061e:	d003      	beq.n	8000628 <LCD_nibble_write+0x34>
		GPIOA->BSRR = RS;
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <LCD_nibble_write+0x5c>)
 8000622:	2220      	movs	r2, #32
 8000624:	619a      	str	r2, [r3, #24]
 8000626:	e003      	b.n	8000630 <LCD_nibble_write+0x3c>
	else
		GPIOA->BSRR = RS << 16;	//(1<<21)  //
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <LCD_nibble_write+0x5c>)
 800062a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800062e:	619a      	str	r2, [r3, #24]
	/* pulse E */
	GPIOA->BSRR = EN;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <LCD_nibble_write+0x5c>)
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	619a      	str	r2, [r3, #24]
	__NOP();
 8000636:	bf00      	nop
	GPIOA->BSRR = EN << 16;
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <LCD_nibble_write+0x5c>)
 800063a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800063e:	619a      	str	r2, [r3, #24]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	40020800 	.word	0x40020800
 8000650:	40020000 	.word	0x40020000

08000654 <LCD_command>:
void LCD_command(unsigned char command)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write(command & 0xF0, 0); 			/* upper nibble first */
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	f023 030f 	bic.w	r3, r3, #15
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffc3 	bl	80005f4 <LCD_nibble_write>
	LCD_nibble_write(command << 4, 0); 				/* then lower nibble */
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	011b      	lsls	r3, r3, #4
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffbc 	bl	80005f4 <LCD_nibble_write>
	if (command < 4)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b03      	cmp	r3, #3
 8000680:	d803      	bhi.n	800068a <LCD_command+0x36>
		delay(2); 									/* command 1 and 2 needs up to 1.64ms */
 8000682:	2002      	movs	r0, #2
 8000684:	f000 f823 	bl	80006ce <delay>
	else
		delay(1); 									/* all others 40 us */

}
 8000688:	e002      	b.n	8000690 <LCD_command+0x3c>
		delay(1); 									/* all others 40 us */
 800068a:	2001      	movs	r0, #1
 800068c:	f000 f81f 	bl	80006ce <delay>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <LCD_data>:
void LCD_data(char data)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write(data & 0xF0, RS); 				/* upper nibble first */
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f023 030f 	bic.w	r3, r3, #15
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2120      	movs	r1, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ffa1 	bl	80005f4 <LCD_nibble_write>
	LCD_nibble_write(data << 4, RS); 				/* then lower nibble */
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	011b      	lsls	r3, r3, #4
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2120      	movs	r1, #32
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff9a 	bl	80005f4 <LCD_nibble_write>
	delay(100);
 80006c0:	2064      	movs	r0, #100	; 0x64
 80006c2:	f000 f804 	bl	80006ce <delay>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <delay>:
void delay(int seconds)
{
 80006ce:	b480      	push	{r7}
 80006d0:	b085      	sub	sp, #20
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]

	for(;seconds>0;seconds--)
 80006d6:	e00d      	b.n	80006f4 <delay+0x26>
	{
		for(int count1=0;count1<3000;count1++)
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	e002      	b.n	80006e4 <delay+0x16>
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	3301      	adds	r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80006ea:	4293      	cmp	r3, r2
 80006ec:	ddf7      	ble.n	80006de <delay+0x10>
	for(;seconds>0;seconds--)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3b01      	subs	r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	dcee      	bgt.n	80006d8 <delay+0xa>
		{

		}
	}
}
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	; 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fa3e 	bl	8003b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <SystemClock_Config+0xb8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a22      	ldr	r2, [pc, #136]	; (80007c0 <SystemClock_Config+0xb8>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <SystemClock_Config+0xb8>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <SystemClock_Config+0xbc>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a1c      	ldr	r2, [pc, #112]	; (80007c4 <SystemClock_Config+0xbc>)
 8000752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <SystemClock_Config+0xbc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000764:	230a      	movs	r3, #10
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000774:	2300      	movs	r3, #0
 8000776:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4618      	mov	r0, r3
 800077e:	f001 f857 	bl	8001830 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000788:	f000 f9c2 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 faba 	bl	8001d20 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007b2:	f000 f9ad 	bl	8000b10 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2C1_Init+0x50>)
 80007ce:	4a13      	ldr	r2, [pc, #76]	; (800081c <MX_I2C1_Init+0x54>)
 80007d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_I2C1_Init+0x50>)
 80007d4:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_I2C1_Init+0x58>)
 80007d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_I2C1_Init+0x50>)
 80007e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_I2C1_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_I2C1_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_I2C1_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_I2C1_Init+0x50>)
 8000806:	f000 fecf 	bl	80015a8 <HAL_I2C_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000810:	f000 f97e 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000002c 	.word	0x2000002c
 800081c:	40005400 	.word	0x40005400
 8000820:	000186a0 	.word	0x000186a0

08000824 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b090      	sub	sp, #64	; 0x40
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800082a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2228      	movs	r2, #40	; 0x28
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f003 f9a7 	bl	8003b98 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800084a:	4b3a      	ldr	r3, [pc, #232]	; (8000934 <MX_RTC_Init+0x110>)
 800084c:	4a3a      	ldr	r2, [pc, #232]	; (8000938 <MX_RTC_Init+0x114>)
 800084e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000850:	4b38      	ldr	r3, [pc, #224]	; (8000934 <MX_RTC_Init+0x110>)
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000856:	4b37      	ldr	r3, [pc, #220]	; (8000934 <MX_RTC_Init+0x110>)
 8000858:	227f      	movs	r2, #127	; 0x7f
 800085a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800085c:	4b35      	ldr	r3, [pc, #212]	; (8000934 <MX_RTC_Init+0x110>)
 800085e:	22ff      	movs	r2, #255	; 0xff
 8000860:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000862:	4b34      	ldr	r3, [pc, #208]	; (8000934 <MX_RTC_Init+0x110>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000868:	4b32      	ldr	r3, [pc, #200]	; (8000934 <MX_RTC_Init+0x110>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800086e:	4b31      	ldr	r3, [pc, #196]	; (8000934 <MX_RTC_Init+0x110>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000874:	482f      	ldr	r0, [pc, #188]	; (8000934 <MX_RTC_Init+0x110>)
 8000876:	f001 fd23 	bl	80022c0 <HAL_RTC_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000880:	f000 f946 	bl	8000b10 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 8000884:	230f      	movs	r3, #15
 8000886:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 50;
 8000890:	2332      	movs	r3, #50	; 0x32
 8000892:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000896:	2300      	movs	r3, #0
 8000898:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800089e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	4823      	ldr	r0, [pc, #140]	; (8000934 <MX_RTC_Init+0x110>)
 80008a8:	f001 fd80 	bl	80023ac <HAL_RTC_SetTime>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80008b2:	f000 f92d 	bl	8000b10 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008b6:	2301      	movs	r3, #1
 80008b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_DECEMBER;
 80008bc:	2312      	movs	r3, #18
 80008be:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 31;
 80008c2:	231f      	movs	r3, #31
 80008c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 22;
 80008c8:	2316      	movs	r3, #22
 80008ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80008ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008d2:	2200      	movs	r2, #0
 80008d4:	4619      	mov	r1, r3
 80008d6:	4817      	ldr	r0, [pc, #92]	; (8000934 <MX_RTC_Init+0x110>)
 80008d8:	f001 fe02 	bl	80024e0 <HAL_RTC_SetDate>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80008e2:	f000 f915 	bl	8000b10 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 10;
 80008ee:	230a      	movs	r3, #10
 80008f0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	2200      	movs	r2, #0
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_RTC_Init+0x110>)
 800091e:	f001 fe63 	bl	80025e8 <HAL_RTC_SetAlarm_IT>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000928:	f000 f8f2 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3740      	adds	r7, #64	; 0x40
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000080 	.word	0x20000080
 8000938:	40002800 	.word	0x40002800

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000940:	f000 fa5a 	bl	8000df8 <HAL_Init>
  LCD_init();
 8000944:	f7ff fdee 	bl	8000524 <LCD_init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000948:	f7ff fede 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094c:	f000 f890 	bl	8000a70 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000950:	f7ff ff3a 	bl	80007c8 <MX_I2C1_Init>
  MX_RTC_Init();
 8000954:	f7ff ff66 	bl	8000824 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000958:	f000 f860 	bl	8000a1c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Rfid_Init();
 800095c:	f000 f804 	bl	8000968 <Rfid_Init>
 8000960:	2300      	movs	r3, #0
  /* USER CODE END 2 */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <Rfid_Init>:

void Rfid_Init()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
	LCD_command(1);
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fe70 	bl	8000654 <LCD_command>
	  uint16_t len_of_data=strlen(USER_DATA);
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <Rfid_Init+0x44>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fc2d 	bl	80001d8 <strlen>
 800097e:	4603      	mov	r3, r0
 8000980:	80fb      	strh	r3, [r7, #6]
	   HAL_UART_Transmit(&huart1, (uint8_t*)USER_DATA,len_of_data, HAL_MAX_DELAY);
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <Rfid_Init+0x44>)
 8000984:	6819      	ldr	r1, [r3, #0]
 8000986:	88fa      	ldrh	r2, [r7, #6]
 8000988:	f04f 33ff 	mov.w	r3, #4294967295
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <Rfid_Init+0x48>)
 800098e:	f002 f8b5 	bl	8002afc <HAL_UART_Transmit>
	   while(rec_comp_data != TRUE)
 8000992:	e004      	b.n	800099e <Rfid_Init+0x36>
	   {
	 	  HAL_UART_Receive_IT(&huart1,&recvd_data,1);
 8000994:	2201      	movs	r2, #1
 8000996:	4907      	ldr	r1, [pc, #28]	; (80009b4 <Rfid_Init+0x4c>)
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <Rfid_Init+0x48>)
 800099a:	f002 f941 	bl	8002c20 <HAL_UART_Receive_IT>
	   while(rec_comp_data != TRUE)
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <Rfid_Init+0x50>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d1f6      	bne.n	8000994 <Rfid_Init+0x2c>
	   }
	   MOTOR_Init();
 80009a6:	f000 f825 	bl	80009f4 <MOTOR_Init>
	   while(1);
 80009aa:	e7fe      	b.n	80009aa <Rfid_Init+0x42>
 80009ac:	20000000 	.word	0x20000000
 80009b0:	200000a0 	.word	0x200000a0
 80009b4:	200000e4 	.word	0x200000e4
 80009b8:	2000011b 	.word	0x2000011b

080009bc <HAL_UART_RxCpltCallback>:
	   return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	data_buf[count++]=recvd_data;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_UART_RxCpltCallback+0x2c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	b2d1      	uxtb	r1, r2
 80009cc:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <HAL_UART_RxCpltCallback+0x2c>)
 80009ce:	7011      	strb	r1, [r2, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_UART_RxCpltCallback+0x30>)
 80009d4:	7819      	ldrb	r1, [r3, #0]
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_UART_RxCpltCallback+0x34>)
 80009d8:	5499      	strb	r1, [r3, r2]
//		LCD_string("LOGIN TIME");
//		LCD_command(0xC4);
//		LCD_string(buffer1);
//		MOTOR_Init();
//	}
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	2000011a 	.word	0x2000011a
 80009ec:	200000e4 	.word	0x200000e4
 80009f0:	200000e8 	.word	0x200000e8

080009f4 <MOTOR_Init>:


void MOTOR_Init()
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	LCD_string(data_buf);
 80009f8:	4807      	ldr	r0, [pc, #28]	; (8000a18 <MOTOR_Init+0x24>)
 80009fa:	f7ff fd77 	bl	80004ec <LCD_string>
	HAL_Delay(100);
 80009fe:	2064      	movs	r0, #100	; 0x64
 8000a00:	f000 fa6c 	bl	8000edc <HAL_Delay>
	strcpy(data_buf,'_');
 8000a04:	215f      	movs	r1, #95	; 0x5f
 8000a06:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MOTOR_Init+0x24>)
 8000a08:	f003 f8ce 	bl	8003ba8 <strcpy>
	LCD_string(data_buf);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <MOTOR_Init+0x24>)
 8000a0e:	f7ff fd6d 	bl	80004ec <LCD_string>
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
//	delay(3000);
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);        //Stop
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
//	Rfid_Init();
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000e8 	.word	0x200000e8

08000a1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <MX_USART1_UART_Init+0x50>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a54:	f002 f805 	bl	8002a62 <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a5e:	f000 f857 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000a0 	.word	0x200000a0
 8000a6c:	40011000 	.word	0x40011000

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MX_GPIO_Init+0x98>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <MX_GPIO_Init+0x98>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_GPIO_Init+0x98>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_GPIO_Init+0x98>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <MX_GPIO_Init+0x98>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_GPIO_Init+0x98>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_GPIO_Init+0x98>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <MX_GPIO_Init+0x98>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_GPIO_Init+0x98>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR1_Output_Pin|MOTOR2_Output_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2103      	movs	r1, #3
 8000ade:	480b      	ldr	r0, [pc, #44]	; (8000b0c <MX_GPIO_Init+0x9c>)
 8000ae0:	f000 fd48 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR1_Output_Pin MOTOR2_Output_Pin */
  GPIO_InitStruct.Pin = MOTOR1_Output_Pin|MOTOR2_Output_Pin;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	4619      	mov	r1, r3
 8000afa:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_GPIO_Init+0x9c>)
 8000afc:	f000 fbb6 	bl	800126c <HAL_GPIO_Init>

}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020800 	.word	0x40020800

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <HAL_I2C_MspInit+0x84>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d12b      	bne.n	8000be6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000baa:	23c0      	movs	r3, #192	; 0xc0
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bae:	2312      	movs	r3, #18
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <HAL_I2C_MspInit+0x8c>)
 8000bc6:	f000 fb51 	bl	800126c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000bd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020400 	.word	0x40020400

08000bfc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <HAL_RTC_MspInit+0x60>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d119      	bne.n	8000c54 <HAL_RTC_MspInit+0x58>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c20:	2302      	movs	r3, #2
 8000c22:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c28:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 fa56 	bl	80020e0 <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000c3a:	f7ff ff69 	bl	8000b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_RTC_MspInit+0x64>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2029      	movs	r0, #41	; 0x29
 8000c4a:	f000 fa46 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000c4e:	2029      	movs	r0, #41	; 0x29
 8000c50:	f000 fa5f 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3720      	adds	r7, #32
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40002800 	.word	0x40002800
 8000c60:	42470e3c 	.word	0x42470e3c

08000c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <HAL_UART_MspInit+0x94>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d134      	bne.n	8000cf0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <HAL_UART_MspInit+0x98>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a1b      	ldr	r2, [pc, #108]	; (8000cfc <HAL_UART_MspInit+0x98>)
 8000c90:	f043 0310 	orr.w	r3, r3, #16
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <HAL_UART_MspInit+0x98>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f003 0310 	and.w	r3, r3, #16
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_UART_MspInit+0x98>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <HAL_UART_MspInit+0x98>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_UART_MspInit+0x98>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cbe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4809      	ldr	r0, [pc, #36]	; (8000d00 <HAL_UART_MspInit+0x9c>)
 8000cdc:	f000 fac6 	bl	800126c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2025      	movs	r0, #37	; 0x25
 8000ce6:	f000 f9f8 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cea:	2025      	movs	r0, #37	; 0x25
 8000cec:	f000 fa11 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40011000 	.word	0x40011000
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020000 	.word	0x40020000

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d50:	f000 f8a4 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <USART1_IRQHandler+0x10>)
 8000d5e:	f001 ff8f 	bl	8002c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200000a0 	.word	0x200000a0

08000d6c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <RTC_Alarm_IRQHandler+0x10>)
 8000d72:	f001 fd7b 	bl	800286c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000080 	.word	0x20000080

08000d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <SystemInit+0x20>)
 8000d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8a:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <SystemInit+0x20>)
 8000d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ddc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000daa:	490e      	ldr	r1, [pc, #56]	; (8000de4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc0:	4c0b      	ldr	r4, [pc, #44]	; (8000df0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dce:	f7ff ffd7 	bl	8000d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f002 febd 	bl	8003b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd6:	f7ff fdb1 	bl	800093c <main>
  bx  lr    
 8000dda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000de8:	08003c14 	.word	0x08003c14
  ldr r2, =_sbss
 8000dec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000df0:	20000120 	.word	0x20000120

08000df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <HAL_Init+0x40>)
 8000e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <HAL_Init+0x40>)
 8000e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_Init+0x40>)
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f94f 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	200f      	movs	r0, #15
 8000e28:	f000 f808 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fe76 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023c00 	.word	0x40023c00

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f967 	bl	800112e <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 f92f 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000004 	.word	0x20000004
 8000e94:	2000000c 	.word	0x2000000c
 8000e98:	20000008 	.word	0x20000008

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	2000000c 	.word	0x2000000c
 8000ec0:	2000011c 	.word	0x2000011c

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	2000011c 	.word	0x2000011c

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000000c 	.word	0x2000000c

08000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4907      	ldr	r1, [pc, #28]	; (8000fc0 <__NVIC_EnableIRQ+0x38>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	; (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f7ff ff8e 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff29 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff3e 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff8e 	bl	8001018 <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5d 	bl	8000fc4 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff31 	bl	8000f88 <__NVIC_EnableIRQ>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffa2 	bl	8001080 <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff feb6 	bl	8000ec4 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d008      	beq.n	8001178 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e052      	b.n	800121e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0216 	bic.w	r2, r2, #22
 8001186:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	695a      	ldr	r2, [r3, #20]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001196:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	2b00      	cmp	r3, #0
 800119e:	d103      	bne.n	80011a8 <HAL_DMA_Abort+0x62>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d007      	beq.n	80011b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0208 	bic.w	r2, r2, #8
 80011b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0201 	bic.w	r2, r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c8:	e013      	b.n	80011f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ca:	f7ff fe7b 	bl	8000ec4 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b05      	cmp	r3, #5
 80011d6:	d90c      	bls.n	80011f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2220      	movs	r2, #32
 80011dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2203      	movs	r2, #3
 80011e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e015      	b.n	800121e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1e4      	bne.n	80011ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001204:	223f      	movs	r2, #63	; 0x3f
 8001206:	409a      	lsls	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d004      	beq.n	8001244 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e00c      	b.n	800125e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2205      	movs	r2, #5
 8001248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0201 	bic.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	e159      	b.n	800153c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f040 8148 	bne.w	8001536 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d005      	beq.n	80012be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d130      	bne.n	8001320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 0201 	and.w	r2, r3, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b03      	cmp	r3, #3
 800132a:	d017      	beq.n	800135c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d123      	bne.n	80013b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	08da      	lsrs	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3208      	adds	r2, #8
 80013aa:	69b9      	ldr	r1, [r7, #24]
 80013ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0203 	and.w	r2, r3, #3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a2 	beq.w	8001536 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b57      	ldr	r3, [pc, #348]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a56      	ldr	r2, [pc, #344]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b54      	ldr	r3, [pc, #336]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140e:	4a52      	ldr	r2, [pc, #328]	; (8001558 <HAL_GPIO_Init+0x2ec>)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a49      	ldr	r2, [pc, #292]	; (800155c <HAL_GPIO_Init+0x2f0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0x202>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a48      	ldr	r2, [pc, #288]	; (8001560 <HAL_GPIO_Init+0x2f4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x1fe>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a47      	ldr	r2, [pc, #284]	; (8001564 <HAL_GPIO_Init+0x2f8>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x1fa>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a46      	ldr	r2, [pc, #280]	; (8001568 <HAL_GPIO_Init+0x2fc>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x1f6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a45      	ldr	r2, [pc, #276]	; (800156c <HAL_GPIO_Init+0x300>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x1f2>
 800145a:	2304      	movs	r3, #4
 800145c:	e008      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800145e:	2307      	movs	r3, #7
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x204>
 8001462:	2303      	movs	r3, #3
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x204>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800146e:	2300      	movs	r3, #0
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001480:	4935      	ldr	r1, [pc, #212]	; (8001558 <HAL_GPIO_Init+0x2ec>)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148e:	4b38      	ldr	r3, [pc, #224]	; (8001570 <HAL_GPIO_Init+0x304>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b2:	4a2f      	ldr	r2, [pc, #188]	; (8001570 <HAL_GPIO_Init+0x304>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_GPIO_Init+0x304>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014dc:	4a24      	ldr	r2, [pc, #144]	; (8001570 <HAL_GPIO_Init+0x304>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <HAL_GPIO_Init+0x304>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001506:	4a1a      	ldr	r2, [pc, #104]	; (8001570 <HAL_GPIO_Init+0x304>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_GPIO_Init+0x304>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001530:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <HAL_GPIO_Init+0x304>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3301      	adds	r3, #1
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	f67f aea2 	bls.w	8001288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40013800 	.word	0x40013800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40021000 	.word	0x40021000
 8001570:	40013c00 	.word	0x40013c00

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001590:	e003      	b.n	800159a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e12b      	b.n	8001812 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d106      	bne.n	80015d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff facc 	bl	8000b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2224      	movs	r2, #36	; 0x24
 80015d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0201 	bic.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800160a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800160c:	f000 fd40 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 8001610:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4a81      	ldr	r2, [pc, #516]	; (800181c <HAL_I2C_Init+0x274>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d807      	bhi.n	800162c <HAL_I2C_Init+0x84>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4a80      	ldr	r2, [pc, #512]	; (8001820 <HAL_I2C_Init+0x278>)
 8001620:	4293      	cmp	r3, r2
 8001622:	bf94      	ite	ls
 8001624:	2301      	movls	r3, #1
 8001626:	2300      	movhi	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	e006      	b.n	800163a <HAL_I2C_Init+0x92>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4a7d      	ldr	r2, [pc, #500]	; (8001824 <HAL_I2C_Init+0x27c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	bf94      	ite	ls
 8001634:	2301      	movls	r3, #1
 8001636:	2300      	movhi	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e0e7      	b.n	8001812 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4a78      	ldr	r2, [pc, #480]	; (8001828 <HAL_I2C_Init+0x280>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	0c9b      	lsrs	r3, r3, #18
 800164c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4a6a      	ldr	r2, [pc, #424]	; (800181c <HAL_I2C_Init+0x274>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d802      	bhi.n	800167c <HAL_I2C_Init+0xd4>
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	3301      	adds	r3, #1
 800167a:	e009      	b.n	8001690 <HAL_I2C_Init+0xe8>
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	4a69      	ldr	r2, [pc, #420]	; (800182c <HAL_I2C_Init+0x284>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	099b      	lsrs	r3, r3, #6
 800168e:	3301      	adds	r3, #1
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	430b      	orrs	r3, r1
 8001696:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	495c      	ldr	r1, [pc, #368]	; (800181c <HAL_I2C_Init+0x274>)
 80016ac:	428b      	cmp	r3, r1
 80016ae:	d819      	bhi.n	80016e4 <HAL_I2C_Init+0x13c>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1e59      	subs	r1, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80016be:	1c59      	adds	r1, r3, #1
 80016c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016c4:	400b      	ands	r3, r1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00a      	beq.n	80016e0 <HAL_I2C_Init+0x138>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1e59      	subs	r1, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016d8:	3301      	adds	r3, #1
 80016da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016de:	e051      	b.n	8001784 <HAL_I2C_Init+0x1dc>
 80016e0:	2304      	movs	r3, #4
 80016e2:	e04f      	b.n	8001784 <HAL_I2C_Init+0x1dc>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d111      	bne.n	8001710 <HAL_I2C_Init+0x168>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	1e58      	subs	r0, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6859      	ldr	r1, [r3, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	440b      	add	r3, r1
 80016fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf0c      	ite	eq
 8001708:	2301      	moveq	r3, #1
 800170a:	2300      	movne	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	e012      	b.n	8001736 <HAL_I2C_Init+0x18e>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1e58      	subs	r0, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6859      	ldr	r1, [r3, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	0099      	lsls	r1, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	fbb0 f3f3 	udiv	r3, r0, r3
 8001726:	3301      	adds	r3, #1
 8001728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172c:	2b00      	cmp	r3, #0
 800172e:	bf0c      	ite	eq
 8001730:	2301      	moveq	r3, #1
 8001732:	2300      	movne	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_Init+0x196>
 800173a:	2301      	movs	r3, #1
 800173c:	e022      	b.n	8001784 <HAL_I2C_Init+0x1dc>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10e      	bne.n	8001764 <HAL_I2C_Init+0x1bc>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1e58      	subs	r0, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6859      	ldr	r1, [r3, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	440b      	add	r3, r1
 8001754:	fbb0 f3f3 	udiv	r3, r0, r3
 8001758:	3301      	adds	r3, #1
 800175a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001762:	e00f      	b.n	8001784 <HAL_I2C_Init+0x1dc>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1e58      	subs	r0, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	0099      	lsls	r1, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	fbb0 f3f3 	udiv	r3, r0, r3
 800177a:	3301      	adds	r3, #1
 800177c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	6809      	ldr	r1, [r1, #0]
 8001788:	4313      	orrs	r3, r2
 800178a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69da      	ldr	r2, [r3, #28]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6911      	ldr	r1, [r2, #16]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	68d2      	ldr	r2, [r2, #12]
 80017be:	4311      	orrs	r1, r2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	430b      	orrs	r3, r1
 80017c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695a      	ldr	r2, [r3, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2220      	movs	r2, #32
 80017fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	000186a0 	.word	0x000186a0
 8001820:	001e847f 	.word	0x001e847f
 8001824:	003d08ff 	.word	0x003d08ff
 8001828:	431bde83 	.word	0x431bde83
 800182c:	10624dd3 	.word	0x10624dd3

08001830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e267      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d075      	beq.n	800193a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800184e:	4b88      	ldr	r3, [pc, #544]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b04      	cmp	r3, #4
 8001858:	d00c      	beq.n	8001874 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800185a:	4b85      	ldr	r3, [pc, #532]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001862:	2b08      	cmp	r3, #8
 8001864:	d112      	bne.n	800188c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001866:	4b82      	ldr	r3, [pc, #520]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001872:	d10b      	bne.n	800188c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001874:	4b7e      	ldr	r3, [pc, #504]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d05b      	beq.n	8001938 <HAL_RCC_OscConfig+0x108>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d157      	bne.n	8001938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e242      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001894:	d106      	bne.n	80018a4 <HAL_RCC_OscConfig+0x74>
 8001896:	4b76      	ldr	r3, [pc, #472]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a75      	ldr	r2, [pc, #468]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e01d      	b.n	80018e0 <HAL_RCC_OscConfig+0xb0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x98>
 80018ae:	4b70      	ldr	r3, [pc, #448]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a6f      	ldr	r2, [pc, #444]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b6d      	ldr	r3, [pc, #436]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a6c      	ldr	r2, [pc, #432]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0xb0>
 80018c8:	4b69      	ldr	r3, [pc, #420]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a68      	ldr	r2, [pc, #416]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b66      	ldr	r3, [pc, #408]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a65      	ldr	r2, [pc, #404]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d013      	beq.n	8001910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff faec 	bl	8000ec4 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f0:	f7ff fae8 	bl	8000ec4 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	; 0x64
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e207      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b5b      	ldr	r3, [pc, #364]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0xc0>
 800190e:	e014      	b.n	800193a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff fad8 	bl	8000ec4 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fad4 	bl	8000ec4 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e1f3      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	4b51      	ldr	r3, [pc, #324]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0xe8>
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d063      	beq.n	8001a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001946:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00b      	beq.n	800196a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001952:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800195a:	2b08      	cmp	r3, #8
 800195c:	d11c      	bne.n	8001998 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195e:	4b44      	ldr	r3, [pc, #272]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d116      	bne.n	8001998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196a:	4b41      	ldr	r3, [pc, #260]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_RCC_OscConfig+0x152>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d001      	beq.n	8001982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e1c7      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001982:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4937      	ldr	r1, [pc, #220]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001996:	e03a      	b.n	8001a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d020      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a0:	4b34      	ldr	r3, [pc, #208]	; (8001a74 <HAL_RCC_OscConfig+0x244>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	f7ff fa8d 	bl	8000ec4 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff fa89 	bl	8000ec4 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e1a8      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4925      	ldr	r1, [pc, #148]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
 80019e0:	e015      	b.n	8001a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_RCC_OscConfig+0x244>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff fa6c 	bl	8000ec4 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f0:	f7ff fa68 	bl	8000ec4 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e187      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d036      	beq.n	8001a88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d016      	beq.n	8001a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_RCC_OscConfig+0x248>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7ff fa4c 	bl	8000ec4 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a30:	f7ff fa48 	bl	8000ec4 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e167      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x200>
 8001a4e:	e01b      	b.n	8001a88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_RCC_OscConfig+0x248>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7ff fa35 	bl	8000ec4 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5c:	e00e      	b.n	8001a7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fa31 	bl	8000ec4 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d907      	bls.n	8001a7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e150      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
 8001a70:	40023800 	.word	0x40023800
 8001a74:	42470000 	.word	0x42470000
 8001a78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	4b88      	ldr	r3, [pc, #544]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1ea      	bne.n	8001a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 8097 	beq.w	8001bc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9a:	4b81      	ldr	r3, [pc, #516]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10f      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b7d      	ldr	r3, [pc, #500]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a7c      	ldr	r2, [pc, #496]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b7a      	ldr	r3, [pc, #488]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac6:	4b77      	ldr	r3, [pc, #476]	; (8001ca4 <HAL_RCC_OscConfig+0x474>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d118      	bne.n	8001b04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad2:	4b74      	ldr	r3, [pc, #464]	; (8001ca4 <HAL_RCC_OscConfig+0x474>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a73      	ldr	r2, [pc, #460]	; (8001ca4 <HAL_RCC_OscConfig+0x474>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ade:	f7ff f9f1 	bl	8000ec4 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae6:	f7ff f9ed 	bl	8000ec4 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e10c      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	4b6a      	ldr	r3, [pc, #424]	; (8001ca4 <HAL_RCC_OscConfig+0x474>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x2ea>
 8001b0c:	4b64      	ldr	r3, [pc, #400]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b10:	4a63      	ldr	r2, [pc, #396]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6713      	str	r3, [r2, #112]	; 0x70
 8001b18:	e01c      	b.n	8001b54 <HAL_RCC_OscConfig+0x324>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x30c>
 8001b22:	4b5f      	ldr	r3, [pc, #380]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b26:	4a5e      	ldr	r2, [pc, #376]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	4a5b      	ldr	r2, [pc, #364]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0x324>
 8001b3c:	4b58      	ldr	r3, [pc, #352]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b40:	4a57      	ldr	r2, [pc, #348]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	6713      	str	r3, [r2, #112]	; 0x70
 8001b48:	4b55      	ldr	r3, [pc, #340]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4c:	4a54      	ldr	r2, [pc, #336]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	f023 0304 	bic.w	r3, r3, #4
 8001b52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d015      	beq.n	8001b88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7ff f9b2 	bl	8000ec4 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	f7ff f9ae 	bl	8000ec4 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e0cb      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7a:	4b49      	ldr	r3, [pc, #292]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0ee      	beq.n	8001b64 <HAL_RCC_OscConfig+0x334>
 8001b86:	e014      	b.n	8001bb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b88:	f7ff f99c 	bl	8000ec4 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7ff f998 	bl	8000ec4 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e0b5      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba6:	4b3e      	ldr	r3, [pc, #248]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ee      	bne.n	8001b90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d105      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb8:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	4a38      	ldr	r2, [pc, #224]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a1 	beq.w	8001d10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bce:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d05c      	beq.n	8001c94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d141      	bne.n	8001c66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be2:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <HAL_RCC_OscConfig+0x478>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff f96c 	bl	8000ec4 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7ff f968 	bl	8000ec4 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e087      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c02:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	019b      	lsls	r3, r3, #6
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	085b      	lsrs	r3, r3, #1
 8001c26:	3b01      	subs	r3, #1
 8001c28:	041b      	lsls	r3, r3, #16
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	061b      	lsls	r3, r3, #24
 8001c32:	491b      	ldr	r1, [pc, #108]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c38:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_RCC_OscConfig+0x478>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff f941 	bl	8000ec4 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c46:	f7ff f93d 	bl	8000ec4 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e05c      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x416>
 8001c64:	e054      	b.n	8001d10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_RCC_OscConfig+0x478>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff f92a 	bl	8000ec4 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff f926 	bl	8000ec4 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e045      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x444>
 8001c92:	e03d      	b.n	8001d10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e038      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_RCC_OscConfig+0x4ec>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d028      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d121      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d11a      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cdc:	4013      	ands	r3, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ce2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d111      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	085b      	lsrs	r3, r3, #1
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d107      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0cc      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d34:	4b68      	ldr	r3, [pc, #416]	; (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d90c      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b65      	ldr	r3, [pc, #404]	; (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b63      	ldr	r3, [pc, #396]	; (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0b8      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d74:	4b59      	ldr	r3, [pc, #356]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4a58      	ldr	r2, [pc, #352]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d8c:	4b53      	ldr	r3, [pc, #332]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4a52      	ldr	r2, [pc, #328]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d98:	4b50      	ldr	r3, [pc, #320]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	494d      	ldr	r1, [pc, #308]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d044      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b47      	ldr	r3, [pc, #284]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d119      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e07f      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d003      	beq.n	8001dde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dde:	4b3f      	ldr	r3, [pc, #252]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e06f      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e067      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfe:	4b37      	ldr	r3, [pc, #220]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 0203 	bic.w	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4934      	ldr	r1, [pc, #208]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e10:	f7ff f858 	bl	8000ec4 <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e18:	f7ff f854 	bl	8000ec4 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e04f      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 020c 	and.w	r2, r3, #12
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1eb      	bne.n	8001e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e40:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d20c      	bcs.n	8001e68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e032      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4916      	ldr	r1, [pc, #88]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	490e      	ldr	r1, [pc, #56]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ea6:	f000 f821 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	490a      	ldr	r1, [pc, #40]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	5ccb      	ldrb	r3, [r1, r3]
 8001eba:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebe:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe ffb8 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023c00 	.word	0x40023c00
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	08003bec 	.word	0x08003bec
 8001ee4:	20000004 	.word	0x20000004
 8001ee8:	20000008 	.word	0x20000008

08001eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef0:	b090      	sub	sp, #64	; 0x40
 8001ef2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ef8:	2300      	movs	r3, #0
 8001efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001efc:	2300      	movs	r3, #0
 8001efe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f04:	4b59      	ldr	r3, [pc, #356]	; (800206c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d00d      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x40>
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	f200 80a1 	bhi.w	8002058 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0x34>
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d003      	beq.n	8001f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f1e:	e09b      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f20:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f22:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001f24:	e09b      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f26:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f2a:	e098      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f2c:	4b4f      	ldr	r3, [pc, #316]	; (800206c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f34:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f36:	4b4d      	ldr	r3, [pc, #308]	; (800206c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d028      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f42:	4b4a      	ldr	r3, [pc, #296]	; (800206c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	099b      	lsrs	r3, r3, #6
 8001f48:	2200      	movs	r2, #0
 8001f4a:	623b      	str	r3, [r7, #32]
 8001f4c:	627a      	str	r2, [r7, #36]	; 0x24
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f54:	2100      	movs	r1, #0
 8001f56:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f58:	fb03 f201 	mul.w	r2, r3, r1
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	fb00 f303 	mul.w	r3, r0, r3
 8001f62:	4413      	add	r3, r2
 8001f64:	4a43      	ldr	r2, [pc, #268]	; (8002074 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f66:	fba0 1202 	umull	r1, r2, r0, r2
 8001f6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f6c:	460a      	mov	r2, r1
 8001f6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f72:	4413      	add	r3, r2
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f78:	2200      	movs	r2, #0
 8001f7a:	61bb      	str	r3, [r7, #24]
 8001f7c:	61fa      	str	r2, [r7, #28]
 8001f7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f86:	f7fe f92f 	bl	80001e8 <__aeabi_uldivmod>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4613      	mov	r3, r2
 8001f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f92:	e053      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f94:	4b35      	ldr	r3, [pc, #212]	; (800206c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	099b      	lsrs	r3, r3, #6
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	617a      	str	r2, [r7, #20]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fa6:	f04f 0b00 	mov.w	fp, #0
 8001faa:	4652      	mov	r2, sl
 8001fac:	465b      	mov	r3, fp
 8001fae:	f04f 0000 	mov.w	r0, #0
 8001fb2:	f04f 0100 	mov.w	r1, #0
 8001fb6:	0159      	lsls	r1, r3, #5
 8001fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fbc:	0150      	lsls	r0, r2, #5
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	ebb2 080a 	subs.w	r8, r2, sl
 8001fc6:	eb63 090b 	sbc.w	r9, r3, fp
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001fda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001fde:	ebb2 0408 	subs.w	r4, r2, r8
 8001fe2:	eb63 0509 	sbc.w	r5, r3, r9
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	00eb      	lsls	r3, r5, #3
 8001ff0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ff4:	00e2      	lsls	r2, r4, #3
 8001ff6:	4614      	mov	r4, r2
 8001ff8:	461d      	mov	r5, r3
 8001ffa:	eb14 030a 	adds.w	r3, r4, sl
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	eb45 030b 	adc.w	r3, r5, fp
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002012:	4629      	mov	r1, r5
 8002014:	028b      	lsls	r3, r1, #10
 8002016:	4621      	mov	r1, r4
 8002018:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800201c:	4621      	mov	r1, r4
 800201e:	028a      	lsls	r2, r1, #10
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002026:	2200      	movs	r2, #0
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	60fa      	str	r2, [r7, #12]
 800202c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002030:	f7fe f8da 	bl	80001e8 <__aeabi_uldivmod>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4613      	mov	r3, r2
 800203a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_GetSysClockFreq+0x180>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	0c1b      	lsrs	r3, r3, #16
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	3301      	adds	r3, #1
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800204c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800204e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002050:	fbb2 f3f3 	udiv	r3, r2, r3
 8002054:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002056:	e002      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCC_GetSysClockFreq+0x184>)
 800205a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800205c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800205e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002060:	4618      	mov	r0, r3
 8002062:	3740      	adds	r7, #64	; 0x40
 8002064:	46bd      	mov	sp, r7
 8002066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	00f42400 	.word	0x00f42400
 8002074:	017d7840 	.word	0x017d7840

08002078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_RCC_GetHCLKFreq+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000004 	.word	0x20000004

08002090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002094:	f7ff fff0 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 8002098:	4602      	mov	r2, r0
 800209a:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	0a9b      	lsrs	r3, r3, #10
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	4903      	ldr	r1, [pc, #12]	; (80020b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a6:	5ccb      	ldrb	r3, [r1, r3]
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40023800 	.word	0x40023800
 80020b4:	08003bfc 	.word	0x08003bfc

080020b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020bc:	f7ff ffdc 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	0b5b      	lsrs	r3, r3, #13
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4903      	ldr	r1, [pc, #12]	; (80020dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40023800 	.word	0x40023800
 80020dc:	08003bfc 	.word	0x08003bfc

080020e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002104:	2b00      	cmp	r3, #0
 8002106:	d038      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002108:	4b68      	ldr	r3, [pc, #416]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800210e:	f7fe fed9 	bl	8000ec4 <HAL_GetTick>
 8002112:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002116:	f7fe fed5 	bl	8000ec4 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e0bd      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002128:	4b61      	ldr	r3, [pc, #388]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f0      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	019b      	lsls	r3, r3, #6
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	071b      	lsls	r3, r3, #28
 8002146:	495a      	ldr	r1, [pc, #360]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800214e:	4b57      	ldr	r3, [pc, #348]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002154:	f7fe feb6 	bl	8000ec4 <HAL_GetTick>
 8002158:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800215c:	f7fe feb2 	bl	8000ec4 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e09a      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800216e:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8083 	beq.w	800228e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	4b48      	ldr	r3, [pc, #288]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	4a47      	ldr	r2, [pc, #284]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002196:	6413      	str	r3, [r2, #64]	; 0x40
 8002198:	4b45      	ldr	r3, [pc, #276]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80021a4:	4b43      	ldr	r3, [pc, #268]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a42      	ldr	r2, [pc, #264]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021b0:	f7fe fe88 	bl	8000ec4 <HAL_GetTick>
 80021b4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7fe fe84 	bl	8000ec4 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e06c      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021ca:	4b3a      	ldr	r3, [pc, #232]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021d6:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021de:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d02f      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d028      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021fe:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002200:	2201      	movs	r2, #1
 8002202:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002204:	4b2c      	ldr	r3, [pc, #176]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800220a:	4a29      	ldr	r2, [pc, #164]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002210:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b01      	cmp	r3, #1
 800221a:	d114      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fe52 	bl	8000ec4 <HAL_GetTick>
 8002220:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002222:	e00a      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002224:	f7fe fe4e 	bl	8000ec4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e034      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223a:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0ee      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800224e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002252:	d10d      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002254:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002268:	4911      	ldr	r1, [pc, #68]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
 800226e:	e005      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002276:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800227a:	6093      	str	r3, [r2, #8]
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800227e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002288:	4909      	ldr	r1, [pc, #36]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800228a:	4313      	orrs	r3, r2
 800228c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7d1a      	ldrb	r2, [r3, #20]
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80022a0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	42470068 	.word	0x42470068
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40007000 	.word	0x40007000
 80022b8:	42470e40 	.word	0x42470e40
 80022bc:	424711e0 	.word	0x424711e0

080022c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e066      	b.n	80023a4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	7f5b      	ldrb	r3, [r3, #29]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe fc88 	bl	8000bfc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	22ca      	movs	r2, #202	; 0xca
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2253      	movs	r2, #83	; 0x53
 8002300:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fb2a 	bl	800295c <RTC_EnterInitMode>
 8002308:	4603      	mov	r3, r0
 800230a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d12c      	bne.n	800236c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002324:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6899      	ldr	r1, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68d2      	ldr	r2, [r2, #12]
 800234c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6919      	ldr	r1, [r3, #16]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	041a      	lsls	r2, r3, #16
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 fb31 	bl	80029ca <RTC_ExitInitMode>
 8002368:	4603      	mov	r3, r0
 800236a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d113      	bne.n	800239a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	22ff      	movs	r2, #255	; 0xff
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80023ac:	b590      	push	{r4, r7, lr}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	7f1b      	ldrb	r3, [r3, #28]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_RTC_SetTime+0x1c>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e087      	b.n	80024d8 <HAL_RTC_SetTime+0x12c>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2201      	movs	r2, #1
 80023cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2202      	movs	r2, #2
 80023d2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d126      	bne.n	8002428 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2200      	movs	r2, #0
 80023ec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fb0e 	bl	8002a14 <RTC_ByteToBcd2>
 80023f8:	4603      	mov	r3, r0
 80023fa:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	785b      	ldrb	r3, [r3, #1]
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fb07 	bl	8002a14 <RTC_ByteToBcd2>
 8002406:	4603      	mov	r3, r0
 8002408:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800240a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	789b      	ldrb	r3, [r3, #2]
 8002410:	4618      	mov	r0, r3
 8002412:	f000 faff 	bl	8002a14 <RTC_ByteToBcd2>
 8002416:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002418:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	78db      	ldrb	r3, [r3, #3]
 8002420:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	e018      	b.n	800245a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2200      	movs	r2, #0
 800243a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	785b      	ldrb	r3, [r3, #1]
 8002446:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002448:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800244e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	78db      	ldrb	r3, [r3, #3]
 8002454:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	22ca      	movs	r2, #202	; 0xca
 8002460:	625a      	str	r2, [r3, #36]	; 0x24
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2253      	movs	r2, #83	; 0x53
 8002468:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 fa76 	bl	800295c <RTC_EnterInitMode>
 8002470:	4603      	mov	r3, r0
 8002472:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d120      	bne.n	80024bc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002484:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002488:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002498:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6899      	ldr	r1, [r3, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	431a      	orrs	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 fa89 	bl	80029ca <RTC_ExitInitMode>
 80024b8:	4603      	mov	r3, r0
 80024ba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d102      	bne.n	80024c8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	22ff      	movs	r2, #255	; 0xff
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	771a      	strb	r2, [r3, #28]

  return status;
 80024d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	371c      	adds	r7, #28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd90      	pop	{r4, r7, pc}

080024e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	7f1b      	ldrb	r3, [r3, #28]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_RTC_SetDate+0x1c>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e071      	b.n	80025e0 <HAL_RTC_SetDate+0x100>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2202      	movs	r2, #2
 8002506:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10e      	bne.n	800252c <HAL_RTC_SetDate+0x4c>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	785b      	ldrb	r3, [r3, #1]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	785b      	ldrb	r3, [r3, #1]
 800251e:	f023 0310 	bic.w	r3, r3, #16
 8002522:	b2db      	uxtb	r3, r3
 8002524:	330a      	adds	r3, #10
 8002526:	b2da      	uxtb	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d11c      	bne.n	800256c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	78db      	ldrb	r3, [r3, #3]
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fa6c 	bl	8002a14 <RTC_ByteToBcd2>
 800253c:	4603      	mov	r3, r0
 800253e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	785b      	ldrb	r3, [r3, #1]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fa65 	bl	8002a14 <RTC_ByteToBcd2>
 800254a:	4603      	mov	r3, r0
 800254c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800254e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	789b      	ldrb	r3, [r3, #2]
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fa5d 	bl	8002a14 <RTC_ByteToBcd2>
 800255a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800255c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002566:	4313      	orrs	r3, r2
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	e00e      	b.n	800258a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	78db      	ldrb	r3, [r3, #3]
 8002570:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	785b      	ldrb	r3, [r3, #1]
 8002576:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002578:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800257e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002586:	4313      	orrs	r3, r2
 8002588:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	22ca      	movs	r2, #202	; 0xca
 8002590:	625a      	str	r2, [r3, #36]	; 0x24
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2253      	movs	r2, #83	; 0x53
 8002598:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f9de 	bl	800295c <RTC_EnterInitMode>
 80025a0:	4603      	mov	r3, r0
 80025a2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10c      	bne.n	80025c4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80025b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80025b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fa05 	bl	80029ca <RTC_ExitInitMode>
 80025c0:	4603      	mov	r3, r0
 80025c2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d102      	bne.n	80025d0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	22ff      	movs	r2, #255	; 0xff
 80025d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	771a      	strb	r2, [r3, #28]

  return status;
 80025de:	7cfb      	ldrb	r3, [r7, #19]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	371c      	adds	r7, #28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd90      	pop	{r4, r7, pc}

080025e8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80025f4:	4b9a      	ldr	r3, [pc, #616]	; (8002860 <HAL_RTC_SetAlarm_IT+0x278>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a9a      	ldr	r2, [pc, #616]	; (8002864 <HAL_RTC_SetAlarm_IT+0x27c>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	0adb      	lsrs	r3, r3, #11
 8002600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	7f1b      	ldrb	r3, [r3, #28]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_RTC_SetAlarm_IT+0x36>
 800261a:	2302      	movs	r3, #2
 800261c:	e11c      	b.n	8002858 <HAL_RTC_SetAlarm_IT+0x270>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2202      	movs	r2, #2
 8002628:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d137      	bne.n	80026a0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d102      	bne.n	8002644 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2200      	movs	r2, #0
 8002642:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f000 f9e3 	bl	8002a14 <RTC_ByteToBcd2>
 800264e:	4603      	mov	r3, r0
 8002650:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	785b      	ldrb	r3, [r3, #1]
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f9dc 	bl	8002a14 <RTC_ByteToBcd2>
 800265c:	4603      	mov	r3, r0
 800265e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002660:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	789b      	ldrb	r3, [r3, #2]
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f9d4 	bl	8002a14 <RTC_ByteToBcd2>
 800266c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800266e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	78db      	ldrb	r3, [r3, #3]
 8002676:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002678:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f9c6 	bl	8002a14 <RTC_ByteToBcd2>
 8002688:	4603      	mov	r3, r0
 800268a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800268c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002694:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800269a:	4313      	orrs	r3, r2
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e023      	b.n	80026e8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d102      	bne.n	80026b4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2200      	movs	r2, #0
 80026b2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	785b      	ldrb	r3, [r3, #1]
 80026be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80026c0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80026c6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	78db      	ldrb	r3, [r3, #3]
 80026cc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80026ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80026d8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80026de:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	22ca      	movs	r2, #202	; 0xca
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2253      	movs	r2, #83	; 0x53
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800270c:	d141      	bne.n	8002792 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800271c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	b2da      	uxtb	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800272e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	1e5a      	subs	r2, r3, #1
 8002734:	617a      	str	r2, [r7, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10b      	bne.n	8002752 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	22ff      	movs	r2, #255	; 0xff
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2203      	movs	r2, #3
 8002746:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e082      	b.n	8002858 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0e7      	beq.n	8002730 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800277e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	e04b      	b.n	800282a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027a0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f462 7220 	orn	r2, r2, #640	; 0x280
 80027b2:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80027b4:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <HAL_RTC_SetAlarm_IT+0x278>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2a      	ldr	r2, [pc, #168]	; (8002864 <HAL_RTC_SetAlarm_IT+0x27c>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	0adb      	lsrs	r3, r3, #11
 80027c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027c4:	fb02 f303 	mul.w	r3, r2, r3
 80027c8:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	1e5a      	subs	r2, r3, #1
 80027ce:	617a      	str	r2, [r7, #20]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10b      	bne.n	80027ec <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	22ff      	movs	r2, #255	; 0xff
 80027da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2203      	movs	r2, #3
 80027e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e035      	b.n	8002858 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0e7      	beq.n	80027ca <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002818:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002828:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800282a:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <HAL_RTC_SetAlarm_IT+0x280>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <HAL_RTC_SetAlarm_IT+0x280>)
 8002830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002834:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002836:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <HAL_RTC_SetAlarm_IT+0x280>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <HAL_RTC_SetAlarm_IT+0x280>)
 800283c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002840:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	22ff      	movs	r2, #255	; 0xff
 8002848:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3724      	adds	r7, #36	; 0x24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd90      	pop	{r4, r7, pc}
 8002860:	20000004 	.word	0x20000004
 8002864:	10624dd3 	.word	0x10624dd3
 8002868:	40013c00 	.word	0x40013c00

0800286c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d012      	beq.n	80028a8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00b      	beq.n	80028a8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f831 	bl	80028f8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80028a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d012      	beq.n	80028dc <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00b      	beq.n	80028dc <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f8c2 	bl	8002a4e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80028da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RTC_AlarmIRQHandler+0x88>)
 80028de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028e2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	775a      	strb	r2, [r3, #29]
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40013c00 	.word	0x40013c00

080028f8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002926:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002928:	f7fe facc 	bl	8000ec4 <HAL_GetTick>
 800292c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800292e:	e009      	b.n	8002944 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002930:	f7fe fac8 	bl	8000ec4 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800293e:	d901      	bls.n	8002944 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e007      	b.n	8002954 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0ee      	beq.n	8002930 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d122      	bne.n	80029c0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002988:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800298a:	f7fe fa9b 	bl	8000ec4 <HAL_GetTick>
 800298e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002990:	e00c      	b.n	80029ac <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002992:	f7fe fa97 	bl	8000ec4 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029a0:	d904      	bls.n	80029ac <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2204      	movs	r2, #4
 80029a6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d102      	bne.n	80029c0 <RTC_EnterInitMode+0x64>
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d1e8      	bne.n	8002992 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029e4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff89 	bl	800290c <HAL_RTC_WaitForSynchro>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d004      	beq.n	8002a0a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2204      	movs	r2, #4
 8002a04:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002a22:	e005      	b.n	8002a30 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	3301      	adds	r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	3b0a      	subs	r3, #10
 8002a2e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	2b09      	cmp	r3, #9
 8002a34:	d8f6      	bhi.n	8002a24 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	b2db      	uxtb	r3, r3
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e03f      	b.n	8002af4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d106      	bne.n	8002a8e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7fe f8eb 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2224      	movs	r2, #36	; 0x24
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aa4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fdde 	bl	8003668 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ada:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	; 0x28
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d17c      	bne.n	8002c16 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <HAL_UART_Transmit+0x2c>
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e075      	b.n	8002c18 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_UART_Transmit+0x3e>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e06e      	b.n	8002c18 <HAL_UART_Transmit+0x11c>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2221      	movs	r2, #33	; 0x21
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b50:	f7fe f9b8 	bl	8000ec4 <HAL_GetTick>
 8002b54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	88fa      	ldrh	r2, [r7, #6]
 8002b5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6a:	d108      	bne.n	8002b7e <HAL_UART_Transmit+0x82>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d104      	bne.n	8002b7e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	61bb      	str	r3, [r7, #24]
 8002b7c:	e003      	b.n	8002b86 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b8e:	e02a      	b.n	8002be6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2200      	movs	r2, #0
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fb1e 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e036      	b.n	8002c18 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10b      	bne.n	8002bc8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bbe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	e007      	b.n	8002bd8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	781a      	ldrb	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1cf      	bne.n	8002b90 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2140      	movs	r1, #64	; 0x40
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 faee 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e006      	b.n	8002c18 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e000      	b.n	8002c18 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c16:	2302      	movs	r3, #2
  }
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3720      	adds	r7, #32
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d11d      	bne.n	8002c76 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <HAL_UART_Receive_IT+0x26>
 8002c40:	88fb      	ldrh	r3, [r7, #6]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e016      	b.n	8002c78 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_UART_Receive_IT+0x38>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e00f      	b.n	8002c78 <HAL_UART_Receive_IT+0x58>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fb23 	bl	80032b8 <UART_Start_Receive_IT>
 8002c72:	4603      	mov	r3, r0
 8002c74:	e000      	b.n	8002c78 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002c76:	2302      	movs	r3, #2
  }
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b0ba      	sub	sp, #232	; 0xe8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002cbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x66>
 8002cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fc07 	bl	80034f2 <UART_Receive_IT>
      return;
 8002ce4:	e256      	b.n	8003194 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ce6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80de 	beq.w	8002eac <HAL_UART_IRQHandler+0x22c>
 8002cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d106      	bne.n	8002d0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80d1 	beq.w	8002eac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_UART_IRQHandler+0xae>
 8002d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0201 	orr.w	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HAL_UART_IRQHandler+0xd2>
 8002d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f043 0202 	orr.w	r2, r3, #2
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_UART_IRQHandler+0xf6>
 8002d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f043 0204 	orr.w	r2, r3, #4
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d011      	beq.n	8002da6 <HAL_UART_IRQHandler+0x126>
 8002d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d105      	bne.n	8002d9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d005      	beq.n	8002da6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f043 0208 	orr.w	r2, r3, #8
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 81ed 	beq.w	800318a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_UART_IRQHandler+0x14e>
 8002dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fb92 	bl	80034f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd8:	2b40      	cmp	r3, #64	; 0x40
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <HAL_UART_IRQHandler+0x17a>
 8002df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d04f      	beq.n	8002e9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fa9a 	bl	8003334 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	2b40      	cmp	r3, #64	; 0x40
 8002e0c:	d141      	bne.n	8002e92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3314      	adds	r3, #20
 8002e14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e1c:	e853 3f00 	ldrex	r3, [r3]
 8002e20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3314      	adds	r3, #20
 8002e36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e4a:	e841 2300 	strex	r3, r2, [r1]
 8002e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1d9      	bne.n	8002e0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d013      	beq.n	8002e8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	4a7d      	ldr	r2, [pc, #500]	; (800305c <HAL_UART_IRQHandler+0x3dc>)
 8002e68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe f9d9 	bl	8001226 <HAL_DMA_Abort_IT>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d016      	beq.n	8002ea8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e84:	4610      	mov	r0, r2
 8002e86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e88:	e00e      	b.n	8002ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f990 	bl	80031b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e90:	e00a      	b.n	8002ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f98c 	bl	80031b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e98:	e006      	b.n	8002ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f988 	bl	80031b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002ea6:	e170      	b.n	800318a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea8:	bf00      	nop
    return;
 8002eaa:	e16e      	b.n	800318a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	f040 814a 	bne.w	800314a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8143 	beq.w	800314a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 813c 	beq.w	800314a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef2:	2b40      	cmp	r3, #64	; 0x40
 8002ef4:	f040 80b4 	bne.w	8003060 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8140 	beq.w	800318e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f16:	429a      	cmp	r2, r3
 8002f18:	f080 8139 	bcs.w	800318e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f2e:	f000 8088 	beq.w	8003042 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f40:	e853 3f00 	ldrex	r3, [r3]
 8002f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1d9      	bne.n	8002f32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3314      	adds	r3, #20
 8002f84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f88:	e853 3f00 	ldrex	r3, [r3]
 8002f8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3314      	adds	r3, #20
 8002f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fa2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e1      	bne.n	8002f7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3314      	adds	r3, #20
 8002fc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fc4:	e853 3f00 	ldrex	r3, [r3]
 8002fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3314      	adds	r3, #20
 8002fda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fe0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fe4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1e3      	bne.n	8002fba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	330c      	adds	r3, #12
 8003006:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800300a:	e853 3f00 	ldrex	r3, [r3]
 800300e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003012:	f023 0310 	bic.w	r3, r3, #16
 8003016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003024:	65ba      	str	r2, [r7, #88]	; 0x58
 8003026:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003028:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800302a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800302c:	e841 2300 	strex	r3, r2, [r1]
 8003030:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e3      	bne.n	8003000 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	4618      	mov	r0, r3
 800303e:	f7fe f882 	bl	8001146 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800304a:	b29b      	uxth	r3, r3
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	b29b      	uxth	r3, r3
 8003050:	4619      	mov	r1, r3
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f8b6 	bl	80031c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003058:	e099      	b.n	800318e <HAL_UART_IRQHandler+0x50e>
 800305a:	bf00      	nop
 800305c:	080033fb 	.word	0x080033fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003068:	b29b      	uxth	r3, r3
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 808b 	beq.w	8003192 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800307c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8086 	beq.w	8003192 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	330c      	adds	r3, #12
 800308c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	e853 3f00 	ldrex	r3, [r3]
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003098:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800309c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80030aa:	647a      	str	r2, [r7, #68]	; 0x44
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1e3      	bne.n	8003086 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3314      	adds	r3, #20
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	e853 3f00 	ldrex	r3, [r3]
 80030cc:	623b      	str	r3, [r7, #32]
   return(result);
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	f023 0301 	bic.w	r3, r3, #1
 80030d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3314      	adds	r3, #20
 80030de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030e2:	633a      	str	r2, [r7, #48]	; 0x30
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ea:	e841 2300 	strex	r3, r2, [r1]
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1e3      	bne.n	80030be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	330c      	adds	r3, #12
 800310a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	e853 3f00 	ldrex	r3, [r3]
 8003112:	60fb      	str	r3, [r7, #12]
   return(result);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0310 	bic.w	r3, r3, #16
 800311a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003128:	61fa      	str	r2, [r7, #28]
 800312a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	69b9      	ldr	r1, [r7, #24]
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	e841 2300 	strex	r3, r2, [r1]
 8003134:	617b      	str	r3, [r7, #20]
   return(result);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e3      	bne.n	8003104 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800313c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f83e 	bl	80031c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003148:	e023      	b.n	8003192 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <HAL_UART_IRQHandler+0x4ea>
 8003156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f95d 	bl	8003422 <UART_Transmit_IT>
    return;
 8003168:	e014      	b.n	8003194 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800316a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800316e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00e      	beq.n	8003194 <HAL_UART_IRQHandler+0x514>
 8003176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f99d 	bl	80034c2 <UART_EndTransmit_IT>
    return;
 8003188:	e004      	b.n	8003194 <HAL_UART_IRQHandler+0x514>
    return;
 800318a:	bf00      	nop
 800318c:	e002      	b.n	8003194 <HAL_UART_IRQHandler+0x514>
      return;
 800318e:	bf00      	nop
 8003190:	e000      	b.n	8003194 <HAL_UART_IRQHandler+0x514>
      return;
 8003192:	bf00      	nop
  }
}
 8003194:	37e8      	adds	r7, #232	; 0xe8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop

0800319c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b090      	sub	sp, #64	; 0x40
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ec:	e050      	b.n	8003290 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d04c      	beq.n	8003290 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <UART_WaitOnFlagUntilTimeout+0x30>
 80031fc:	f7fd fe62 	bl	8000ec4 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003208:	429a      	cmp	r2, r3
 800320a:	d241      	bcs.n	8003290 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	330c      	adds	r3, #12
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800322c:	637a      	str	r2, [r7, #52]	; 0x34
 800322e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e5      	bne.n	800320c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3314      	adds	r3, #20
 8003246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	e853 3f00 	ldrex	r3, [r3]
 800324e:	613b      	str	r3, [r7, #16]
   return(result);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	63bb      	str	r3, [r7, #56]	; 0x38
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3314      	adds	r3, #20
 800325e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003260:	623a      	str	r2, [r7, #32]
 8003262:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003264:	69f9      	ldr	r1, [r7, #28]
 8003266:	6a3a      	ldr	r2, [r7, #32]
 8003268:	e841 2300 	strex	r3, r2, [r1]
 800326c:	61bb      	str	r3, [r7, #24]
   return(result);
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e5      	bne.n	8003240 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e00f      	b.n	80032b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	4013      	ands	r3, r2
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	429a      	cmp	r2, r3
 800329e:	bf0c      	ite	eq
 80032a0:	2301      	moveq	r3, #1
 80032a2:	2300      	movne	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d09f      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3740      	adds	r7, #64	; 0x40
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	4613      	mov	r3, r2
 80032c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	88fa      	ldrh	r2, [r7, #6]
 80032d0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2222      	movs	r2, #34	; 0x22
 80032e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003304:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0220 	orr.w	r2, r2, #32
 8003324:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003334:	b480      	push	{r7}
 8003336:	b095      	sub	sp, #84	; 0x54
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	330c      	adds	r3, #12
 8003342:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003346:	e853 3f00 	ldrex	r3, [r3]
 800334a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	330c      	adds	r3, #12
 800335a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800335c:	643a      	str	r2, [r7, #64]	; 0x40
 800335e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003360:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003362:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003364:	e841 2300 	strex	r3, r2, [r1]
 8003368:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800336a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e5      	bne.n	800333c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3314      	adds	r3, #20
 8003376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	e853 3f00 	ldrex	r3, [r3]
 800337e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f023 0301 	bic.w	r3, r3, #1
 8003386:	64bb      	str	r3, [r7, #72]	; 0x48
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3314      	adds	r3, #20
 800338e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003390:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003394:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003398:	e841 2300 	strex	r3, r2, [r1]
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e5      	bne.n	8003370 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d119      	bne.n	80033e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	330c      	adds	r3, #12
 80033b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f023 0310 	bic.w	r3, r3, #16
 80033c2:	647b      	str	r3, [r7, #68]	; 0x44
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033cc:	61ba      	str	r2, [r7, #24]
 80033ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6979      	ldr	r1, [r7, #20]
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	613b      	str	r3, [r7, #16]
   return(result);
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e5      	bne.n	80033ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033ee:	bf00      	nop
 80033f0:	3754      	adds	r7, #84	; 0x54
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f7ff fecb 	bl	80031b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003422:	b480      	push	{r7}
 8003424:	b085      	sub	sp, #20
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b21      	cmp	r3, #33	; 0x21
 8003434:	d13e      	bne.n	80034b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343e:	d114      	bne.n	800346a <UART_Transmit_IT+0x48>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d110      	bne.n	800346a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800345c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	1c9a      	adds	r2, r3, #2
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	621a      	str	r2, [r3, #32]
 8003468:	e008      	b.n	800347c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	1c59      	adds	r1, r3, #1
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6211      	str	r1, [r2, #32]
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29b      	uxth	r3, r3
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4619      	mov	r1, r3
 800348a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10f      	bne.n	80034b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800349e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff fe5a 	bl	800319c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b08c      	sub	sp, #48	; 0x30
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b22      	cmp	r3, #34	; 0x22
 8003504:	f040 80ab 	bne.w	800365e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003510:	d117      	bne.n	8003542 <UART_Receive_IT+0x50>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d113      	bne.n	8003542 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800351a:	2300      	movs	r3, #0
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	b29b      	uxth	r3, r3
 800352c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003530:	b29a      	uxth	r2, r3
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	1c9a      	adds	r2, r3, #2
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	629a      	str	r2, [r3, #40]	; 0x28
 8003540:	e026      	b.n	8003590 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003548:	2300      	movs	r3, #0
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003554:	d007      	beq.n	8003566 <UART_Receive_IT+0x74>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10a      	bne.n	8003574 <UART_Receive_IT+0x82>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	e008      	b.n	8003586 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003580:	b2da      	uxtb	r2, r3
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29b      	uxth	r3, r3
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4619      	mov	r1, r3
 800359e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d15a      	bne.n	800365a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0220 	bic.w	r2, r2, #32
 80035b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d135      	bne.n	8003650 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	330c      	adds	r3, #12
 80035f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	e853 3f00 	ldrex	r3, [r3]
 80035f8:	613b      	str	r3, [r7, #16]
   return(result);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f023 0310 	bic.w	r3, r3, #16
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	330c      	adds	r3, #12
 8003608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360a:	623a      	str	r2, [r7, #32]
 800360c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360e:	69f9      	ldr	r1, [r7, #28]
 8003610:	6a3a      	ldr	r2, [r7, #32]
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	61bb      	str	r3, [r7, #24]
   return(result);
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1e5      	bne.n	80035ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	2b10      	cmp	r3, #16
 800362a:	d10a      	bne.n	8003642 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003646:	4619      	mov	r1, r3
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff fdbb 	bl	80031c4 <HAL_UARTEx_RxEventCallback>
 800364e:	e002      	b.n	8003656 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7fd f9b3 	bl	80009bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	e002      	b.n	8003660 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	e000      	b.n	8003660 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800365e:	2302      	movs	r3, #2
  }
}
 8003660:	4618      	mov	r0, r3
 8003662:	3730      	adds	r7, #48	; 0x30
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800366c:	b0c0      	sub	sp, #256	; 0x100
 800366e:	af00      	add	r7, sp, #0
 8003670:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003684:	68d9      	ldr	r1, [r3, #12]
 8003686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	ea40 0301 	orr.w	r3, r0, r1
 8003690:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	431a      	orrs	r2, r3
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036c0:	f021 010c 	bic.w	r1, r1, #12
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036ce:	430b      	orrs	r3, r1
 80036d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e2:	6999      	ldr	r1, [r3, #24]
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	ea40 0301 	orr.w	r3, r0, r1
 80036ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4b8f      	ldr	r3, [pc, #572]	; (8003934 <UART_SetConfig+0x2cc>)
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d005      	beq.n	8003708 <UART_SetConfig+0xa0>
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	4b8d      	ldr	r3, [pc, #564]	; (8003938 <UART_SetConfig+0x2d0>)
 8003704:	429a      	cmp	r2, r3
 8003706:	d104      	bne.n	8003712 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003708:	f7fe fcd6 	bl	80020b8 <HAL_RCC_GetPCLK2Freq>
 800370c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003710:	e003      	b.n	800371a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003712:	f7fe fcbd 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 8003716:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800371a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003724:	f040 810c 	bne.w	8003940 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800372c:	2200      	movs	r2, #0
 800372e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003732:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003736:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800373a:	4622      	mov	r2, r4
 800373c:	462b      	mov	r3, r5
 800373e:	1891      	adds	r1, r2, r2
 8003740:	65b9      	str	r1, [r7, #88]	; 0x58
 8003742:	415b      	adcs	r3, r3
 8003744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003746:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800374a:	4621      	mov	r1, r4
 800374c:	eb12 0801 	adds.w	r8, r2, r1
 8003750:	4629      	mov	r1, r5
 8003752:	eb43 0901 	adc.w	r9, r3, r1
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003762:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003766:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800376a:	4690      	mov	r8, r2
 800376c:	4699      	mov	r9, r3
 800376e:	4623      	mov	r3, r4
 8003770:	eb18 0303 	adds.w	r3, r8, r3
 8003774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003778:	462b      	mov	r3, r5
 800377a:	eb49 0303 	adc.w	r3, r9, r3
 800377e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800378e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003792:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003796:	460b      	mov	r3, r1
 8003798:	18db      	adds	r3, r3, r3
 800379a:	653b      	str	r3, [r7, #80]	; 0x50
 800379c:	4613      	mov	r3, r2
 800379e:	eb42 0303 	adc.w	r3, r2, r3
 80037a2:	657b      	str	r3, [r7, #84]	; 0x54
 80037a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037ac:	f7fc fd1c 	bl	80001e8 <__aeabi_uldivmod>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4b61      	ldr	r3, [pc, #388]	; (800393c <UART_SetConfig+0x2d4>)
 80037b6:	fba3 2302 	umull	r2, r3, r3, r2
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	011c      	lsls	r4, r3, #4
 80037be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037d0:	4642      	mov	r2, r8
 80037d2:	464b      	mov	r3, r9
 80037d4:	1891      	adds	r1, r2, r2
 80037d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80037d8:	415b      	adcs	r3, r3
 80037da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037e0:	4641      	mov	r1, r8
 80037e2:	eb12 0a01 	adds.w	sl, r2, r1
 80037e6:	4649      	mov	r1, r9
 80037e8:	eb43 0b01 	adc.w	fp, r3, r1
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003800:	4692      	mov	sl, r2
 8003802:	469b      	mov	fp, r3
 8003804:	4643      	mov	r3, r8
 8003806:	eb1a 0303 	adds.w	r3, sl, r3
 800380a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800380e:	464b      	mov	r3, r9
 8003810:	eb4b 0303 	adc.w	r3, fp, r3
 8003814:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003824:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003828:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800382c:	460b      	mov	r3, r1
 800382e:	18db      	adds	r3, r3, r3
 8003830:	643b      	str	r3, [r7, #64]	; 0x40
 8003832:	4613      	mov	r3, r2
 8003834:	eb42 0303 	adc.w	r3, r2, r3
 8003838:	647b      	str	r3, [r7, #68]	; 0x44
 800383a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800383e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003842:	f7fc fcd1 	bl	80001e8 <__aeabi_uldivmod>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4611      	mov	r1, r2
 800384c:	4b3b      	ldr	r3, [pc, #236]	; (800393c <UART_SetConfig+0x2d4>)
 800384e:	fba3 2301 	umull	r2, r3, r3, r1
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	2264      	movs	r2, #100	; 0x64
 8003856:	fb02 f303 	mul.w	r3, r2, r3
 800385a:	1acb      	subs	r3, r1, r3
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003862:	4b36      	ldr	r3, [pc, #216]	; (800393c <UART_SetConfig+0x2d4>)
 8003864:	fba3 2302 	umull	r2, r3, r3, r2
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003870:	441c      	add	r4, r3
 8003872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003876:	2200      	movs	r2, #0
 8003878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800387c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003880:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003884:	4642      	mov	r2, r8
 8003886:	464b      	mov	r3, r9
 8003888:	1891      	adds	r1, r2, r2
 800388a:	63b9      	str	r1, [r7, #56]	; 0x38
 800388c:	415b      	adcs	r3, r3
 800388e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003890:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003894:	4641      	mov	r1, r8
 8003896:	1851      	adds	r1, r2, r1
 8003898:	6339      	str	r1, [r7, #48]	; 0x30
 800389a:	4649      	mov	r1, r9
 800389c:	414b      	adcs	r3, r1
 800389e:	637b      	str	r3, [r7, #52]	; 0x34
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038ac:	4659      	mov	r1, fp
 80038ae:	00cb      	lsls	r3, r1, #3
 80038b0:	4651      	mov	r1, sl
 80038b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038b6:	4651      	mov	r1, sl
 80038b8:	00ca      	lsls	r2, r1, #3
 80038ba:	4610      	mov	r0, r2
 80038bc:	4619      	mov	r1, r3
 80038be:	4603      	mov	r3, r0
 80038c0:	4642      	mov	r2, r8
 80038c2:	189b      	adds	r3, r3, r2
 80038c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038c8:	464b      	mov	r3, r9
 80038ca:	460a      	mov	r2, r1
 80038cc:	eb42 0303 	adc.w	r3, r2, r3
 80038d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038e8:	460b      	mov	r3, r1
 80038ea:	18db      	adds	r3, r3, r3
 80038ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ee:	4613      	mov	r3, r2
 80038f0:	eb42 0303 	adc.w	r3, r2, r3
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038fe:	f7fc fc73 	bl	80001e8 <__aeabi_uldivmod>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4b0d      	ldr	r3, [pc, #52]	; (800393c <UART_SetConfig+0x2d4>)
 8003908:	fba3 1302 	umull	r1, r3, r3, r2
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	2164      	movs	r1, #100	; 0x64
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	3332      	adds	r3, #50	; 0x32
 800391a:	4a08      	ldr	r2, [pc, #32]	; (800393c <UART_SetConfig+0x2d4>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	095b      	lsrs	r3, r3, #5
 8003922:	f003 0207 	and.w	r2, r3, #7
 8003926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4422      	add	r2, r4
 800392e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003930:	e105      	b.n	8003b3e <UART_SetConfig+0x4d6>
 8003932:	bf00      	nop
 8003934:	40011000 	.word	0x40011000
 8003938:	40011400 	.word	0x40011400
 800393c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003944:	2200      	movs	r2, #0
 8003946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800394a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800394e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003952:	4642      	mov	r2, r8
 8003954:	464b      	mov	r3, r9
 8003956:	1891      	adds	r1, r2, r2
 8003958:	6239      	str	r1, [r7, #32]
 800395a:	415b      	adcs	r3, r3
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
 800395e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003962:	4641      	mov	r1, r8
 8003964:	1854      	adds	r4, r2, r1
 8003966:	4649      	mov	r1, r9
 8003968:	eb43 0501 	adc.w	r5, r3, r1
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	00eb      	lsls	r3, r5, #3
 8003976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800397a:	00e2      	lsls	r2, r4, #3
 800397c:	4614      	mov	r4, r2
 800397e:	461d      	mov	r5, r3
 8003980:	4643      	mov	r3, r8
 8003982:	18e3      	adds	r3, r4, r3
 8003984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003988:	464b      	mov	r3, r9
 800398a:	eb45 0303 	adc.w	r3, r5, r3
 800398e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800399e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039ae:	4629      	mov	r1, r5
 80039b0:	008b      	lsls	r3, r1, #2
 80039b2:	4621      	mov	r1, r4
 80039b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039b8:	4621      	mov	r1, r4
 80039ba:	008a      	lsls	r2, r1, #2
 80039bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039c0:	f7fc fc12 	bl	80001e8 <__aeabi_uldivmod>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4b60      	ldr	r3, [pc, #384]	; (8003b4c <UART_SetConfig+0x4e4>)
 80039ca:	fba3 2302 	umull	r2, r3, r3, r2
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	011c      	lsls	r4, r3, #4
 80039d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039d6:	2200      	movs	r2, #0
 80039d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039e4:	4642      	mov	r2, r8
 80039e6:	464b      	mov	r3, r9
 80039e8:	1891      	adds	r1, r2, r2
 80039ea:	61b9      	str	r1, [r7, #24]
 80039ec:	415b      	adcs	r3, r3
 80039ee:	61fb      	str	r3, [r7, #28]
 80039f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039f4:	4641      	mov	r1, r8
 80039f6:	1851      	adds	r1, r2, r1
 80039f8:	6139      	str	r1, [r7, #16]
 80039fa:	4649      	mov	r1, r9
 80039fc:	414b      	adcs	r3, r1
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a0c:	4659      	mov	r1, fp
 8003a0e:	00cb      	lsls	r3, r1, #3
 8003a10:	4651      	mov	r1, sl
 8003a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a16:	4651      	mov	r1, sl
 8003a18:	00ca      	lsls	r2, r1, #3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4603      	mov	r3, r0
 8003a20:	4642      	mov	r2, r8
 8003a22:	189b      	adds	r3, r3, r2
 8003a24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a28:	464b      	mov	r3, r9
 8003a2a:	460a      	mov	r2, r1
 8003a2c:	eb42 0303 	adc.w	r3, r2, r3
 8003a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a4c:	4649      	mov	r1, r9
 8003a4e:	008b      	lsls	r3, r1, #2
 8003a50:	4641      	mov	r1, r8
 8003a52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a56:	4641      	mov	r1, r8
 8003a58:	008a      	lsls	r2, r1, #2
 8003a5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a5e:	f7fc fbc3 	bl	80001e8 <__aeabi_uldivmod>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4b39      	ldr	r3, [pc, #228]	; (8003b4c <UART_SetConfig+0x4e4>)
 8003a68:	fba3 1302 	umull	r1, r3, r3, r2
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	2164      	movs	r1, #100	; 0x64
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	3332      	adds	r3, #50	; 0x32
 8003a7a:	4a34      	ldr	r2, [pc, #208]	; (8003b4c <UART_SetConfig+0x4e4>)
 8003a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a80:	095b      	lsrs	r3, r3, #5
 8003a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a86:	441c      	add	r4, r3
 8003a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	673b      	str	r3, [r7, #112]	; 0x70
 8003a90:	677a      	str	r2, [r7, #116]	; 0x74
 8003a92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a96:	4642      	mov	r2, r8
 8003a98:	464b      	mov	r3, r9
 8003a9a:	1891      	adds	r1, r2, r2
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	415b      	adcs	r3, r3
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aa6:	4641      	mov	r1, r8
 8003aa8:	1851      	adds	r1, r2, r1
 8003aaa:	6039      	str	r1, [r7, #0]
 8003aac:	4649      	mov	r1, r9
 8003aae:	414b      	adcs	r3, r1
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003abe:	4659      	mov	r1, fp
 8003ac0:	00cb      	lsls	r3, r1, #3
 8003ac2:	4651      	mov	r1, sl
 8003ac4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ac8:	4651      	mov	r1, sl
 8003aca:	00ca      	lsls	r2, r1, #3
 8003acc:	4610      	mov	r0, r2
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	4642      	mov	r2, r8
 8003ad4:	189b      	adds	r3, r3, r2
 8003ad6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ad8:	464b      	mov	r3, r9
 8003ada:	460a      	mov	r2, r1
 8003adc:	eb42 0303 	adc.w	r3, r2, r3
 8003ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	663b      	str	r3, [r7, #96]	; 0x60
 8003aec:	667a      	str	r2, [r7, #100]	; 0x64
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003afa:	4649      	mov	r1, r9
 8003afc:	008b      	lsls	r3, r1, #2
 8003afe:	4641      	mov	r1, r8
 8003b00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b04:	4641      	mov	r1, r8
 8003b06:	008a      	lsls	r2, r1, #2
 8003b08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b0c:	f7fc fb6c 	bl	80001e8 <__aeabi_uldivmod>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <UART_SetConfig+0x4e4>)
 8003b16:	fba3 1302 	umull	r1, r3, r3, r2
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	2164      	movs	r1, #100	; 0x64
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	3332      	adds	r3, #50	; 0x32
 8003b28:	4a08      	ldr	r2, [pc, #32]	; (8003b4c <UART_SetConfig+0x4e4>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	f003 020f 	and.w	r2, r3, #15
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4422      	add	r2, r4
 8003b3c:	609a      	str	r2, [r3, #8]
}
 8003b3e:	bf00      	nop
 8003b40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b44:	46bd      	mov	sp, r7
 8003b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b4a:	bf00      	nop
 8003b4c:	51eb851f 	.word	0x51eb851f

08003b50 <__libc_init_array>:
 8003b50:	b570      	push	{r4, r5, r6, lr}
 8003b52:	4d0d      	ldr	r5, [pc, #52]	; (8003b88 <__libc_init_array+0x38>)
 8003b54:	4c0d      	ldr	r4, [pc, #52]	; (8003b8c <__libc_init_array+0x3c>)
 8003b56:	1b64      	subs	r4, r4, r5
 8003b58:	10a4      	asrs	r4, r4, #2
 8003b5a:	2600      	movs	r6, #0
 8003b5c:	42a6      	cmp	r6, r4
 8003b5e:	d109      	bne.n	8003b74 <__libc_init_array+0x24>
 8003b60:	4d0b      	ldr	r5, [pc, #44]	; (8003b90 <__libc_init_array+0x40>)
 8003b62:	4c0c      	ldr	r4, [pc, #48]	; (8003b94 <__libc_init_array+0x44>)
 8003b64:	f000 f828 	bl	8003bb8 <_init>
 8003b68:	1b64      	subs	r4, r4, r5
 8003b6a:	10a4      	asrs	r4, r4, #2
 8003b6c:	2600      	movs	r6, #0
 8003b6e:	42a6      	cmp	r6, r4
 8003b70:	d105      	bne.n	8003b7e <__libc_init_array+0x2e>
 8003b72:	bd70      	pop	{r4, r5, r6, pc}
 8003b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b78:	4798      	blx	r3
 8003b7a:	3601      	adds	r6, #1
 8003b7c:	e7ee      	b.n	8003b5c <__libc_init_array+0xc>
 8003b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b82:	4798      	blx	r3
 8003b84:	3601      	adds	r6, #1
 8003b86:	e7f2      	b.n	8003b6e <__libc_init_array+0x1e>
 8003b88:	08003c0c 	.word	0x08003c0c
 8003b8c:	08003c0c 	.word	0x08003c0c
 8003b90:	08003c0c 	.word	0x08003c0c
 8003b94:	08003c10 	.word	0x08003c10

08003b98 <memset>:
 8003b98:	4402      	add	r2, r0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d100      	bne.n	8003ba2 <memset+0xa>
 8003ba0:	4770      	bx	lr
 8003ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba6:	e7f9      	b.n	8003b9c <memset+0x4>

08003ba8 <strcpy>:
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bae:	f803 2b01 	strb.w	r2, [r3], #1
 8003bb2:	2a00      	cmp	r2, #0
 8003bb4:	d1f9      	bne.n	8003baa <strcpy+0x2>
 8003bb6:	4770      	bx	lr

08003bb8 <_init>:
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	bf00      	nop
 8003bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bbe:	bc08      	pop	{r3}
 8003bc0:	469e      	mov	lr, r3
 8003bc2:	4770      	bx	lr

08003bc4 <_fini>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	bf00      	nop
 8003bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bca:	bc08      	pop	{r3}
 8003bcc:	469e      	mov	lr, r3
 8003bce:	4770      	bx	lr
