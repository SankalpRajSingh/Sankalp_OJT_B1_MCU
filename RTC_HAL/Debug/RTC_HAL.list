
RTC_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800325c  0800325c  0001325c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032d8  080032d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080032d8  080032d8  000132d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032e0  080032e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032e0  080032e0  000132e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032e4  080032e4  000132e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080032e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000070  08003358  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08003358  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a23  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000174a  00000000  00000000  00028ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  0002a210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a0  00000000  00000000  0002aa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164a8  00000000  00000000  0002b200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa27  00000000  00000000  000416a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b9a0  00000000  00000000  0004c0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7a6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000259c  00000000  00000000  000d7ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003244 	.word	0x08003244

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003244 	.word	0x08003244

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LCD_string>:
//			LCD_command(1);
//			delay(500);
//		}
//}
void LCD_string(char str[])
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	for(int i=0;str[i]!='\0';i++)
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	e009      	b.n	80005a6 <LCD_string+0x22>
	{
		LCD_data(str[i]);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	4413      	add	r3, r2
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f8c8 	bl	8000730 <LCD_data>
	for(int i=0;str[i]!='\0';i++)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	3301      	adds	r3, #1
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1ef      	bne.n	8000592 <LCD_string+0xe>
	}

}
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <LCD_init>:
/* initialize GPIOA/C then initialize LCD controller */
void LCD_init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	PORTS_init();
 80005c0:	f000 f82e 	bl	8000620 <PORTS_init>
	delay(20); /* LCD controller reset sequence */
 80005c4:	2014      	movs	r0, #20
 80005c6:	f000 f8ce 	bl	8000766 <delay>
	LCD_nibble_write(0x30, 0);
 80005ca:	2100      	movs	r1, #0
 80005cc:	2030      	movs	r0, #48	; 0x30
 80005ce:	f000 f85d 	bl	800068c <LCD_nibble_write>
	delay(5);
 80005d2:	2005      	movs	r0, #5
 80005d4:	f000 f8c7 	bl	8000766 <delay>
	LCD_nibble_write(0x30, 0);
 80005d8:	2100      	movs	r1, #0
 80005da:	2030      	movs	r0, #48	; 0x30
 80005dc:	f000 f856 	bl	800068c <LCD_nibble_write>
	delay(1);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 f8c0 	bl	8000766 <delay>
	LCD_nibble_write(0x30, 0);
 80005e6:	2100      	movs	r1, #0
 80005e8:	2030      	movs	r0, #48	; 0x30
 80005ea:	f000 f84f 	bl	800068c <LCD_nibble_write>
	delay(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f000 f8b9 	bl	8000766 <delay>
	LCD_nibble_write(0x20, 0); /* use 4-bit data mode */
 80005f4:	2100      	movs	r1, #0
 80005f6:	2020      	movs	r0, #32
 80005f8:	f000 f848 	bl	800068c <LCD_nibble_write>
	delay(1);
 80005fc:	2001      	movs	r0, #1
 80005fe:	f000 f8b2 	bl	8000766 <delay>
	LCD_command(0x28); /* set 4-bit data, 2-line, 5x7 font */
 8000602:	2028      	movs	r0, #40	; 0x28
 8000604:	f000 f872 	bl	80006ec <LCD_command>
	LCD_command(0x06); /* move cursor right */
 8000608:	2006      	movs	r0, #6
 800060a:	f000 f86f 	bl	80006ec <LCD_command>
	LCD_command(0x01); /* clear screen, move cursor to home */
 800060e:	2001      	movs	r0, #1
 8000610:	f000 f86c 	bl	80006ec <LCD_command>
	LCD_command(0x0C); /* turn on display, cursor blinking */
 8000614:	200c      	movs	r0, #12
 8000616:	f000 f869 	bl	80006ec <LCD_command>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <PORTS_init>:

void PORTS_init(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
		RCC->AHB1ENR |= 0x1;                     // Enable AHB1 BUS which is connected to PA5 via GPIO port A
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <PORTS_init+0x60>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	4a15      	ldr	r2, [pc, #84]	; (8000680 <PORTS_init+0x60>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= 0x4;					// Enanle AHB1 bus conneted to GPIO port C
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <PORTS_init+0x60>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000634:	4a12      	ldr	r2, [pc, #72]	; (8000680 <PORTS_init+0x60>)
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	6313      	str	r3, [r2, #48]	; 0x30
	//	RCC->AHB1ENR |=0x2;						//Enanle AHB1 bus conneted to GPIO port B
		GPIOA->MODER &=~0xFC00;                 //clear all pin PA5 PA6 PA7
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <PORTS_init+0x64>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a10      	ldr	r2, [pc, #64]	; (8000684 <PORTS_init+0x64>)
 8000642:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8000646:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |=0x5400; 				//set all pin 5,6,7 as o/p mode
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <PORTS_init+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <PORTS_init+0x64>)
 800064e:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 8000652:	6013      	str	r3, [r2, #0]
		GPIOA->BSRR = 0xC00000;	//(3<<22)			//turn off EN and RW pin
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <PORTS_init+0x64>)
 8000656:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800065a:	619a      	str	r2, [r3, #24]
		GPIOC->MODER &=~0xFF00;				// CLEAR all pin 4-7 of port C
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <PORTS_init+0x68>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a09      	ldr	r2, [pc, #36]	; (8000688 <PORTS_init+0x68>)
 8000662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000666:	6013      	str	r3, [r2, #0]
		GPIOC->MODER |= 0x5500;				// set all pin 4-7 as o/p mode
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <PORTS_init+0x68>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a06      	ldr	r2, [pc, #24]	; (8000688 <PORTS_init+0x68>)
 800066e:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000672:	6013      	str	r3, [r2, #0]


}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40020000 	.word	0x40020000
 8000688:	40020800 	.word	0x40020800

0800068c <LCD_nibble_write>:

void LCD_nibble_write(char data, unsigned char control)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	460a      	mov	r2, r1
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	4613      	mov	r3, r2
 800069a:	71bb      	strb	r3, [r7, #6]
	/*populate data bits */
	GPIOC->BSRR = 0xF00000; 					/* clear data bits */
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <LCD_nibble_write+0x58>)
 800069e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80006a2:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = data & 0xF0; 					/* set data bits 4-7 */
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <LCD_nibble_write+0x58>)
 80006a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006ac:	6193      	str	r3, [r2, #24]
	/* set R/S bit */
	if (control & RS)
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	f003 0320 	and.w	r3, r3, #32
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d003      	beq.n	80006c0 <LCD_nibble_write+0x34>
		GPIOA->BSRR = RS;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <LCD_nibble_write+0x5c>)
 80006ba:	2220      	movs	r2, #32
 80006bc:	619a      	str	r2, [r3, #24]
 80006be:	e003      	b.n	80006c8 <LCD_nibble_write+0x3c>
	else
		GPIOA->BSRR = RS << 16;	//(1<<21)  //
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <LCD_nibble_write+0x5c>)
 80006c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006c6:	619a      	str	r2, [r3, #24]
	/* pulse E */
	GPIOA->BSRR = EN;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <LCD_nibble_write+0x5c>)
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	619a      	str	r2, [r3, #24]
	__NOP();
 80006ce:	bf00      	nop
	GPIOA->BSRR = EN << 16;
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <LCD_nibble_write+0x5c>)
 80006d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006d6:	619a      	str	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	40020800 	.word	0x40020800
 80006e8:	40020000 	.word	0x40020000

080006ec <LCD_command>:
void LCD_command(unsigned char command)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write(command & 0xF0, 0); 			/* upper nibble first */
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	f023 030f 	bic.w	r3, r3, #15
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ffc3 	bl	800068c <LCD_nibble_write>
	LCD_nibble_write(command << 4, 0); 				/* then lower nibble */
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffbc 	bl	800068c <LCD_nibble_write>
	if (command < 4)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b03      	cmp	r3, #3
 8000718:	d803      	bhi.n	8000722 <LCD_command+0x36>
		delay(2); 									/* command 1 and 2 needs up to 1.64ms */
 800071a:	2002      	movs	r0, #2
 800071c:	f000 f823 	bl	8000766 <delay>
	else
		delay(1); 									/* all others 40 us */

}
 8000720:	e002      	b.n	8000728 <LCD_command+0x3c>
		delay(1); 									/* all others 40 us */
 8000722:	2001      	movs	r0, #1
 8000724:	f000 f81f 	bl	8000766 <delay>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <LCD_data>:
void LCD_data(char data)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write(data & 0xF0, RS); 				/* upper nibble first */
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	f023 030f 	bic.w	r3, r3, #15
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2120      	movs	r1, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ffa1 	bl	800068c <LCD_nibble_write>
	LCD_nibble_write(data << 4, RS); 				/* then lower nibble */
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2120      	movs	r1, #32
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff9a 	bl	800068c <LCD_nibble_write>
	delay(100);
 8000758:	2064      	movs	r0, #100	; 0x64
 800075a:	f000 f804 	bl	8000766 <delay>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <delay>:
void delay(int seconds)
{
 8000766:	b480      	push	{r7}
 8000768:	b085      	sub	sp, #20
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]

	for(;seconds>0;seconds--)
 800076e:	e00d      	b.n	800078c <delay+0x26>
	{
		for(int count1=0;count1<3000;count1++)
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	e002      	b.n	800077c <delay+0x16>
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	3301      	adds	r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000782:	4293      	cmp	r3, r2
 8000784:	ddf7      	ble.n	8000776 <delay+0x10>
	for(;seconds>0;seconds--)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3b01      	subs	r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	dcee      	bgt.n	8000770 <delay+0xa>
		{

		}
	}
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f000 faf3 	bl	8000d90 <HAL_Init>
  LCD_init();
 80007aa:	f7ff ff07 	bl	80005bc <LCD_init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ae:	f000 f87d 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f000 f995 	bl	8000ae0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007b6:	f000 f8d9 	bl	800096c <MX_I2C1_Init>
  MX_RTC_Init();
 80007ba:	f000 f905 	bl	80009c8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
//  SET TIME
 sTime.Hours = 15;
 80007be:	4b32      	ldr	r3, [pc, #200]	; (8000888 <main+0xe8>)
 80007c0:	220f      	movs	r2, #15
 80007c2:	701a      	strb	r2, [r3, #0]
 sTime.Minutes = 59;
 80007c4:	4b30      	ldr	r3, [pc, #192]	; (8000888 <main+0xe8>)
 80007c6:	223b      	movs	r2, #59	; 0x3b
 80007c8:	705a      	strb	r2, [r3, #1]
 sTime.Seconds = 45;
 80007ca:	4b2f      	ldr	r3, [pc, #188]	; (8000888 <main+0xe8>)
 80007cc:	222d      	movs	r2, #45	; 0x2d
 80007ce:	709a      	strb	r2, [r3, #2]
 HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80007d0:	2200      	movs	r2, #0
 80007d2:	492d      	ldr	r1, [pc, #180]	; (8000888 <main+0xe8>)
 80007d4:	482d      	ldr	r0, [pc, #180]	; (800088c <main+0xec>)
 80007d6:	f001 fcc9 	bl	800216c <HAL_RTC_SetTime>

//  SET DATE
 sDate.Date = 26;
 80007da:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <main+0xf0>)
 80007dc:	221a      	movs	r2, #26
 80007de:	709a      	strb	r2, [r3, #2]
 sDate.Month = RTC_MONTH_DECEMBER;
 80007e0:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <main+0xf0>)
 80007e2:	2212      	movs	r2, #18
 80007e4:	705a      	strb	r2, [r3, #1]
 sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007e6:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <main+0xf0>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	701a      	strb	r2, [r3, #0]
 sDate.Year = 22;
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <main+0xf0>)
 80007ee:	2216      	movs	r2, #22
 80007f0:	70da      	strb	r2, [r3, #3]
 HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80007f2:	2200      	movs	r2, #0
 80007f4:	4926      	ldr	r1, [pc, #152]	; (8000890 <main+0xf0>)
 80007f6:	4825      	ldr	r0, [pc, #148]	; (800088c <main+0xec>)
 80007f8:	f001 fdb0 	bl	800235c <HAL_RTC_SetDate>
  /* USER CODE END 2 */
 LCD_string("TIME:");
 80007fc:	4825      	ldr	r0, [pc, #148]	; (8000894 <main+0xf4>)
 80007fe:	f7ff fec1 	bl	8000584 <LCD_string>
 LCD_command(0xC0);
 8000802:	20c0      	movs	r0, #192	; 0xc0
 8000804:	f7ff ff72 	bl	80006ec <LCD_command>
 LCD_string("DATE:");
 8000808:	4823      	ldr	r0, [pc, #140]	; (8000898 <main+0xf8>)
 800080a:	f7ff febb 	bl	8000584 <LCD_string>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800080e:	2200      	movs	r2, #0
 8000810:	491d      	ldr	r1, [pc, #116]	; (8000888 <main+0xe8>)
 8000812:	481e      	ldr	r0, [pc, #120]	; (800088c <main+0xec>)
 8000814:	f001 fd44 	bl	80022a0 <HAL_RTC_GetTime>
 sprintf (Time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <main+0xe8>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <main+0xe8>)
 8000820:	785b      	ldrb	r3, [r3, #1]
 8000822:	4619      	mov	r1, r3
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <main+0xe8>)
 8000826:	789b      	ldrb	r3, [r3, #2]
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	460b      	mov	r3, r1
 800082c:	491b      	ldr	r1, [pc, #108]	; (800089c <main+0xfc>)
 800082e:	481c      	ldr	r0, [pc, #112]	; (80008a0 <main+0x100>)
 8000830:	f002 f89a 	bl	8002968 <siprintf>

 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000834:	2200      	movs	r2, #0
 8000836:	4916      	ldr	r1, [pc, #88]	; (8000890 <main+0xf0>)
 8000838:	4814      	ldr	r0, [pc, #80]	; (800088c <main+0xec>)
 800083a:	f001 fe13 	bl	8002464 <HAL_RTC_GetDate>
 sprintf (Date, "%02d-%02d-%02d", sDate.Date, sDate.Month, sDate.Year);
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <main+0xf0>)
 8000840:	789b      	ldrb	r3, [r3, #2]
 8000842:	461a      	mov	r2, r3
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <main+0xf0>)
 8000846:	785b      	ldrb	r3, [r3, #1]
 8000848:	4619      	mov	r1, r3
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <main+0xf0>)
 800084c:	78db      	ldrb	r3, [r3, #3]
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	460b      	mov	r3, r1
 8000852:	4914      	ldr	r1, [pc, #80]	; (80008a4 <main+0x104>)
 8000854:	4814      	ldr	r0, [pc, #80]	; (80008a8 <main+0x108>)
 8000856:	f002 f887 	bl	8002968 <siprintf>

 HAL_Delay(200);
 800085a:	20c8      	movs	r0, #200	; 0xc8
 800085c:	f000 fb0a 	bl	8000e74 <HAL_Delay>

	delay(1);
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff ff80 	bl	8000766 <delay>
	LCD_command(0xC6);
 8000866:	20c6      	movs	r0, #198	; 0xc6
 8000868:	f7ff ff40 	bl	80006ec <LCD_command>
	LCD_string(Time);
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <main+0x100>)
 800086e:	f7ff fe89 	bl	8000584 <LCD_string>

	delay(1);
 8000872:	2001      	movs	r0, #1
 8000874:	f7ff ff77 	bl	8000766 <delay>
	LCD_command(0x86);
 8000878:	2086      	movs	r0, #134	; 0x86
 800087a:	f7ff ff37 	bl	80006ec <LCD_command>
	LCD_string(Date);
 800087e:	480a      	ldr	r0, [pc, #40]	; (80008a8 <main+0x108>)
 8000880:	f7ff fe80 	bl	8000584 <LCD_string>
 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000884:	e7c3      	b.n	800080e <main+0x6e>
 8000886:	bf00      	nop
 8000888:	20000100 	.word	0x20000100
 800088c:	200000e0 	.word	0x200000e0
 8000890:	20000114 	.word	0x20000114
 8000894:	0800325c 	.word	0x0800325c
 8000898:	08003264 	.word	0x08003264
 800089c:	0800326c 	.word	0x0800326c
 80008a0:	20000118 	.word	0x20000118
 80008a4:	0800327c 	.word	0x0800327c
 80008a8:	20000128 	.word	0x20000128

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b094      	sub	sp, #80	; 0x50
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0320 	add.w	r3, r7, #32
 80008b6:	2230      	movs	r2, #48	; 0x30
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f002 f84c 	bl	8002958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <SystemClock_Config+0xb8>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	4a22      	ldr	r2, [pc, #136]	; (8000964 <SystemClock_Config+0xb8>)
 80008da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
 80008e0:	4b20      	ldr	r3, [pc, #128]	; (8000964 <SystemClock_Config+0xb8>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ec:	2300      	movs	r3, #0
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <SystemClock_Config+0xbc>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <SystemClock_Config+0xbc>)
 80008f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <SystemClock_Config+0xbc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000908:	230a      	movs	r3, #10
 800090a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090c:	2301      	movs	r3, #1
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000910:	2310      	movs	r3, #16
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000914:	2301      	movs	r3, #1
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000918:	2300      	movs	r3, #0
 800091a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 0320 	add.w	r3, r7, #32
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fe79 	bl	8001618 <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800092c:	f000 f8f2 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f001 f8dc 	bl	8001b08 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000956:	f000 f8dd 	bl	8000b14 <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3750      	adds	r7, #80	; 0x50
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_I2C1_Init+0x50>)
 8000972:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <MX_I2C1_Init+0x54>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_I2C1_Init+0x50>)
 8000978:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_I2C1_Init+0x58>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_I2C1_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_I2C1_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_I2C1_Init+0x50>)
 800098a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800098e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MX_I2C1_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_I2C1_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_I2C1_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_I2C1_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_I2C1_Init+0x50>)
 80009aa:	f000 fcf1 	bl	8001390 <HAL_I2C_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009b4:	f000 f8ae 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000008c 	.word	0x2000008c
 80009c0:	40005400 	.word	0x40005400
 80009c4:	000186a0 	.word	0x000186a0

080009c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b090      	sub	sp, #64	; 0x40
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2228      	movs	r2, #40	; 0x28
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 ffb5 	bl	8002958 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009ee:	4b3a      	ldr	r3, [pc, #232]	; (8000ad8 <MX_RTC_Init+0x110>)
 80009f0:	4a3a      	ldr	r2, [pc, #232]	; (8000adc <MX_RTC_Init+0x114>)
 80009f2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009f4:	4b38      	ldr	r3, [pc, #224]	; (8000ad8 <MX_RTC_Init+0x110>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009fa:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <MX_RTC_Init+0x110>)
 80009fc:	227f      	movs	r2, #127	; 0x7f
 80009fe:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a00:	4b35      	ldr	r3, [pc, #212]	; (8000ad8 <MX_RTC_Init+0x110>)
 8000a02:	22ff      	movs	r2, #255	; 0xff
 8000a04:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a06:	4b34      	ldr	r3, [pc, #208]	; (8000ad8 <MX_RTC_Init+0x110>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a0c:	4b32      	ldr	r3, [pc, #200]	; (8000ad8 <MX_RTC_Init+0x110>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a12:	4b31      	ldr	r3, [pc, #196]	; (8000ad8 <MX_RTC_Init+0x110>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a18:	482f      	ldr	r0, [pc, #188]	; (8000ad8 <MX_RTC_Init+0x110>)
 8000a1a:	f001 fb31 	bl	8002080 <HAL_RTC_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000a24:	f000 f876 	bl	8000b14 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 8000a28:	230f      	movs	r3, #15
 8000a2a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 50;
 8000a34:	2332      	movs	r3, #50	; 0x32
 8000a36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a46:	2200      	movs	r2, #0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4823      	ldr	r0, [pc, #140]	; (8000ad8 <MX_RTC_Init+0x110>)
 8000a4c:	f001 fb8e 	bl	800216c <HAL_RTC_SetTime>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000a56:	f000 f85d 	bl	8000b14 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_DECEMBER;
 8000a60:	2312      	movs	r3, #18
 8000a62:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 31;
 8000a66:	231f      	movs	r3, #31
 8000a68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 22;
 8000a6c:	2316      	movs	r3, #22
 8000a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a76:	2200      	movs	r2, #0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <MX_RTC_Init+0x110>)
 8000a7c:	f001 fc6e 	bl	800235c <HAL_RTC_SetDate>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000a86:	f000 f845 	bl	8000b14 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 10;
 8000a92:	230a      	movs	r3, #10
 8000a94:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000aba:	463b      	mov	r3, r7
 8000abc:	2200      	movs	r2, #0
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_RTC_Init+0x110>)
 8000ac2:	f001 fd1f 	bl	8002504 <HAL_RTC_SetAlarm_IT>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000acc:	f000 f822 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	3740      	adds	r7, #64	; 0x40
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000e0 	.word	0x200000e0
 8000adc:	40002800 	.word	0x40002800

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_GPIO_Init+0x30>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <MX_GPIO_Init+0x30>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_GPIO_Init+0x30>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <HAL_I2C_MspInit+0x84>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d12b      	bne.n	8000bea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_I2C_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <HAL_I2C_MspInit+0x88>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_I2C_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bae:	23c0      	movs	r3, #192	; 0xc0
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb2:	2312      	movs	r3, #18
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <HAL_I2C_MspInit+0x8c>)
 8000bca:	f000 fa5d 	bl	8001088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_I2C_MspInit+0x88>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <HAL_I2C_MspInit+0x88>)
 8000bd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_I2C_MspInit+0x88>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	; 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40005400 	.word	0x40005400
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020400 	.word	0x40020400

08000c00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a0c      	ldr	r2, [pc, #48]	; (8000c50 <HAL_RTC_MspInit+0x50>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d111      	bne.n	8000c48 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c24:	2302      	movs	r3, #2
 8000c26:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 f934 	bl	8001ea0 <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000c3e:	f7ff ff69 	bl	8000b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <HAL_RTC_MspInit+0x54>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c48:	bf00      	nop
 8000c4a:	3720      	adds	r7, #32
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40002800 	.word	0x40002800
 8000c54:	42470e3c 	.word	0x42470e3c

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f000 f8c6 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <_sbrk+0x5c>)
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <_sbrk+0x60>)
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <_sbrk+0x64>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <_sbrk+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d207      	bcs.n	8000cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cdc:	f001 fe12 	bl	8002904 <__errno>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e009      	b.n	8000d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <_sbrk+0x64>)
 8000cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20020000 	.word	0x20020000
 8000d0c:	00000400 	.word	0x00000400
 8000d10:	20000138 	.word	0x20000138
 8000d14:	20000150 	.word	0x20000150

08000d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d42:	490e      	ldr	r1, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d58:	4c0b      	ldr	r4, [pc, #44]	; (8000d88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d66:	f7ff ffd7 	bl	8000d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f001 fdd1 	bl	8002910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6e:	f7ff fd17 	bl	80007a0 <main>
  bx  lr    
 8000d72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d80:	080032e8 	.word	0x080032e8
  ldr r2, =_sbss
 8000d84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d88:	20000150 	.word	0x20000150

08000d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <HAL_Init+0x40>)
 8000d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_Init+0x40>)
 8000da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x40>)
 8000db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f931 	bl	8001020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	200f      	movs	r0, #15
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff feac 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023c00 	.word	0x40023c00

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f93b 	bl	800106e <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f911 	bl	8001036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	2000013c 	.word	0x2000013c

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	2000013c 	.word	0x2000013c

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff ffee 	bl	8000e5c <HAL_GetTick>
 8000e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e9a:	bf00      	nop
 8000e9c:	f7ff ffde 	bl	8000e5c <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fec:	d301      	bcc.n	8000ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00f      	b.n	8001012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <SysTick_Config+0x40>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f7ff ff8e 	bl	8000f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <SysTick_Config+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <SysTick_Config+0x40>)
 800100c:	2207      	movs	r2, #7
 800100e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	e000e010 	.word	0xe000e010

08001020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff47 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001048:	f7ff ff5c 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 800104c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff ff8e 	bl	8000f74 <NVIC_EncodePriority>
 8001058:	4602      	mov	r2, r0
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5d 	bl	8000f20 <__NVIC_SetPriority>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffb0 	bl	8000fdc <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	e159      	b.n	8001358 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a4:	2201      	movs	r2, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	429a      	cmp	r2, r3
 80010be:	f040 8148 	bne.w	8001352 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d005      	beq.n	80010da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d130      	bne.n	800113c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	f003 0201 	and.w	r2, r3, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b03      	cmp	r3, #3
 8001146:	d017      	beq.n	8001178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d123      	bne.n	80011cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	08da      	lsrs	r2, r3, #3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3208      	adds	r2, #8
 800118c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	220f      	movs	r2, #15
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	08da      	lsrs	r2, r3, #3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3208      	adds	r2, #8
 80011c6:	69b9      	ldr	r1, [r7, #24]
 80011c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0203 	and.w	r2, r3, #3
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 80a2 	beq.w	8001352 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b57      	ldr	r3, [pc, #348]	; (8001370 <HAL_GPIO_Init+0x2e8>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	4a56      	ldr	r2, [pc, #344]	; (8001370 <HAL_GPIO_Init+0x2e8>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121c:	6453      	str	r3, [r2, #68]	; 0x44
 800121e:	4b54      	ldr	r3, [pc, #336]	; (8001370 <HAL_GPIO_Init+0x2e8>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800122a:	4a52      	ldr	r2, [pc, #328]	; (8001374 <HAL_GPIO_Init+0x2ec>)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a49      	ldr	r2, [pc, #292]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d019      	beq.n	800128a <HAL_GPIO_Init+0x202>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a48      	ldr	r2, [pc, #288]	; (800137c <HAL_GPIO_Init+0x2f4>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d013      	beq.n	8001286 <HAL_GPIO_Init+0x1fe>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a47      	ldr	r2, [pc, #284]	; (8001380 <HAL_GPIO_Init+0x2f8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d00d      	beq.n	8001282 <HAL_GPIO_Init+0x1fa>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a46      	ldr	r2, [pc, #280]	; (8001384 <HAL_GPIO_Init+0x2fc>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d007      	beq.n	800127e <HAL_GPIO_Init+0x1f6>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a45      	ldr	r2, [pc, #276]	; (8001388 <HAL_GPIO_Init+0x300>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_GPIO_Init+0x1f2>
 8001276:	2304      	movs	r3, #4
 8001278:	e008      	b.n	800128c <HAL_GPIO_Init+0x204>
 800127a:	2307      	movs	r3, #7
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x204>
 800127e:	2303      	movs	r3, #3
 8001280:	e004      	b.n	800128c <HAL_GPIO_Init+0x204>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <HAL_GPIO_Init+0x204>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x204>
 800128a:	2300      	movs	r3, #0
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	f002 0203 	and.w	r2, r2, #3
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	4093      	lsls	r3, r2
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800129c:	4935      	ldr	r1, [pc, #212]	; (8001374 <HAL_GPIO_Init+0x2ec>)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012aa:	4b38      	ldr	r3, [pc, #224]	; (800138c <HAL_GPIO_Init+0x304>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ce:	4a2f      	ldr	r2, [pc, #188]	; (800138c <HAL_GPIO_Init+0x304>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d4:	4b2d      	ldr	r3, [pc, #180]	; (800138c <HAL_GPIO_Init+0x304>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f8:	4a24      	ldr	r2, [pc, #144]	; (800138c <HAL_GPIO_Init+0x304>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012fe:	4b23      	ldr	r3, [pc, #140]	; (800138c <HAL_GPIO_Init+0x304>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001322:	4a1a      	ldr	r2, [pc, #104]	; (800138c <HAL_GPIO_Init+0x304>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <HAL_GPIO_Init+0x304>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800134c:	4a0f      	ldr	r2, [pc, #60]	; (800138c <HAL_GPIO_Init+0x304>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3301      	adds	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	2b0f      	cmp	r3, #15
 800135c:	f67f aea2 	bls.w	80010a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40013800 	.word	0x40013800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020c00 	.word	0x40020c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40013c00 	.word	0x40013c00

08001390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e12b      	b.n	80015fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fbda 	bl	8000b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2224      	movs	r2, #36	; 0x24
 80013c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0201 	bic.w	r2, r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013f4:	f000 fd40 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 80013f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4a81      	ldr	r2, [pc, #516]	; (8001604 <HAL_I2C_Init+0x274>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d807      	bhi.n	8001414 <HAL_I2C_Init+0x84>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4a80      	ldr	r2, [pc, #512]	; (8001608 <HAL_I2C_Init+0x278>)
 8001408:	4293      	cmp	r3, r2
 800140a:	bf94      	ite	ls
 800140c:	2301      	movls	r3, #1
 800140e:	2300      	movhi	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	e006      	b.n	8001422 <HAL_I2C_Init+0x92>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a7d      	ldr	r2, [pc, #500]	; (800160c <HAL_I2C_Init+0x27c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	bf94      	ite	ls
 800141c:	2301      	movls	r3, #1
 800141e:	2300      	movhi	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0e7      	b.n	80015fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4a78      	ldr	r2, [pc, #480]	; (8001610 <HAL_I2C_Init+0x280>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	0c9b      	lsrs	r3, r3, #18
 8001434:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	430a      	orrs	r2, r1
 8001448:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a6a      	ldr	r2, [pc, #424]	; (8001604 <HAL_I2C_Init+0x274>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d802      	bhi.n	8001464 <HAL_I2C_Init+0xd4>
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3301      	adds	r3, #1
 8001462:	e009      	b.n	8001478 <HAL_I2C_Init+0xe8>
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	4a69      	ldr	r2, [pc, #420]	; (8001614 <HAL_I2C_Init+0x284>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	099b      	lsrs	r3, r3, #6
 8001476:	3301      	adds	r3, #1
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	430b      	orrs	r3, r1
 800147e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800148a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	495c      	ldr	r1, [pc, #368]	; (8001604 <HAL_I2C_Init+0x274>)
 8001494:	428b      	cmp	r3, r1
 8001496:	d819      	bhi.n	80014cc <HAL_I2C_Init+0x13c>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1e59      	subs	r1, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014a6:	1c59      	adds	r1, r3, #1
 80014a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014ac:	400b      	ands	r3, r1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00a      	beq.n	80014c8 <HAL_I2C_Init+0x138>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1e59      	subs	r1, r3, #1
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80014c0:	3301      	adds	r3, #1
 80014c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c6:	e051      	b.n	800156c <HAL_I2C_Init+0x1dc>
 80014c8:	2304      	movs	r3, #4
 80014ca:	e04f      	b.n	800156c <HAL_I2C_Init+0x1dc>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d111      	bne.n	80014f8 <HAL_I2C_Init+0x168>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1e58      	subs	r0, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6859      	ldr	r1, [r3, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	440b      	add	r3, r1
 80014e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	e012      	b.n	800151e <HAL_I2C_Init+0x18e>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1e58      	subs	r0, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6859      	ldr	r1, [r3, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	0099      	lsls	r1, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	fbb0 f3f3 	udiv	r3, r0, r3
 800150e:	3301      	adds	r3, #1
 8001510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001514:	2b00      	cmp	r3, #0
 8001516:	bf0c      	ite	eq
 8001518:	2301      	moveq	r3, #1
 800151a:	2300      	movne	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_Init+0x196>
 8001522:	2301      	movs	r3, #1
 8001524:	e022      	b.n	800156c <HAL_I2C_Init+0x1dc>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10e      	bne.n	800154c <HAL_I2C_Init+0x1bc>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1e58      	subs	r0, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6859      	ldr	r1, [r3, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	440b      	add	r3, r1
 800153c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001540:	3301      	adds	r3, #1
 8001542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800154a:	e00f      	b.n	800156c <HAL_I2C_Init+0x1dc>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	1e58      	subs	r0, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6859      	ldr	r1, [r3, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	0099      	lsls	r1, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001562:	3301      	adds	r3, #1
 8001564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	6809      	ldr	r1, [r1, #0]
 8001570:	4313      	orrs	r3, r2
 8001572:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69da      	ldr	r2, [r3, #28]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800159a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6911      	ldr	r1, [r2, #16]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68d2      	ldr	r2, [r2, #12]
 80015a6:	4311      	orrs	r1, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2220      	movs	r2, #32
 80015e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	000186a0 	.word	0x000186a0
 8001608:	001e847f 	.word	0x001e847f
 800160c:	003d08ff 	.word	0x003d08ff
 8001610:	431bde83 	.word	0x431bde83
 8001614:	10624dd3 	.word	0x10624dd3

08001618 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e267      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d075      	beq.n	8001722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001636:	4b88      	ldr	r3, [pc, #544]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b04      	cmp	r3, #4
 8001640:	d00c      	beq.n	800165c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001642:	4b85      	ldr	r3, [pc, #532]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800164a:	2b08      	cmp	r3, #8
 800164c:	d112      	bne.n	8001674 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164e:	4b82      	ldr	r3, [pc, #520]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800165a:	d10b      	bne.n	8001674 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	4b7e      	ldr	r3, [pc, #504]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d05b      	beq.n	8001720 <HAL_RCC_OscConfig+0x108>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d157      	bne.n	8001720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e242      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167c:	d106      	bne.n	800168c <HAL_RCC_OscConfig+0x74>
 800167e:	4b76      	ldr	r3, [pc, #472]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a75      	ldr	r2, [pc, #468]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 8001684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e01d      	b.n	80016c8 <HAL_RCC_OscConfig+0xb0>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001694:	d10c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x98>
 8001696:	4b70      	ldr	r3, [pc, #448]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a6f      	ldr	r2, [pc, #444]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 800169c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4b6d      	ldr	r3, [pc, #436]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a6c      	ldr	r2, [pc, #432]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 80016a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e00b      	b.n	80016c8 <HAL_RCC_OscConfig+0xb0>
 80016b0:	4b69      	ldr	r3, [pc, #420]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a68      	ldr	r2, [pc, #416]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 80016b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b66      	ldr	r3, [pc, #408]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a65      	ldr	r2, [pc, #404]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 80016c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d013      	beq.n	80016f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fbc4 	bl	8000e5c <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fbc0 	bl	8000e5c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e207      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	4b5b      	ldr	r3, [pc, #364]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0xc0>
 80016f6:	e014      	b.n	8001722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fbb0 	bl	8000e5c <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff fbac 	bl	8000e5c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b64      	cmp	r3, #100	; 0x64
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e1f3      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001712:	4b51      	ldr	r3, [pc, #324]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0xe8>
 800171e:	e000      	b.n	8001722 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d063      	beq.n	80017f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800172e:	4b4a      	ldr	r3, [pc, #296]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00b      	beq.n	8001752 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800173a:	4b47      	ldr	r3, [pc, #284]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001742:	2b08      	cmp	r3, #8
 8001744:	d11c      	bne.n	8001780 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001746:	4b44      	ldr	r3, [pc, #272]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d116      	bne.n	8001780 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	4b41      	ldr	r3, [pc, #260]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <HAL_RCC_OscConfig+0x152>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d001      	beq.n	800176a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e1c7      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176a:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4937      	ldr	r1, [pc, #220]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 800177a:	4313      	orrs	r3, r2
 800177c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177e:	e03a      	b.n	80017f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d020      	beq.n	80017ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001788:	4b34      	ldr	r3, [pc, #208]	; (800185c <HAL_RCC_OscConfig+0x244>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178e:	f7ff fb65 	bl	8000e5c <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001796:	f7ff fb61 	bl	8000e5c <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e1a8      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a8:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4925      	ldr	r1, [pc, #148]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	600b      	str	r3, [r1, #0]
 80017c8:	e015      	b.n	80017f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ca:	4b24      	ldr	r3, [pc, #144]	; (800185c <HAL_RCC_OscConfig+0x244>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fb44 	bl	8000e5c <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d8:	f7ff fb40 	bl	8000e5c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e187      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d036      	beq.n	8001870 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d016      	beq.n	8001838 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_RCC_OscConfig+0x248>)
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001810:	f7ff fb24 	bl	8000e5c <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001818:	f7ff fb20 	bl	8000e5c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e167      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_RCC_OscConfig+0x240>)
 800182c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x200>
 8001836:	e01b      	b.n	8001870 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_RCC_OscConfig+0x248>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183e:	f7ff fb0d 	bl	8000e5c <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001844:	e00e      	b.n	8001864 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff fb09 	bl	8000e5c <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d907      	bls.n	8001864 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e150      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
 8001858:	40023800 	.word	0x40023800
 800185c:	42470000 	.word	0x42470000
 8001860:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001864:	4b88      	ldr	r3, [pc, #544]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 8001866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1ea      	bne.n	8001846 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 8097 	beq.w	80019ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001882:	4b81      	ldr	r3, [pc, #516]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10f      	bne.n	80018ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b7d      	ldr	r3, [pc, #500]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a7c      	ldr	r2, [pc, #496]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b7a      	ldr	r3, [pc, #488]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018aa:	2301      	movs	r3, #1
 80018ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ae:	4b77      	ldr	r3, [pc, #476]	; (8001a8c <HAL_RCC_OscConfig+0x474>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d118      	bne.n	80018ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ba:	4b74      	ldr	r3, [pc, #464]	; (8001a8c <HAL_RCC_OscConfig+0x474>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a73      	ldr	r2, [pc, #460]	; (8001a8c <HAL_RCC_OscConfig+0x474>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c6:	f7ff fac9 	bl	8000e5c <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ce:	f7ff fac5 	bl	8000e5c <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e10c      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e0:	4b6a      	ldr	r3, [pc, #424]	; (8001a8c <HAL_RCC_OscConfig+0x474>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x2ea>
 80018f4:	4b64      	ldr	r3, [pc, #400]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	4a63      	ldr	r2, [pc, #396]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001900:	e01c      	b.n	800193c <HAL_RCC_OscConfig+0x324>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b05      	cmp	r3, #5
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x30c>
 800190a:	4b5f      	ldr	r3, [pc, #380]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190e:	4a5e      	ldr	r2, [pc, #376]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6713      	str	r3, [r2, #112]	; 0x70
 8001916:	4b5c      	ldr	r3, [pc, #368]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	4a5b      	ldr	r2, [pc, #364]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6713      	str	r3, [r2, #112]	; 0x70
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0x324>
 8001924:	4b58      	ldr	r3, [pc, #352]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 8001926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001928:	4a57      	ldr	r2, [pc, #348]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	6713      	str	r3, [r2, #112]	; 0x70
 8001930:	4b55      	ldr	r3, [pc, #340]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001934:	4a54      	ldr	r2, [pc, #336]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 8001936:	f023 0304 	bic.w	r3, r3, #4
 800193a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d015      	beq.n	8001970 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff fa8a 	bl	8000e5c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194a:	e00a      	b.n	8001962 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7ff fa86 	bl	8000e5c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e0cb      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001962:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0ee      	beq.n	800194c <HAL_RCC_OscConfig+0x334>
 800196e:	e014      	b.n	800199a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001970:	f7ff fa74 	bl	8000e5c <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001976:	e00a      	b.n	800198e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001978:	f7ff fa70 	bl	8000e5c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f241 3288 	movw	r2, #5000	; 0x1388
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e0b5      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198e:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1ee      	bne.n	8001978 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800199a:	7dfb      	ldrb	r3, [r7, #23]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d105      	bne.n	80019ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a0:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	4a38      	ldr	r2, [pc, #224]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 80019a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80a1 	beq.w	8001af8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019b6:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d05c      	beq.n	8001a7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d141      	bne.n	8001a4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ca:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_RCC_OscConfig+0x478>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fa44 	bl	8000e5c <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff fa40 	bl	8000e5c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e087      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ea:	4b27      	ldr	r3, [pc, #156]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69da      	ldr	r2, [r3, #28]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	019b      	lsls	r3, r3, #6
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	041b      	lsls	r3, r3, #16
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	061b      	lsls	r3, r3, #24
 8001a1a:	491b      	ldr	r1, [pc, #108]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_RCC_OscConfig+0x478>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7ff fa19 	bl	8000e5c <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a2e:	f7ff fa15 	bl	8000e5c <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e05c      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x416>
 8001a4c:	e054      	b.n	8001af8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HAL_RCC_OscConfig+0x478>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff fa02 	bl	8000e5c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff f9fe 	bl	8000e5c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e045      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_RCC_OscConfig+0x470>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x444>
 8001a7a:	e03d      	b.n	8001af8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e038      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40007000 	.word	0x40007000
 8001a90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <HAL_RCC_OscConfig+0x4ec>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d028      	beq.n	8001af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d121      	bne.n	8001af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d11a      	bne.n	8001af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d111      	bne.n	8001af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	085b      	lsrs	r3, r3, #1
 8001adc:	3b01      	subs	r3, #1
 8001ade:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d107      	bne.n	8001af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800

08001b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0cc      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b68      	ldr	r3, [pc, #416]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d90c      	bls.n	8001b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b65      	ldr	r3, [pc, #404]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0b8      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d020      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b5c:	4b59      	ldr	r3, [pc, #356]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4a58      	ldr	r2, [pc, #352]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b74:	4b53      	ldr	r3, [pc, #332]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	4a52      	ldr	r2, [pc, #328]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b80:	4b50      	ldr	r3, [pc, #320]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	494d      	ldr	r1, [pc, #308]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d044      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba6:	4b47      	ldr	r3, [pc, #284]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d119      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e07f      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d003      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc6:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d109      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e06f      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e067      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be6:	4b37      	ldr	r3, [pc, #220]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f023 0203 	bic.w	r2, r3, #3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4934      	ldr	r1, [pc, #208]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf8:	f7ff f930 	bl	8000e5c <HAL_GetTick>
 8001bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c00:	f7ff f92c 	bl	8000e5c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e04f      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c16:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 020c 	and.w	r2, r3, #12
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d1eb      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c28:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d20c      	bcs.n	8001c50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e032      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d008      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4916      	ldr	r1, [pc, #88]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	490e      	ldr	r1, [pc, #56]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c8e:	f000 f821 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8001c92:	4602      	mov	r2, r0
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	490a      	ldr	r1, [pc, #40]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	5ccb      	ldrb	r3, [r1, r3]
 8001ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff f890 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023c00 	.word	0x40023c00
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	0800328c 	.word	0x0800328c
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000004 	.word	0x20000004

08001cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cd8:	b090      	sub	sp, #64	; 0x40
 8001cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cec:	4b59      	ldr	r3, [pc, #356]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d00d      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0x40>
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	f200 80a1 	bhi.w	8001e40 <HAL_RCC_GetSysClockFreq+0x16c>
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x34>
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d003      	beq.n	8001d0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d06:	e09b      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d08:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d0a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001d0c:	e09b      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d0e:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d12:	e098      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d14:	4b4f      	ldr	r3, [pc, #316]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d1e:	4b4d      	ldr	r3, [pc, #308]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d028      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d2a:	4b4a      	ldr	r3, [pc, #296]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	099b      	lsrs	r3, r3, #6
 8001d30:	2200      	movs	r2, #0
 8001d32:	623b      	str	r3, [r7, #32]
 8001d34:	627a      	str	r2, [r7, #36]	; 0x24
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d40:	fb03 f201 	mul.w	r2, r3, r1
 8001d44:	2300      	movs	r3, #0
 8001d46:	fb00 f303 	mul.w	r3, r0, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a43      	ldr	r2, [pc, #268]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d4e:	fba0 1202 	umull	r1, r2, r0, r2
 8001d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d54:	460a      	mov	r2, r1
 8001d56:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d5a:	4413      	add	r3, r2
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d60:	2200      	movs	r2, #0
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	61fa      	str	r2, [r7, #28]
 8001d66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d6e:	f7fe fa87 	bl	8000280 <__aeabi_uldivmod>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4613      	mov	r3, r2
 8001d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d7a:	e053      	b.n	8001e24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7c:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	099b      	lsrs	r3, r3, #6
 8001d82:	2200      	movs	r2, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	617a      	str	r2, [r7, #20]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d8e:	f04f 0b00 	mov.w	fp, #0
 8001d92:	4652      	mov	r2, sl
 8001d94:	465b      	mov	r3, fp
 8001d96:	f04f 0000 	mov.w	r0, #0
 8001d9a:	f04f 0100 	mov.w	r1, #0
 8001d9e:	0159      	lsls	r1, r3, #5
 8001da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da4:	0150      	lsls	r0, r2, #5
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	ebb2 080a 	subs.w	r8, r2, sl
 8001dae:	eb63 090b 	sbc.w	r9, r3, fp
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001dbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001dc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001dc6:	ebb2 0408 	subs.w	r4, r2, r8
 8001dca:	eb63 0509 	sbc.w	r5, r3, r9
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	00eb      	lsls	r3, r5, #3
 8001dd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ddc:	00e2      	lsls	r2, r4, #3
 8001dde:	4614      	mov	r4, r2
 8001de0:	461d      	mov	r5, r3
 8001de2:	eb14 030a 	adds.w	r3, r4, sl
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	eb45 030b 	adc.w	r3, r5, fp
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	028b      	lsls	r3, r1, #10
 8001dfe:	4621      	mov	r1, r4
 8001e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e04:	4621      	mov	r1, r4
 8001e06:	028a      	lsls	r2, r1, #10
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	60fa      	str	r2, [r7, #12]
 8001e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e18:	f7fe fa32 	bl	8000280 <__aeabi_uldivmod>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4613      	mov	r3, r2
 8001e22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	0c1b      	lsrs	r3, r3, #16
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001e34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e3e:	e002      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3740      	adds	r7, #64	; 0x40
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	00f42400 	.word	0x00f42400
 8001e5c:	017d7840 	.word	0x017d7840

08001e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000000 	.word	0x20000000

08001e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e7c:	f7ff fff0 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	0a9b      	lsrs	r3, r3, #10
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4903      	ldr	r1, [pc, #12]	; (8001e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	0800329c 	.word	0x0800329c

08001ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d038      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ec8:	4b68      	ldr	r3, [pc, #416]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ece:	f7fe ffc5 	bl	8000e5c <HAL_GetTick>
 8001ed2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ed6:	f7fe ffc1 	bl	8000e5c <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e0bd      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ee8:	4b61      	ldr	r3, [pc, #388]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f0      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	019b      	lsls	r3, r3, #6
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	071b      	lsls	r3, r3, #28
 8001f06:	495a      	ldr	r1, [pc, #360]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f0e:	4b57      	ldr	r3, [pc, #348]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f14:	f7fe ffa2 	bl	8000e5c <HAL_GetTick>
 8001f18:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f1c:	f7fe ff9e 	bl	8000e5c <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e09a      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f2e:	4b50      	ldr	r3, [pc, #320]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8083 	beq.w	800204e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	4b48      	ldr	r3, [pc, #288]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	4a47      	ldr	r2, [pc, #284]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f56:	6413      	str	r3, [r2, #64]	; 0x40
 8001f58:	4b45      	ldr	r3, [pc, #276]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001f64:	4b43      	ldr	r3, [pc, #268]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a42      	ldr	r2, [pc, #264]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f70:	f7fe ff74 	bl	8000e5c <HAL_GetTick>
 8001f74:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f78:	f7fe ff70 	bl	8000e5c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e06c      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f8a:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f96:	4b36      	ldr	r3, [pc, #216]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d02f      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d028      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fb4:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fbc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fbe:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc4:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001fca:	4a29      	ldr	r2, [pc, #164]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d114      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe ff3e 	bl	8000e5c <HAL_GetTick>
 8001fe0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe4:	f7fe ff3a 	bl	8000e5c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e034      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0ee      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002012:	d10d      	bne.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002014:	4b16      	ldr	r3, [pc, #88]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002028:	4911      	ldr	r1, [pc, #68]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
 800202e:	e005      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002030:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a0e      	ldr	r2, [pc, #56]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002036:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800203a:	6093      	str	r3, [r2, #8]
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800203e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002048:	4909      	ldr	r1, [pc, #36]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800204a:	4313      	orrs	r3, r2
 800204c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	7d1a      	ldrb	r2, [r3, #20]
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002060:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	42470068 	.word	0x42470068
 8002070:	40023800 	.word	0x40023800
 8002074:	40007000 	.word	0x40007000
 8002078:	42470e40 	.word	0x42470e40
 800207c:	424711e0 	.word	0x424711e0

08002080 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e066      	b.n	8002164 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7f5b      	ldrb	r3, [r3, #29]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d105      	bne.n	80020ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fdaa 	bl	8000c00 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	22ca      	movs	r2, #202	; 0xca
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2253      	movs	r2, #83	; 0x53
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fb88 	bl	80027d8 <RTC_EnterInitMode>
 80020c8:	4603      	mov	r3, r0
 80020ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d12c      	bne.n	800212c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80020e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020e4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6899      	ldr	r1, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	68d2      	ldr	r2, [r2, #12]
 800210c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6919      	ldr	r1, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	041a      	lsls	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fb8f 	bl	8002846 <RTC_ExitInitMode>
 8002128:	4603      	mov	r3, r0
 800212a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d113      	bne.n	800215a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002140:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699a      	ldr	r2, [r3, #24]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	22ff      	movs	r2, #255	; 0xff
 8002160:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	7f1b      	ldrb	r3, [r3, #28]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_RTC_SetTime+0x1c>
 8002184:	2302      	movs	r3, #2
 8002186:	e087      	b.n	8002298 <HAL_RTC_SetTime+0x12c>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2202      	movs	r2, #2
 8002192:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d126      	bne.n	80021e8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2200      	movs	r2, #0
 80021ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fb6c 	bl	8002890 <RTC_ByteToBcd2>
 80021b8:	4603      	mov	r3, r0
 80021ba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	785b      	ldrb	r3, [r3, #1]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 fb65 	bl	8002890 <RTC_ByteToBcd2>
 80021c6:	4603      	mov	r3, r0
 80021c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80021ca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	789b      	ldrb	r3, [r3, #2]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fb5d 	bl	8002890 <RTC_ByteToBcd2>
 80021d6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80021d8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	78db      	ldrb	r3, [r3, #3]
 80021e0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80021e2:	4313      	orrs	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	e018      	b.n	800221a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2200      	movs	r2, #0
 80021fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	785b      	ldrb	r3, [r3, #1]
 8002206:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002208:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800220e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	78db      	ldrb	r3, [r3, #3]
 8002214:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	22ca      	movs	r2, #202	; 0xca
 8002220:	625a      	str	r2, [r3, #36]	; 0x24
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2253      	movs	r2, #83	; 0x53
 8002228:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fad4 	bl	80027d8 <RTC_EnterInitMode>
 8002230:	4603      	mov	r3, r0
 8002232:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d120      	bne.n	800227c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002244:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002248:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002258:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6899      	ldr	r1, [r3, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	431a      	orrs	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fae7 	bl	8002846 <RTC_ExitInitMode>
 8002278:	4603      	mov	r3, r0
 800227a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800227c:	7cfb      	ldrb	r3, [r7, #19]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	22ff      	movs	r2, #255	; 0xff
 800228e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	771a      	strb	r2, [r3, #28]

  return status;
 8002296:	7cfb      	ldrb	r3, [r7, #19]
}
 8002298:	4618      	mov	r0, r3
 800229a:	371c      	adds	r7, #28
 800229c:	46bd      	mov	sp, r7
 800229e:	bd90      	pop	{r4, r7, pc}

080022a0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80022d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80022d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	0c1b      	lsrs	r3, r3, #16
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002300:	b2da      	uxtb	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	0d9b      	lsrs	r3, r3, #22
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	b2da      	uxtb	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d11a      	bne.n	8002352 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f000 fad2 	bl	80028ca <RTC_Bcd2ToByte>
 8002326:	4603      	mov	r3, r0
 8002328:	461a      	mov	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	785b      	ldrb	r3, [r3, #1]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fac9 	bl	80028ca <RTC_Bcd2ToByte>
 8002338:	4603      	mov	r3, r0
 800233a:	461a      	mov	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	789b      	ldrb	r3, [r3, #2]
 8002344:	4618      	mov	r0, r3
 8002346:	f000 fac0 	bl	80028ca <RTC_Bcd2ToByte>
 800234a:	4603      	mov	r3, r0
 800234c:	461a      	mov	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	7f1b      	ldrb	r3, [r3, #28]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_RTC_SetDate+0x1c>
 8002374:	2302      	movs	r3, #2
 8002376:	e071      	b.n	800245c <HAL_RTC_SetDate+0x100>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2201      	movs	r2, #1
 800237c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2202      	movs	r2, #2
 8002382:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10e      	bne.n	80023a8 <HAL_RTC_SetDate+0x4c>
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	785b      	ldrb	r3, [r3, #1]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b00      	cmp	r3, #0
 8002394:	d008      	beq.n	80023a8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	785b      	ldrb	r3, [r3, #1]
 800239a:	f023 0310 	bic.w	r3, r3, #16
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	330a      	adds	r3, #10
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d11c      	bne.n	80023e8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	78db      	ldrb	r3, [r3, #3]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fa6c 	bl	8002890 <RTC_ByteToBcd2>
 80023b8:	4603      	mov	r3, r0
 80023ba:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	785b      	ldrb	r3, [r3, #1]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fa65 	bl	8002890 <RTC_ByteToBcd2>
 80023c6:	4603      	mov	r3, r0
 80023c8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80023ca:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	789b      	ldrb	r3, [r3, #2]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fa5d 	bl	8002890 <RTC_ByteToBcd2>
 80023d6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80023d8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80023e2:	4313      	orrs	r3, r2
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e00e      	b.n	8002406 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	78db      	ldrb	r3, [r3, #3]
 80023ec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	785b      	ldrb	r3, [r3, #1]
 80023f2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80023f4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80023fa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002402:	4313      	orrs	r3, r2
 8002404:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	22ca      	movs	r2, #202	; 0xca
 800240c:	625a      	str	r2, [r3, #36]	; 0x24
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2253      	movs	r2, #83	; 0x53
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f9de 	bl	80027d8 <RTC_EnterInitMode>
 800241c:	4603      	mov	r3, r0
 800241e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10c      	bne.n	8002440 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002430:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002434:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fa05 	bl	8002846 <RTC_ExitInitMode>
 800243c:	4603      	mov	r3, r0
 800243e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d102      	bne.n	800244c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	22ff      	movs	r2, #255	; 0xff
 8002452:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	771a      	strb	r2, [r3, #28]

  return status;
 800245a:	7cfb      	ldrb	r3, [r7, #19]
}
 800245c:	4618      	mov	r0, r3
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd90      	pop	{r4, r7, pc}

08002464 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800247e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002482:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	0c1b      	lsrs	r3, r3, #16
 8002488:	b2da      	uxtb	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	b2da      	uxtb	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	0b5b      	lsrs	r3, r3, #13
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d11a      	bne.n	80024f8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	78db      	ldrb	r3, [r3, #3]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f9ff 	bl	80028ca <RTC_Bcd2ToByte>
 80024cc:	4603      	mov	r3, r0
 80024ce:	461a      	mov	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	785b      	ldrb	r3, [r3, #1]
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 f9f6 	bl	80028ca <RTC_Bcd2ToByte>
 80024de:	4603      	mov	r3, r0
 80024e0:	461a      	mov	r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	789b      	ldrb	r3, [r3, #2]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f9ed 	bl	80028ca <RTC_Bcd2ToByte>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461a      	mov	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b089      	sub	sp, #36	; 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002510:	4b9a      	ldr	r3, [pc, #616]	; (800277c <HAL_RTC_SetAlarm_IT+0x278>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a9a      	ldr	r2, [pc, #616]	; (8002780 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	0adb      	lsrs	r3, r3, #11
 800251c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002520:	fb02 f303 	mul.w	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	7f1b      	ldrb	r3, [r3, #28]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_RTC_SetAlarm_IT+0x36>
 8002536:	2302      	movs	r3, #2
 8002538:	e11c      	b.n	8002774 <HAL_RTC_SetAlarm_IT+0x270>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2202      	movs	r2, #2
 8002544:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d137      	bne.n	80025bc <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d102      	bne.n	8002560 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2200      	movs	r2, #0
 800255e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f000 f993 	bl	8002890 <RTC_ByteToBcd2>
 800256a:	4603      	mov	r3, r0
 800256c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	785b      	ldrb	r3, [r3, #1]
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f98c 	bl	8002890 <RTC_ByteToBcd2>
 8002578:	4603      	mov	r3, r0
 800257a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800257c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	789b      	ldrb	r3, [r3, #2]
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f984 	bl	8002890 <RTC_ByteToBcd2>
 8002588:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800258a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	78db      	ldrb	r3, [r3, #3]
 8002592:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002594:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f976 	bl	8002890 <RTC_ByteToBcd2>
 80025a4:	4603      	mov	r3, r0
 80025a6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80025a8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80025b0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	e023      	b.n	8002604 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d102      	bne.n	80025d0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2200      	movs	r2, #0
 80025ce:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	785b      	ldrb	r3, [r3, #1]
 80025da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80025dc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80025e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	78db      	ldrb	r3, [r3, #3]
 80025e8:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80025ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025f2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80025f4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80025fa:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002600:	4313      	orrs	r3, r2
 8002602:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	22ca      	movs	r2, #202	; 0xca
 8002616:	625a      	str	r2, [r3, #36]	; 0x24
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2253      	movs	r2, #83	; 0x53
 800261e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002628:	d141      	bne.n	80026ae <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002638:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800264a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	1e5a      	subs	r2, r3, #1
 8002650:	617a      	str	r2, [r7, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10b      	bne.n	800266e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	22ff      	movs	r2, #255	; 0xff
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2203      	movs	r2, #3
 8002662:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e082      	b.n	8002774 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0e7      	beq.n	800264c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800269a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	e04b      	b.n	8002746 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026bc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f462 7220 	orn	r2, r2, #640	; 0x280
 80026ce:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80026d0:	4b2a      	ldr	r3, [pc, #168]	; (800277c <HAL_RTC_SetAlarm_IT+0x278>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a2a      	ldr	r2, [pc, #168]	; (8002780 <HAL_RTC_SetAlarm_IT+0x27c>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	0adb      	lsrs	r3, r3, #11
 80026dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026e0:	fb02 f303 	mul.w	r3, r2, r3
 80026e4:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	1e5a      	subs	r2, r3, #1
 80026ea:	617a      	str	r2, [r7, #20]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10b      	bne.n	8002708 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	22ff      	movs	r2, #255	; 0xff
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2203      	movs	r2, #3
 80026fc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e035      	b.n	8002774 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0e7      	beq.n	80026e6 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002734:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002744:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002746:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <HAL_RTC_SetAlarm_IT+0x280>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a0e      	ldr	r2, [pc, #56]	; (8002784 <HAL_RTC_SetAlarm_IT+0x280>)
 800274c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002750:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_RTC_SetAlarm_IT+0x280>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <HAL_RTC_SetAlarm_IT+0x280>)
 8002758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	22ff      	movs	r2, #255	; 0xff
 8002764:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3724      	adds	r7, #36	; 0x24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd90      	pop	{r4, r7, pc}
 800277c:	20000000 	.word	0x20000000
 8002780:	10624dd3 	.word	0x10624dd3
 8002784:	40013c00 	.word	0x40013c00

08002788 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027a2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027a4:	f7fe fb5a 	bl	8000e5c <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80027aa:	e009      	b.n	80027c0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027ac:	f7fe fb56 	bl	8000e5c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027ba:	d901      	bls.n	80027c0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e007      	b.n	80027d0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0ee      	beq.n	80027ac <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d122      	bne.n	800283c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002804:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002806:	f7fe fb29 	bl	8000e5c <HAL_GetTick>
 800280a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800280c:	e00c      	b.n	8002828 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800280e:	f7fe fb25 	bl	8000e5c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800281c:	d904      	bls.n	8002828 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2204      	movs	r2, #4
 8002822:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d102      	bne.n	800283c <RTC_EnterInitMode+0x64>
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d1e8      	bne.n	800280e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002860:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff89 	bl	8002788 <HAL_RTC_WaitForSynchro>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d004      	beq.n	8002886 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2204      	movs	r2, #4
 8002880:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800289e:	e005      	b.n	80028ac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	3301      	adds	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	3b0a      	subs	r3, #10
 80028aa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	2b09      	cmp	r3, #9
 80028b0:	d8f6      	bhi.n	80028a0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	b2db      	uxtb	r3, r3
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b085      	sub	sp, #20
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	0092      	lsls	r2, r2, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	4413      	add	r3, r2
 80028f4:	b2db      	uxtb	r3, r3
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <__errno>:
 8002904:	4b01      	ldr	r3, [pc, #4]	; (800290c <__errno+0x8>)
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	2000000c 	.word	0x2000000c

08002910 <__libc_init_array>:
 8002910:	b570      	push	{r4, r5, r6, lr}
 8002912:	4d0d      	ldr	r5, [pc, #52]	; (8002948 <__libc_init_array+0x38>)
 8002914:	4c0d      	ldr	r4, [pc, #52]	; (800294c <__libc_init_array+0x3c>)
 8002916:	1b64      	subs	r4, r4, r5
 8002918:	10a4      	asrs	r4, r4, #2
 800291a:	2600      	movs	r6, #0
 800291c:	42a6      	cmp	r6, r4
 800291e:	d109      	bne.n	8002934 <__libc_init_array+0x24>
 8002920:	4d0b      	ldr	r5, [pc, #44]	; (8002950 <__libc_init_array+0x40>)
 8002922:	4c0c      	ldr	r4, [pc, #48]	; (8002954 <__libc_init_array+0x44>)
 8002924:	f000 fc8e 	bl	8003244 <_init>
 8002928:	1b64      	subs	r4, r4, r5
 800292a:	10a4      	asrs	r4, r4, #2
 800292c:	2600      	movs	r6, #0
 800292e:	42a6      	cmp	r6, r4
 8002930:	d105      	bne.n	800293e <__libc_init_array+0x2e>
 8002932:	bd70      	pop	{r4, r5, r6, pc}
 8002934:	f855 3b04 	ldr.w	r3, [r5], #4
 8002938:	4798      	blx	r3
 800293a:	3601      	adds	r6, #1
 800293c:	e7ee      	b.n	800291c <__libc_init_array+0xc>
 800293e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002942:	4798      	blx	r3
 8002944:	3601      	adds	r6, #1
 8002946:	e7f2      	b.n	800292e <__libc_init_array+0x1e>
 8002948:	080032e0 	.word	0x080032e0
 800294c:	080032e0 	.word	0x080032e0
 8002950:	080032e0 	.word	0x080032e0
 8002954:	080032e4 	.word	0x080032e4

08002958 <memset>:
 8002958:	4402      	add	r2, r0
 800295a:	4603      	mov	r3, r0
 800295c:	4293      	cmp	r3, r2
 800295e:	d100      	bne.n	8002962 <memset+0xa>
 8002960:	4770      	bx	lr
 8002962:	f803 1b01 	strb.w	r1, [r3], #1
 8002966:	e7f9      	b.n	800295c <memset+0x4>

08002968 <siprintf>:
 8002968:	b40e      	push	{r1, r2, r3}
 800296a:	b500      	push	{lr}
 800296c:	b09c      	sub	sp, #112	; 0x70
 800296e:	ab1d      	add	r3, sp, #116	; 0x74
 8002970:	9002      	str	r0, [sp, #8]
 8002972:	9006      	str	r0, [sp, #24]
 8002974:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002978:	4809      	ldr	r0, [pc, #36]	; (80029a0 <siprintf+0x38>)
 800297a:	9107      	str	r1, [sp, #28]
 800297c:	9104      	str	r1, [sp, #16]
 800297e:	4909      	ldr	r1, [pc, #36]	; (80029a4 <siprintf+0x3c>)
 8002980:	f853 2b04 	ldr.w	r2, [r3], #4
 8002984:	9105      	str	r1, [sp, #20]
 8002986:	6800      	ldr	r0, [r0, #0]
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	a902      	add	r1, sp, #8
 800298c:	f000 f868 	bl	8002a60 <_svfiprintf_r>
 8002990:	9b02      	ldr	r3, [sp, #8]
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	b01c      	add	sp, #112	; 0x70
 8002998:	f85d eb04 	ldr.w	lr, [sp], #4
 800299c:	b003      	add	sp, #12
 800299e:	4770      	bx	lr
 80029a0:	2000000c 	.word	0x2000000c
 80029a4:	ffff0208 	.word	0xffff0208

080029a8 <__ssputs_r>:
 80029a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ac:	688e      	ldr	r6, [r1, #8]
 80029ae:	429e      	cmp	r6, r3
 80029b0:	4682      	mov	sl, r0
 80029b2:	460c      	mov	r4, r1
 80029b4:	4690      	mov	r8, r2
 80029b6:	461f      	mov	r7, r3
 80029b8:	d838      	bhi.n	8002a2c <__ssputs_r+0x84>
 80029ba:	898a      	ldrh	r2, [r1, #12]
 80029bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029c0:	d032      	beq.n	8002a28 <__ssputs_r+0x80>
 80029c2:	6825      	ldr	r5, [r4, #0]
 80029c4:	6909      	ldr	r1, [r1, #16]
 80029c6:	eba5 0901 	sub.w	r9, r5, r1
 80029ca:	6965      	ldr	r5, [r4, #20]
 80029cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029d4:	3301      	adds	r3, #1
 80029d6:	444b      	add	r3, r9
 80029d8:	106d      	asrs	r5, r5, #1
 80029da:	429d      	cmp	r5, r3
 80029dc:	bf38      	it	cc
 80029de:	461d      	movcc	r5, r3
 80029e0:	0553      	lsls	r3, r2, #21
 80029e2:	d531      	bpl.n	8002a48 <__ssputs_r+0xa0>
 80029e4:	4629      	mov	r1, r5
 80029e6:	f000 fb63 	bl	80030b0 <_malloc_r>
 80029ea:	4606      	mov	r6, r0
 80029ec:	b950      	cbnz	r0, 8002a04 <__ssputs_r+0x5c>
 80029ee:	230c      	movs	r3, #12
 80029f0:	f8ca 3000 	str.w	r3, [sl]
 80029f4:	89a3      	ldrh	r3, [r4, #12]
 80029f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029fa:	81a3      	strh	r3, [r4, #12]
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a04:	6921      	ldr	r1, [r4, #16]
 8002a06:	464a      	mov	r2, r9
 8002a08:	f000 fabe 	bl	8002f88 <memcpy>
 8002a0c:	89a3      	ldrh	r3, [r4, #12]
 8002a0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a16:	81a3      	strh	r3, [r4, #12]
 8002a18:	6126      	str	r6, [r4, #16]
 8002a1a:	6165      	str	r5, [r4, #20]
 8002a1c:	444e      	add	r6, r9
 8002a1e:	eba5 0509 	sub.w	r5, r5, r9
 8002a22:	6026      	str	r6, [r4, #0]
 8002a24:	60a5      	str	r5, [r4, #8]
 8002a26:	463e      	mov	r6, r7
 8002a28:	42be      	cmp	r6, r7
 8002a2a:	d900      	bls.n	8002a2e <__ssputs_r+0x86>
 8002a2c:	463e      	mov	r6, r7
 8002a2e:	6820      	ldr	r0, [r4, #0]
 8002a30:	4632      	mov	r2, r6
 8002a32:	4641      	mov	r1, r8
 8002a34:	f000 fab6 	bl	8002fa4 <memmove>
 8002a38:	68a3      	ldr	r3, [r4, #8]
 8002a3a:	1b9b      	subs	r3, r3, r6
 8002a3c:	60a3      	str	r3, [r4, #8]
 8002a3e:	6823      	ldr	r3, [r4, #0]
 8002a40:	4433      	add	r3, r6
 8002a42:	6023      	str	r3, [r4, #0]
 8002a44:	2000      	movs	r0, #0
 8002a46:	e7db      	b.n	8002a00 <__ssputs_r+0x58>
 8002a48:	462a      	mov	r2, r5
 8002a4a:	f000 fba5 	bl	8003198 <_realloc_r>
 8002a4e:	4606      	mov	r6, r0
 8002a50:	2800      	cmp	r0, #0
 8002a52:	d1e1      	bne.n	8002a18 <__ssputs_r+0x70>
 8002a54:	6921      	ldr	r1, [r4, #16]
 8002a56:	4650      	mov	r0, sl
 8002a58:	f000 fabe 	bl	8002fd8 <_free_r>
 8002a5c:	e7c7      	b.n	80029ee <__ssputs_r+0x46>
	...

08002a60 <_svfiprintf_r>:
 8002a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a64:	4698      	mov	r8, r3
 8002a66:	898b      	ldrh	r3, [r1, #12]
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	b09d      	sub	sp, #116	; 0x74
 8002a6c:	4607      	mov	r7, r0
 8002a6e:	460d      	mov	r5, r1
 8002a70:	4614      	mov	r4, r2
 8002a72:	d50e      	bpl.n	8002a92 <_svfiprintf_r+0x32>
 8002a74:	690b      	ldr	r3, [r1, #16]
 8002a76:	b963      	cbnz	r3, 8002a92 <_svfiprintf_r+0x32>
 8002a78:	2140      	movs	r1, #64	; 0x40
 8002a7a:	f000 fb19 	bl	80030b0 <_malloc_r>
 8002a7e:	6028      	str	r0, [r5, #0]
 8002a80:	6128      	str	r0, [r5, #16]
 8002a82:	b920      	cbnz	r0, 8002a8e <_svfiprintf_r+0x2e>
 8002a84:	230c      	movs	r3, #12
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8c:	e0d1      	b.n	8002c32 <_svfiprintf_r+0x1d2>
 8002a8e:	2340      	movs	r3, #64	; 0x40
 8002a90:	616b      	str	r3, [r5, #20]
 8002a92:	2300      	movs	r3, #0
 8002a94:	9309      	str	r3, [sp, #36]	; 0x24
 8002a96:	2320      	movs	r3, #32
 8002a98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002aa0:	2330      	movs	r3, #48	; 0x30
 8002aa2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002c4c <_svfiprintf_r+0x1ec>
 8002aa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002aaa:	f04f 0901 	mov.w	r9, #1
 8002aae:	4623      	mov	r3, r4
 8002ab0:	469a      	mov	sl, r3
 8002ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ab6:	b10a      	cbz	r2, 8002abc <_svfiprintf_r+0x5c>
 8002ab8:	2a25      	cmp	r2, #37	; 0x25
 8002aba:	d1f9      	bne.n	8002ab0 <_svfiprintf_r+0x50>
 8002abc:	ebba 0b04 	subs.w	fp, sl, r4
 8002ac0:	d00b      	beq.n	8002ada <_svfiprintf_r+0x7a>
 8002ac2:	465b      	mov	r3, fp
 8002ac4:	4622      	mov	r2, r4
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	4638      	mov	r0, r7
 8002aca:	f7ff ff6d 	bl	80029a8 <__ssputs_r>
 8002ace:	3001      	adds	r0, #1
 8002ad0:	f000 80aa 	beq.w	8002c28 <_svfiprintf_r+0x1c8>
 8002ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ad6:	445a      	add	r2, fp
 8002ad8:	9209      	str	r2, [sp, #36]	; 0x24
 8002ada:	f89a 3000 	ldrb.w	r3, [sl]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 80a2 	beq.w	8002c28 <_svfiprintf_r+0x1c8>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002aee:	f10a 0a01 	add.w	sl, sl, #1
 8002af2:	9304      	str	r3, [sp, #16]
 8002af4:	9307      	str	r3, [sp, #28]
 8002af6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002afa:	931a      	str	r3, [sp, #104]	; 0x68
 8002afc:	4654      	mov	r4, sl
 8002afe:	2205      	movs	r2, #5
 8002b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b04:	4851      	ldr	r0, [pc, #324]	; (8002c4c <_svfiprintf_r+0x1ec>)
 8002b06:	f7fd fb6b 	bl	80001e0 <memchr>
 8002b0a:	9a04      	ldr	r2, [sp, #16]
 8002b0c:	b9d8      	cbnz	r0, 8002b46 <_svfiprintf_r+0xe6>
 8002b0e:	06d0      	lsls	r0, r2, #27
 8002b10:	bf44      	itt	mi
 8002b12:	2320      	movmi	r3, #32
 8002b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b18:	0711      	lsls	r1, r2, #28
 8002b1a:	bf44      	itt	mi
 8002b1c:	232b      	movmi	r3, #43	; 0x2b
 8002b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b22:	f89a 3000 	ldrb.w	r3, [sl]
 8002b26:	2b2a      	cmp	r3, #42	; 0x2a
 8002b28:	d015      	beq.n	8002b56 <_svfiprintf_r+0xf6>
 8002b2a:	9a07      	ldr	r2, [sp, #28]
 8002b2c:	4654      	mov	r4, sl
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f04f 0c0a 	mov.w	ip, #10
 8002b34:	4621      	mov	r1, r4
 8002b36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b3a:	3b30      	subs	r3, #48	; 0x30
 8002b3c:	2b09      	cmp	r3, #9
 8002b3e:	d94e      	bls.n	8002bde <_svfiprintf_r+0x17e>
 8002b40:	b1b0      	cbz	r0, 8002b70 <_svfiprintf_r+0x110>
 8002b42:	9207      	str	r2, [sp, #28]
 8002b44:	e014      	b.n	8002b70 <_svfiprintf_r+0x110>
 8002b46:	eba0 0308 	sub.w	r3, r0, r8
 8002b4a:	fa09 f303 	lsl.w	r3, r9, r3
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	9304      	str	r3, [sp, #16]
 8002b52:	46a2      	mov	sl, r4
 8002b54:	e7d2      	b.n	8002afc <_svfiprintf_r+0x9c>
 8002b56:	9b03      	ldr	r3, [sp, #12]
 8002b58:	1d19      	adds	r1, r3, #4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	9103      	str	r1, [sp, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	bfbb      	ittet	lt
 8002b62:	425b      	neglt	r3, r3
 8002b64:	f042 0202 	orrlt.w	r2, r2, #2
 8002b68:	9307      	strge	r3, [sp, #28]
 8002b6a:	9307      	strlt	r3, [sp, #28]
 8002b6c:	bfb8      	it	lt
 8002b6e:	9204      	strlt	r2, [sp, #16]
 8002b70:	7823      	ldrb	r3, [r4, #0]
 8002b72:	2b2e      	cmp	r3, #46	; 0x2e
 8002b74:	d10c      	bne.n	8002b90 <_svfiprintf_r+0x130>
 8002b76:	7863      	ldrb	r3, [r4, #1]
 8002b78:	2b2a      	cmp	r3, #42	; 0x2a
 8002b7a:	d135      	bne.n	8002be8 <_svfiprintf_r+0x188>
 8002b7c:	9b03      	ldr	r3, [sp, #12]
 8002b7e:	1d1a      	adds	r2, r3, #4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	9203      	str	r2, [sp, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bfb8      	it	lt
 8002b88:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b8c:	3402      	adds	r4, #2
 8002b8e:	9305      	str	r3, [sp, #20]
 8002b90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002c5c <_svfiprintf_r+0x1fc>
 8002b94:	7821      	ldrb	r1, [r4, #0]
 8002b96:	2203      	movs	r2, #3
 8002b98:	4650      	mov	r0, sl
 8002b9a:	f7fd fb21 	bl	80001e0 <memchr>
 8002b9e:	b140      	cbz	r0, 8002bb2 <_svfiprintf_r+0x152>
 8002ba0:	2340      	movs	r3, #64	; 0x40
 8002ba2:	eba0 000a 	sub.w	r0, r0, sl
 8002ba6:	fa03 f000 	lsl.w	r0, r3, r0
 8002baa:	9b04      	ldr	r3, [sp, #16]
 8002bac:	4303      	orrs	r3, r0
 8002bae:	3401      	adds	r4, #1
 8002bb0:	9304      	str	r3, [sp, #16]
 8002bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bb6:	4826      	ldr	r0, [pc, #152]	; (8002c50 <_svfiprintf_r+0x1f0>)
 8002bb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bbc:	2206      	movs	r2, #6
 8002bbe:	f7fd fb0f 	bl	80001e0 <memchr>
 8002bc2:	2800      	cmp	r0, #0
 8002bc4:	d038      	beq.n	8002c38 <_svfiprintf_r+0x1d8>
 8002bc6:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <_svfiprintf_r+0x1f4>)
 8002bc8:	bb1b      	cbnz	r3, 8002c12 <_svfiprintf_r+0x1b2>
 8002bca:	9b03      	ldr	r3, [sp, #12]
 8002bcc:	3307      	adds	r3, #7
 8002bce:	f023 0307 	bic.w	r3, r3, #7
 8002bd2:	3308      	adds	r3, #8
 8002bd4:	9303      	str	r3, [sp, #12]
 8002bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bd8:	4433      	add	r3, r6
 8002bda:	9309      	str	r3, [sp, #36]	; 0x24
 8002bdc:	e767      	b.n	8002aae <_svfiprintf_r+0x4e>
 8002bde:	fb0c 3202 	mla	r2, ip, r2, r3
 8002be2:	460c      	mov	r4, r1
 8002be4:	2001      	movs	r0, #1
 8002be6:	e7a5      	b.n	8002b34 <_svfiprintf_r+0xd4>
 8002be8:	2300      	movs	r3, #0
 8002bea:	3401      	adds	r4, #1
 8002bec:	9305      	str	r3, [sp, #20]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f04f 0c0a 	mov.w	ip, #10
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bfa:	3a30      	subs	r2, #48	; 0x30
 8002bfc:	2a09      	cmp	r2, #9
 8002bfe:	d903      	bls.n	8002c08 <_svfiprintf_r+0x1a8>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0c5      	beq.n	8002b90 <_svfiprintf_r+0x130>
 8002c04:	9105      	str	r1, [sp, #20]
 8002c06:	e7c3      	b.n	8002b90 <_svfiprintf_r+0x130>
 8002c08:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e7f0      	b.n	8002bf4 <_svfiprintf_r+0x194>
 8002c12:	ab03      	add	r3, sp, #12
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	462a      	mov	r2, r5
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <_svfiprintf_r+0x1f8>)
 8002c1a:	a904      	add	r1, sp, #16
 8002c1c:	4638      	mov	r0, r7
 8002c1e:	f3af 8000 	nop.w
 8002c22:	1c42      	adds	r2, r0, #1
 8002c24:	4606      	mov	r6, r0
 8002c26:	d1d6      	bne.n	8002bd6 <_svfiprintf_r+0x176>
 8002c28:	89ab      	ldrh	r3, [r5, #12]
 8002c2a:	065b      	lsls	r3, r3, #25
 8002c2c:	f53f af2c 	bmi.w	8002a88 <_svfiprintf_r+0x28>
 8002c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c32:	b01d      	add	sp, #116	; 0x74
 8002c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c38:	ab03      	add	r3, sp, #12
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	462a      	mov	r2, r5
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <_svfiprintf_r+0x1f8>)
 8002c40:	a904      	add	r1, sp, #16
 8002c42:	4638      	mov	r0, r7
 8002c44:	f000 f87a 	bl	8002d3c <_printf_i>
 8002c48:	e7eb      	b.n	8002c22 <_svfiprintf_r+0x1c2>
 8002c4a:	bf00      	nop
 8002c4c:	080032a4 	.word	0x080032a4
 8002c50:	080032ae 	.word	0x080032ae
 8002c54:	00000000 	.word	0x00000000
 8002c58:	080029a9 	.word	0x080029a9
 8002c5c:	080032aa 	.word	0x080032aa

08002c60 <_printf_common>:
 8002c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c64:	4616      	mov	r6, r2
 8002c66:	4699      	mov	r9, r3
 8002c68:	688a      	ldr	r2, [r1, #8]
 8002c6a:	690b      	ldr	r3, [r1, #16]
 8002c6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c70:	4293      	cmp	r3, r2
 8002c72:	bfb8      	it	lt
 8002c74:	4613      	movlt	r3, r2
 8002c76:	6033      	str	r3, [r6, #0]
 8002c78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c7c:	4607      	mov	r7, r0
 8002c7e:	460c      	mov	r4, r1
 8002c80:	b10a      	cbz	r2, 8002c86 <_printf_common+0x26>
 8002c82:	3301      	adds	r3, #1
 8002c84:	6033      	str	r3, [r6, #0]
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	0699      	lsls	r1, r3, #26
 8002c8a:	bf42      	ittt	mi
 8002c8c:	6833      	ldrmi	r3, [r6, #0]
 8002c8e:	3302      	addmi	r3, #2
 8002c90:	6033      	strmi	r3, [r6, #0]
 8002c92:	6825      	ldr	r5, [r4, #0]
 8002c94:	f015 0506 	ands.w	r5, r5, #6
 8002c98:	d106      	bne.n	8002ca8 <_printf_common+0x48>
 8002c9a:	f104 0a19 	add.w	sl, r4, #25
 8002c9e:	68e3      	ldr	r3, [r4, #12]
 8002ca0:	6832      	ldr	r2, [r6, #0]
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	42ab      	cmp	r3, r5
 8002ca6:	dc26      	bgt.n	8002cf6 <_printf_common+0x96>
 8002ca8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002cac:	1e13      	subs	r3, r2, #0
 8002cae:	6822      	ldr	r2, [r4, #0]
 8002cb0:	bf18      	it	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	0692      	lsls	r2, r2, #26
 8002cb6:	d42b      	bmi.n	8002d10 <_printf_common+0xb0>
 8002cb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cbc:	4649      	mov	r1, r9
 8002cbe:	4638      	mov	r0, r7
 8002cc0:	47c0      	blx	r8
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	d01e      	beq.n	8002d04 <_printf_common+0xa4>
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	68e5      	ldr	r5, [r4, #12]
 8002cca:	6832      	ldr	r2, [r6, #0]
 8002ccc:	f003 0306 	and.w	r3, r3, #6
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	bf08      	it	eq
 8002cd4:	1aad      	subeq	r5, r5, r2
 8002cd6:	68a3      	ldr	r3, [r4, #8]
 8002cd8:	6922      	ldr	r2, [r4, #16]
 8002cda:	bf0c      	ite	eq
 8002cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ce0:	2500      	movne	r5, #0
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	bfc4      	itt	gt
 8002ce6:	1a9b      	subgt	r3, r3, r2
 8002ce8:	18ed      	addgt	r5, r5, r3
 8002cea:	2600      	movs	r6, #0
 8002cec:	341a      	adds	r4, #26
 8002cee:	42b5      	cmp	r5, r6
 8002cf0:	d11a      	bne.n	8002d28 <_printf_common+0xc8>
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	e008      	b.n	8002d08 <_printf_common+0xa8>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	4652      	mov	r2, sl
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	4638      	mov	r0, r7
 8002cfe:	47c0      	blx	r8
 8002d00:	3001      	adds	r0, #1
 8002d02:	d103      	bne.n	8002d0c <_printf_common+0xac>
 8002d04:	f04f 30ff 	mov.w	r0, #4294967295
 8002d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d0c:	3501      	adds	r5, #1
 8002d0e:	e7c6      	b.n	8002c9e <_printf_common+0x3e>
 8002d10:	18e1      	adds	r1, r4, r3
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	2030      	movs	r0, #48	; 0x30
 8002d16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d1a:	4422      	add	r2, r4
 8002d1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d24:	3302      	adds	r3, #2
 8002d26:	e7c7      	b.n	8002cb8 <_printf_common+0x58>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	4622      	mov	r2, r4
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	4638      	mov	r0, r7
 8002d30:	47c0      	blx	r8
 8002d32:	3001      	adds	r0, #1
 8002d34:	d0e6      	beq.n	8002d04 <_printf_common+0xa4>
 8002d36:	3601      	adds	r6, #1
 8002d38:	e7d9      	b.n	8002cee <_printf_common+0x8e>
	...

08002d3c <_printf_i>:
 8002d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d40:	7e0f      	ldrb	r7, [r1, #24]
 8002d42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d44:	2f78      	cmp	r7, #120	; 0x78
 8002d46:	4691      	mov	r9, r2
 8002d48:	4680      	mov	r8, r0
 8002d4a:	460c      	mov	r4, r1
 8002d4c:	469a      	mov	sl, r3
 8002d4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d52:	d807      	bhi.n	8002d64 <_printf_i+0x28>
 8002d54:	2f62      	cmp	r7, #98	; 0x62
 8002d56:	d80a      	bhi.n	8002d6e <_printf_i+0x32>
 8002d58:	2f00      	cmp	r7, #0
 8002d5a:	f000 80d8 	beq.w	8002f0e <_printf_i+0x1d2>
 8002d5e:	2f58      	cmp	r7, #88	; 0x58
 8002d60:	f000 80a3 	beq.w	8002eaa <_printf_i+0x16e>
 8002d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d6c:	e03a      	b.n	8002de4 <_printf_i+0xa8>
 8002d6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d72:	2b15      	cmp	r3, #21
 8002d74:	d8f6      	bhi.n	8002d64 <_printf_i+0x28>
 8002d76:	a101      	add	r1, pc, #4	; (adr r1, 8002d7c <_printf_i+0x40>)
 8002d78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d7c:	08002dd5 	.word	0x08002dd5
 8002d80:	08002de9 	.word	0x08002de9
 8002d84:	08002d65 	.word	0x08002d65
 8002d88:	08002d65 	.word	0x08002d65
 8002d8c:	08002d65 	.word	0x08002d65
 8002d90:	08002d65 	.word	0x08002d65
 8002d94:	08002de9 	.word	0x08002de9
 8002d98:	08002d65 	.word	0x08002d65
 8002d9c:	08002d65 	.word	0x08002d65
 8002da0:	08002d65 	.word	0x08002d65
 8002da4:	08002d65 	.word	0x08002d65
 8002da8:	08002ef5 	.word	0x08002ef5
 8002dac:	08002e19 	.word	0x08002e19
 8002db0:	08002ed7 	.word	0x08002ed7
 8002db4:	08002d65 	.word	0x08002d65
 8002db8:	08002d65 	.word	0x08002d65
 8002dbc:	08002f17 	.word	0x08002f17
 8002dc0:	08002d65 	.word	0x08002d65
 8002dc4:	08002e19 	.word	0x08002e19
 8002dc8:	08002d65 	.word	0x08002d65
 8002dcc:	08002d65 	.word	0x08002d65
 8002dd0:	08002edf 	.word	0x08002edf
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	1d1a      	adds	r2, r3, #4
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	602a      	str	r2, [r5, #0]
 8002ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002de0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0a3      	b.n	8002f30 <_printf_i+0x1f4>
 8002de8:	6820      	ldr	r0, [r4, #0]
 8002dea:	6829      	ldr	r1, [r5, #0]
 8002dec:	0606      	lsls	r6, r0, #24
 8002dee:	f101 0304 	add.w	r3, r1, #4
 8002df2:	d50a      	bpl.n	8002e0a <_printf_i+0xce>
 8002df4:	680e      	ldr	r6, [r1, #0]
 8002df6:	602b      	str	r3, [r5, #0]
 8002df8:	2e00      	cmp	r6, #0
 8002dfa:	da03      	bge.n	8002e04 <_printf_i+0xc8>
 8002dfc:	232d      	movs	r3, #45	; 0x2d
 8002dfe:	4276      	negs	r6, r6
 8002e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e04:	485e      	ldr	r0, [pc, #376]	; (8002f80 <_printf_i+0x244>)
 8002e06:	230a      	movs	r3, #10
 8002e08:	e019      	b.n	8002e3e <_printf_i+0x102>
 8002e0a:	680e      	ldr	r6, [r1, #0]
 8002e0c:	602b      	str	r3, [r5, #0]
 8002e0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e12:	bf18      	it	ne
 8002e14:	b236      	sxthne	r6, r6
 8002e16:	e7ef      	b.n	8002df8 <_printf_i+0xbc>
 8002e18:	682b      	ldr	r3, [r5, #0]
 8002e1a:	6820      	ldr	r0, [r4, #0]
 8002e1c:	1d19      	adds	r1, r3, #4
 8002e1e:	6029      	str	r1, [r5, #0]
 8002e20:	0601      	lsls	r1, r0, #24
 8002e22:	d501      	bpl.n	8002e28 <_printf_i+0xec>
 8002e24:	681e      	ldr	r6, [r3, #0]
 8002e26:	e002      	b.n	8002e2e <_printf_i+0xf2>
 8002e28:	0646      	lsls	r6, r0, #25
 8002e2a:	d5fb      	bpl.n	8002e24 <_printf_i+0xe8>
 8002e2c:	881e      	ldrh	r6, [r3, #0]
 8002e2e:	4854      	ldr	r0, [pc, #336]	; (8002f80 <_printf_i+0x244>)
 8002e30:	2f6f      	cmp	r7, #111	; 0x6f
 8002e32:	bf0c      	ite	eq
 8002e34:	2308      	moveq	r3, #8
 8002e36:	230a      	movne	r3, #10
 8002e38:	2100      	movs	r1, #0
 8002e3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e3e:	6865      	ldr	r5, [r4, #4]
 8002e40:	60a5      	str	r5, [r4, #8]
 8002e42:	2d00      	cmp	r5, #0
 8002e44:	bfa2      	ittt	ge
 8002e46:	6821      	ldrge	r1, [r4, #0]
 8002e48:	f021 0104 	bicge.w	r1, r1, #4
 8002e4c:	6021      	strge	r1, [r4, #0]
 8002e4e:	b90e      	cbnz	r6, 8002e54 <_printf_i+0x118>
 8002e50:	2d00      	cmp	r5, #0
 8002e52:	d04d      	beq.n	8002ef0 <_printf_i+0x1b4>
 8002e54:	4615      	mov	r5, r2
 8002e56:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e5a:	fb03 6711 	mls	r7, r3, r1, r6
 8002e5e:	5dc7      	ldrb	r7, [r0, r7]
 8002e60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e64:	4637      	mov	r7, r6
 8002e66:	42bb      	cmp	r3, r7
 8002e68:	460e      	mov	r6, r1
 8002e6a:	d9f4      	bls.n	8002e56 <_printf_i+0x11a>
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d10b      	bne.n	8002e88 <_printf_i+0x14c>
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	07de      	lsls	r6, r3, #31
 8002e74:	d508      	bpl.n	8002e88 <_printf_i+0x14c>
 8002e76:	6923      	ldr	r3, [r4, #16]
 8002e78:	6861      	ldr	r1, [r4, #4]
 8002e7a:	4299      	cmp	r1, r3
 8002e7c:	bfde      	ittt	le
 8002e7e:	2330      	movle	r3, #48	; 0x30
 8002e80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e88:	1b52      	subs	r2, r2, r5
 8002e8a:	6122      	str	r2, [r4, #16]
 8002e8c:	f8cd a000 	str.w	sl, [sp]
 8002e90:	464b      	mov	r3, r9
 8002e92:	aa03      	add	r2, sp, #12
 8002e94:	4621      	mov	r1, r4
 8002e96:	4640      	mov	r0, r8
 8002e98:	f7ff fee2 	bl	8002c60 <_printf_common>
 8002e9c:	3001      	adds	r0, #1
 8002e9e:	d14c      	bne.n	8002f3a <_printf_i+0x1fe>
 8002ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea4:	b004      	add	sp, #16
 8002ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eaa:	4835      	ldr	r0, [pc, #212]	; (8002f80 <_printf_i+0x244>)
 8002eac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002eb0:	6829      	ldr	r1, [r5, #0]
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8002eb8:	6029      	str	r1, [r5, #0]
 8002eba:	061d      	lsls	r5, r3, #24
 8002ebc:	d514      	bpl.n	8002ee8 <_printf_i+0x1ac>
 8002ebe:	07df      	lsls	r7, r3, #31
 8002ec0:	bf44      	itt	mi
 8002ec2:	f043 0320 	orrmi.w	r3, r3, #32
 8002ec6:	6023      	strmi	r3, [r4, #0]
 8002ec8:	b91e      	cbnz	r6, 8002ed2 <_printf_i+0x196>
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	f023 0320 	bic.w	r3, r3, #32
 8002ed0:	6023      	str	r3, [r4, #0]
 8002ed2:	2310      	movs	r3, #16
 8002ed4:	e7b0      	b.n	8002e38 <_printf_i+0xfc>
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	f043 0320 	orr.w	r3, r3, #32
 8002edc:	6023      	str	r3, [r4, #0]
 8002ede:	2378      	movs	r3, #120	; 0x78
 8002ee0:	4828      	ldr	r0, [pc, #160]	; (8002f84 <_printf_i+0x248>)
 8002ee2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ee6:	e7e3      	b.n	8002eb0 <_printf_i+0x174>
 8002ee8:	0659      	lsls	r1, r3, #25
 8002eea:	bf48      	it	mi
 8002eec:	b2b6      	uxthmi	r6, r6
 8002eee:	e7e6      	b.n	8002ebe <_printf_i+0x182>
 8002ef0:	4615      	mov	r5, r2
 8002ef2:	e7bb      	b.n	8002e6c <_printf_i+0x130>
 8002ef4:	682b      	ldr	r3, [r5, #0]
 8002ef6:	6826      	ldr	r6, [r4, #0]
 8002ef8:	6961      	ldr	r1, [r4, #20]
 8002efa:	1d18      	adds	r0, r3, #4
 8002efc:	6028      	str	r0, [r5, #0]
 8002efe:	0635      	lsls	r5, r6, #24
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	d501      	bpl.n	8002f08 <_printf_i+0x1cc>
 8002f04:	6019      	str	r1, [r3, #0]
 8002f06:	e002      	b.n	8002f0e <_printf_i+0x1d2>
 8002f08:	0670      	lsls	r0, r6, #25
 8002f0a:	d5fb      	bpl.n	8002f04 <_printf_i+0x1c8>
 8002f0c:	8019      	strh	r1, [r3, #0]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	6123      	str	r3, [r4, #16]
 8002f12:	4615      	mov	r5, r2
 8002f14:	e7ba      	b.n	8002e8c <_printf_i+0x150>
 8002f16:	682b      	ldr	r3, [r5, #0]
 8002f18:	1d1a      	adds	r2, r3, #4
 8002f1a:	602a      	str	r2, [r5, #0]
 8002f1c:	681d      	ldr	r5, [r3, #0]
 8002f1e:	6862      	ldr	r2, [r4, #4]
 8002f20:	2100      	movs	r1, #0
 8002f22:	4628      	mov	r0, r5
 8002f24:	f7fd f95c 	bl	80001e0 <memchr>
 8002f28:	b108      	cbz	r0, 8002f2e <_printf_i+0x1f2>
 8002f2a:	1b40      	subs	r0, r0, r5
 8002f2c:	6060      	str	r0, [r4, #4]
 8002f2e:	6863      	ldr	r3, [r4, #4]
 8002f30:	6123      	str	r3, [r4, #16]
 8002f32:	2300      	movs	r3, #0
 8002f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f38:	e7a8      	b.n	8002e8c <_printf_i+0x150>
 8002f3a:	6923      	ldr	r3, [r4, #16]
 8002f3c:	462a      	mov	r2, r5
 8002f3e:	4649      	mov	r1, r9
 8002f40:	4640      	mov	r0, r8
 8002f42:	47d0      	blx	sl
 8002f44:	3001      	adds	r0, #1
 8002f46:	d0ab      	beq.n	8002ea0 <_printf_i+0x164>
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	079b      	lsls	r3, r3, #30
 8002f4c:	d413      	bmi.n	8002f76 <_printf_i+0x23a>
 8002f4e:	68e0      	ldr	r0, [r4, #12]
 8002f50:	9b03      	ldr	r3, [sp, #12]
 8002f52:	4298      	cmp	r0, r3
 8002f54:	bfb8      	it	lt
 8002f56:	4618      	movlt	r0, r3
 8002f58:	e7a4      	b.n	8002ea4 <_printf_i+0x168>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	4632      	mov	r2, r6
 8002f5e:	4649      	mov	r1, r9
 8002f60:	4640      	mov	r0, r8
 8002f62:	47d0      	blx	sl
 8002f64:	3001      	adds	r0, #1
 8002f66:	d09b      	beq.n	8002ea0 <_printf_i+0x164>
 8002f68:	3501      	adds	r5, #1
 8002f6a:	68e3      	ldr	r3, [r4, #12]
 8002f6c:	9903      	ldr	r1, [sp, #12]
 8002f6e:	1a5b      	subs	r3, r3, r1
 8002f70:	42ab      	cmp	r3, r5
 8002f72:	dcf2      	bgt.n	8002f5a <_printf_i+0x21e>
 8002f74:	e7eb      	b.n	8002f4e <_printf_i+0x212>
 8002f76:	2500      	movs	r5, #0
 8002f78:	f104 0619 	add.w	r6, r4, #25
 8002f7c:	e7f5      	b.n	8002f6a <_printf_i+0x22e>
 8002f7e:	bf00      	nop
 8002f80:	080032b5 	.word	0x080032b5
 8002f84:	080032c6 	.word	0x080032c6

08002f88 <memcpy>:
 8002f88:	440a      	add	r2, r1
 8002f8a:	4291      	cmp	r1, r2
 8002f8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f90:	d100      	bne.n	8002f94 <memcpy+0xc>
 8002f92:	4770      	bx	lr
 8002f94:	b510      	push	{r4, lr}
 8002f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f9e:	4291      	cmp	r1, r2
 8002fa0:	d1f9      	bne.n	8002f96 <memcpy+0xe>
 8002fa2:	bd10      	pop	{r4, pc}

08002fa4 <memmove>:
 8002fa4:	4288      	cmp	r0, r1
 8002fa6:	b510      	push	{r4, lr}
 8002fa8:	eb01 0402 	add.w	r4, r1, r2
 8002fac:	d902      	bls.n	8002fb4 <memmove+0x10>
 8002fae:	4284      	cmp	r4, r0
 8002fb0:	4623      	mov	r3, r4
 8002fb2:	d807      	bhi.n	8002fc4 <memmove+0x20>
 8002fb4:	1e43      	subs	r3, r0, #1
 8002fb6:	42a1      	cmp	r1, r4
 8002fb8:	d008      	beq.n	8002fcc <memmove+0x28>
 8002fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002fc2:	e7f8      	b.n	8002fb6 <memmove+0x12>
 8002fc4:	4402      	add	r2, r0
 8002fc6:	4601      	mov	r1, r0
 8002fc8:	428a      	cmp	r2, r1
 8002fca:	d100      	bne.n	8002fce <memmove+0x2a>
 8002fcc:	bd10      	pop	{r4, pc}
 8002fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002fd6:	e7f7      	b.n	8002fc8 <memmove+0x24>

08002fd8 <_free_r>:
 8002fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fda:	2900      	cmp	r1, #0
 8002fdc:	d044      	beq.n	8003068 <_free_r+0x90>
 8002fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fe2:	9001      	str	r0, [sp, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f1a1 0404 	sub.w	r4, r1, #4
 8002fea:	bfb8      	it	lt
 8002fec:	18e4      	addlt	r4, r4, r3
 8002fee:	f000 f913 	bl	8003218 <__malloc_lock>
 8002ff2:	4a1e      	ldr	r2, [pc, #120]	; (800306c <_free_r+0x94>)
 8002ff4:	9801      	ldr	r0, [sp, #4]
 8002ff6:	6813      	ldr	r3, [r2, #0]
 8002ff8:	b933      	cbnz	r3, 8003008 <_free_r+0x30>
 8002ffa:	6063      	str	r3, [r4, #4]
 8002ffc:	6014      	str	r4, [r2, #0]
 8002ffe:	b003      	add	sp, #12
 8003000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003004:	f000 b90e 	b.w	8003224 <__malloc_unlock>
 8003008:	42a3      	cmp	r3, r4
 800300a:	d908      	bls.n	800301e <_free_r+0x46>
 800300c:	6825      	ldr	r5, [r4, #0]
 800300e:	1961      	adds	r1, r4, r5
 8003010:	428b      	cmp	r3, r1
 8003012:	bf01      	itttt	eq
 8003014:	6819      	ldreq	r1, [r3, #0]
 8003016:	685b      	ldreq	r3, [r3, #4]
 8003018:	1949      	addeq	r1, r1, r5
 800301a:	6021      	streq	r1, [r4, #0]
 800301c:	e7ed      	b.n	8002ffa <_free_r+0x22>
 800301e:	461a      	mov	r2, r3
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	b10b      	cbz	r3, 8003028 <_free_r+0x50>
 8003024:	42a3      	cmp	r3, r4
 8003026:	d9fa      	bls.n	800301e <_free_r+0x46>
 8003028:	6811      	ldr	r1, [r2, #0]
 800302a:	1855      	adds	r5, r2, r1
 800302c:	42a5      	cmp	r5, r4
 800302e:	d10b      	bne.n	8003048 <_free_r+0x70>
 8003030:	6824      	ldr	r4, [r4, #0]
 8003032:	4421      	add	r1, r4
 8003034:	1854      	adds	r4, r2, r1
 8003036:	42a3      	cmp	r3, r4
 8003038:	6011      	str	r1, [r2, #0]
 800303a:	d1e0      	bne.n	8002ffe <_free_r+0x26>
 800303c:	681c      	ldr	r4, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	6053      	str	r3, [r2, #4]
 8003042:	4421      	add	r1, r4
 8003044:	6011      	str	r1, [r2, #0]
 8003046:	e7da      	b.n	8002ffe <_free_r+0x26>
 8003048:	d902      	bls.n	8003050 <_free_r+0x78>
 800304a:	230c      	movs	r3, #12
 800304c:	6003      	str	r3, [r0, #0]
 800304e:	e7d6      	b.n	8002ffe <_free_r+0x26>
 8003050:	6825      	ldr	r5, [r4, #0]
 8003052:	1961      	adds	r1, r4, r5
 8003054:	428b      	cmp	r3, r1
 8003056:	bf04      	itt	eq
 8003058:	6819      	ldreq	r1, [r3, #0]
 800305a:	685b      	ldreq	r3, [r3, #4]
 800305c:	6063      	str	r3, [r4, #4]
 800305e:	bf04      	itt	eq
 8003060:	1949      	addeq	r1, r1, r5
 8003062:	6021      	streq	r1, [r4, #0]
 8003064:	6054      	str	r4, [r2, #4]
 8003066:	e7ca      	b.n	8002ffe <_free_r+0x26>
 8003068:	b003      	add	sp, #12
 800306a:	bd30      	pop	{r4, r5, pc}
 800306c:	20000140 	.word	0x20000140

08003070 <sbrk_aligned>:
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	4e0e      	ldr	r6, [pc, #56]	; (80030ac <sbrk_aligned+0x3c>)
 8003074:	460c      	mov	r4, r1
 8003076:	6831      	ldr	r1, [r6, #0]
 8003078:	4605      	mov	r5, r0
 800307a:	b911      	cbnz	r1, 8003082 <sbrk_aligned+0x12>
 800307c:	f000 f8bc 	bl	80031f8 <_sbrk_r>
 8003080:	6030      	str	r0, [r6, #0]
 8003082:	4621      	mov	r1, r4
 8003084:	4628      	mov	r0, r5
 8003086:	f000 f8b7 	bl	80031f8 <_sbrk_r>
 800308a:	1c43      	adds	r3, r0, #1
 800308c:	d00a      	beq.n	80030a4 <sbrk_aligned+0x34>
 800308e:	1cc4      	adds	r4, r0, #3
 8003090:	f024 0403 	bic.w	r4, r4, #3
 8003094:	42a0      	cmp	r0, r4
 8003096:	d007      	beq.n	80030a8 <sbrk_aligned+0x38>
 8003098:	1a21      	subs	r1, r4, r0
 800309a:	4628      	mov	r0, r5
 800309c:	f000 f8ac 	bl	80031f8 <_sbrk_r>
 80030a0:	3001      	adds	r0, #1
 80030a2:	d101      	bne.n	80030a8 <sbrk_aligned+0x38>
 80030a4:	f04f 34ff 	mov.w	r4, #4294967295
 80030a8:	4620      	mov	r0, r4
 80030aa:	bd70      	pop	{r4, r5, r6, pc}
 80030ac:	20000144 	.word	0x20000144

080030b0 <_malloc_r>:
 80030b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030b4:	1ccd      	adds	r5, r1, #3
 80030b6:	f025 0503 	bic.w	r5, r5, #3
 80030ba:	3508      	adds	r5, #8
 80030bc:	2d0c      	cmp	r5, #12
 80030be:	bf38      	it	cc
 80030c0:	250c      	movcc	r5, #12
 80030c2:	2d00      	cmp	r5, #0
 80030c4:	4607      	mov	r7, r0
 80030c6:	db01      	blt.n	80030cc <_malloc_r+0x1c>
 80030c8:	42a9      	cmp	r1, r5
 80030ca:	d905      	bls.n	80030d8 <_malloc_r+0x28>
 80030cc:	230c      	movs	r3, #12
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	2600      	movs	r6, #0
 80030d2:	4630      	mov	r0, r6
 80030d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030d8:	4e2e      	ldr	r6, [pc, #184]	; (8003194 <_malloc_r+0xe4>)
 80030da:	f000 f89d 	bl	8003218 <__malloc_lock>
 80030de:	6833      	ldr	r3, [r6, #0]
 80030e0:	461c      	mov	r4, r3
 80030e2:	bb34      	cbnz	r4, 8003132 <_malloc_r+0x82>
 80030e4:	4629      	mov	r1, r5
 80030e6:	4638      	mov	r0, r7
 80030e8:	f7ff ffc2 	bl	8003070 <sbrk_aligned>
 80030ec:	1c43      	adds	r3, r0, #1
 80030ee:	4604      	mov	r4, r0
 80030f0:	d14d      	bne.n	800318e <_malloc_r+0xde>
 80030f2:	6834      	ldr	r4, [r6, #0]
 80030f4:	4626      	mov	r6, r4
 80030f6:	2e00      	cmp	r6, #0
 80030f8:	d140      	bne.n	800317c <_malloc_r+0xcc>
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	4631      	mov	r1, r6
 80030fe:	4638      	mov	r0, r7
 8003100:	eb04 0803 	add.w	r8, r4, r3
 8003104:	f000 f878 	bl	80031f8 <_sbrk_r>
 8003108:	4580      	cmp	r8, r0
 800310a:	d13a      	bne.n	8003182 <_malloc_r+0xd2>
 800310c:	6821      	ldr	r1, [r4, #0]
 800310e:	3503      	adds	r5, #3
 8003110:	1a6d      	subs	r5, r5, r1
 8003112:	f025 0503 	bic.w	r5, r5, #3
 8003116:	3508      	adds	r5, #8
 8003118:	2d0c      	cmp	r5, #12
 800311a:	bf38      	it	cc
 800311c:	250c      	movcc	r5, #12
 800311e:	4629      	mov	r1, r5
 8003120:	4638      	mov	r0, r7
 8003122:	f7ff ffa5 	bl	8003070 <sbrk_aligned>
 8003126:	3001      	adds	r0, #1
 8003128:	d02b      	beq.n	8003182 <_malloc_r+0xd2>
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	442b      	add	r3, r5
 800312e:	6023      	str	r3, [r4, #0]
 8003130:	e00e      	b.n	8003150 <_malloc_r+0xa0>
 8003132:	6822      	ldr	r2, [r4, #0]
 8003134:	1b52      	subs	r2, r2, r5
 8003136:	d41e      	bmi.n	8003176 <_malloc_r+0xc6>
 8003138:	2a0b      	cmp	r2, #11
 800313a:	d916      	bls.n	800316a <_malloc_r+0xba>
 800313c:	1961      	adds	r1, r4, r5
 800313e:	42a3      	cmp	r3, r4
 8003140:	6025      	str	r5, [r4, #0]
 8003142:	bf18      	it	ne
 8003144:	6059      	strne	r1, [r3, #4]
 8003146:	6863      	ldr	r3, [r4, #4]
 8003148:	bf08      	it	eq
 800314a:	6031      	streq	r1, [r6, #0]
 800314c:	5162      	str	r2, [r4, r5]
 800314e:	604b      	str	r3, [r1, #4]
 8003150:	4638      	mov	r0, r7
 8003152:	f104 060b 	add.w	r6, r4, #11
 8003156:	f000 f865 	bl	8003224 <__malloc_unlock>
 800315a:	f026 0607 	bic.w	r6, r6, #7
 800315e:	1d23      	adds	r3, r4, #4
 8003160:	1af2      	subs	r2, r6, r3
 8003162:	d0b6      	beq.n	80030d2 <_malloc_r+0x22>
 8003164:	1b9b      	subs	r3, r3, r6
 8003166:	50a3      	str	r3, [r4, r2]
 8003168:	e7b3      	b.n	80030d2 <_malloc_r+0x22>
 800316a:	6862      	ldr	r2, [r4, #4]
 800316c:	42a3      	cmp	r3, r4
 800316e:	bf0c      	ite	eq
 8003170:	6032      	streq	r2, [r6, #0]
 8003172:	605a      	strne	r2, [r3, #4]
 8003174:	e7ec      	b.n	8003150 <_malloc_r+0xa0>
 8003176:	4623      	mov	r3, r4
 8003178:	6864      	ldr	r4, [r4, #4]
 800317a:	e7b2      	b.n	80030e2 <_malloc_r+0x32>
 800317c:	4634      	mov	r4, r6
 800317e:	6876      	ldr	r6, [r6, #4]
 8003180:	e7b9      	b.n	80030f6 <_malloc_r+0x46>
 8003182:	230c      	movs	r3, #12
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	4638      	mov	r0, r7
 8003188:	f000 f84c 	bl	8003224 <__malloc_unlock>
 800318c:	e7a1      	b.n	80030d2 <_malloc_r+0x22>
 800318e:	6025      	str	r5, [r4, #0]
 8003190:	e7de      	b.n	8003150 <_malloc_r+0xa0>
 8003192:	bf00      	nop
 8003194:	20000140 	.word	0x20000140

08003198 <_realloc_r>:
 8003198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800319c:	4680      	mov	r8, r0
 800319e:	4614      	mov	r4, r2
 80031a0:	460e      	mov	r6, r1
 80031a2:	b921      	cbnz	r1, 80031ae <_realloc_r+0x16>
 80031a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031a8:	4611      	mov	r1, r2
 80031aa:	f7ff bf81 	b.w	80030b0 <_malloc_r>
 80031ae:	b92a      	cbnz	r2, 80031bc <_realloc_r+0x24>
 80031b0:	f7ff ff12 	bl	8002fd8 <_free_r>
 80031b4:	4625      	mov	r5, r4
 80031b6:	4628      	mov	r0, r5
 80031b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031bc:	f000 f838 	bl	8003230 <_malloc_usable_size_r>
 80031c0:	4284      	cmp	r4, r0
 80031c2:	4607      	mov	r7, r0
 80031c4:	d802      	bhi.n	80031cc <_realloc_r+0x34>
 80031c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80031ca:	d812      	bhi.n	80031f2 <_realloc_r+0x5a>
 80031cc:	4621      	mov	r1, r4
 80031ce:	4640      	mov	r0, r8
 80031d0:	f7ff ff6e 	bl	80030b0 <_malloc_r>
 80031d4:	4605      	mov	r5, r0
 80031d6:	2800      	cmp	r0, #0
 80031d8:	d0ed      	beq.n	80031b6 <_realloc_r+0x1e>
 80031da:	42bc      	cmp	r4, r7
 80031dc:	4622      	mov	r2, r4
 80031de:	4631      	mov	r1, r6
 80031e0:	bf28      	it	cs
 80031e2:	463a      	movcs	r2, r7
 80031e4:	f7ff fed0 	bl	8002f88 <memcpy>
 80031e8:	4631      	mov	r1, r6
 80031ea:	4640      	mov	r0, r8
 80031ec:	f7ff fef4 	bl	8002fd8 <_free_r>
 80031f0:	e7e1      	b.n	80031b6 <_realloc_r+0x1e>
 80031f2:	4635      	mov	r5, r6
 80031f4:	e7df      	b.n	80031b6 <_realloc_r+0x1e>
	...

080031f8 <_sbrk_r>:
 80031f8:	b538      	push	{r3, r4, r5, lr}
 80031fa:	4d06      	ldr	r5, [pc, #24]	; (8003214 <_sbrk_r+0x1c>)
 80031fc:	2300      	movs	r3, #0
 80031fe:	4604      	mov	r4, r0
 8003200:	4608      	mov	r0, r1
 8003202:	602b      	str	r3, [r5, #0]
 8003204:	f7fd fd52 	bl	8000cac <_sbrk>
 8003208:	1c43      	adds	r3, r0, #1
 800320a:	d102      	bne.n	8003212 <_sbrk_r+0x1a>
 800320c:	682b      	ldr	r3, [r5, #0]
 800320e:	b103      	cbz	r3, 8003212 <_sbrk_r+0x1a>
 8003210:	6023      	str	r3, [r4, #0]
 8003212:	bd38      	pop	{r3, r4, r5, pc}
 8003214:	20000148 	.word	0x20000148

08003218 <__malloc_lock>:
 8003218:	4801      	ldr	r0, [pc, #4]	; (8003220 <__malloc_lock+0x8>)
 800321a:	f000 b811 	b.w	8003240 <__retarget_lock_acquire_recursive>
 800321e:	bf00      	nop
 8003220:	2000014c 	.word	0x2000014c

08003224 <__malloc_unlock>:
 8003224:	4801      	ldr	r0, [pc, #4]	; (800322c <__malloc_unlock+0x8>)
 8003226:	f000 b80c 	b.w	8003242 <__retarget_lock_release_recursive>
 800322a:	bf00      	nop
 800322c:	2000014c 	.word	0x2000014c

08003230 <_malloc_usable_size_r>:
 8003230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003234:	1f18      	subs	r0, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	bfbc      	itt	lt
 800323a:	580b      	ldrlt	r3, [r1, r0]
 800323c:	18c0      	addlt	r0, r0, r3
 800323e:	4770      	bx	lr

08003240 <__retarget_lock_acquire_recursive>:
 8003240:	4770      	bx	lr

08003242 <__retarget_lock_release_recursive>:
 8003242:	4770      	bx	lr

08003244 <_init>:
 8003244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003246:	bf00      	nop
 8003248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324a:	bc08      	pop	{r3}
 800324c:	469e      	mov	lr, r3
 800324e:	4770      	bx	lr

08003250 <_fini>:
 8003250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003252:	bf00      	nop
 8003254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003256:	bc08      	pop	{r3}
 8003258:	469e      	mov	lr, r3
 800325a:	4770      	bx	lr
