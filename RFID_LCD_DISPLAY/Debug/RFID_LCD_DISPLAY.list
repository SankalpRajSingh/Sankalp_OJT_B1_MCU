
RFID_LCD_DISPLAY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001db0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001f48  08001f48  00011f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f68  08001f68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001f68  08001f68  00011f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f70  08001f70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f70  08001f70  00011f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f74  08001f74  00011f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  08001f84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001f84  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000879e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015f5  00000000  00000000  000287da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  00029dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  0002a4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000149a4  00000000  00000000  0002ab08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000084b5  00000000  00000000  0003f4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081a95  00000000  00000000  00047961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c93f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b0c  00000000  00000000  000c9448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001f30 	.word	0x08001f30

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001f30 	.word	0x08001f30

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <LCD_string>:
//			LCD_command(1);				//clear screen
//			delay(500);
//		}
//}
void LCD_string(char str[])
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	for(int i=0;str[i]!='\0';i++)
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	e009      	b.n	80004fe <LCD_string+0x22>
	{
		LCD_data(str[i]);
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4413      	add	r3, r2
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f8c8 	bl	8000688 <LCD_data>
	for(int i=0;str[i]!='\0';i++)
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3301      	adds	r3, #1
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	4413      	add	r3, r2
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1ef      	bne.n	80004ea <LCD_string+0xe>
	}

}
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <LCD_init>:
/* initialize GPIOA/C then initialize LCD controller */
void LCD_init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	PORTS_init();
 8000518:	f000 f82e 	bl	8000578 <PORTS_init>
	delay(20); /* LCD controller reset sequence */
 800051c:	2014      	movs	r0, #20
 800051e:	f000 f8ce 	bl	80006be <delay>
	LCD_nibble_write(0x30, 0);
 8000522:	2100      	movs	r1, #0
 8000524:	2030      	movs	r0, #48	; 0x30
 8000526:	f000 f85d 	bl	80005e4 <LCD_nibble_write>
	delay(5);
 800052a:	2005      	movs	r0, #5
 800052c:	f000 f8c7 	bl	80006be <delay>
	LCD_nibble_write(0x30, 0);
 8000530:	2100      	movs	r1, #0
 8000532:	2030      	movs	r0, #48	; 0x30
 8000534:	f000 f856 	bl	80005e4 <LCD_nibble_write>
	delay(1);
 8000538:	2001      	movs	r0, #1
 800053a:	f000 f8c0 	bl	80006be <delay>
	LCD_nibble_write(0x30, 0);
 800053e:	2100      	movs	r1, #0
 8000540:	2030      	movs	r0, #48	; 0x30
 8000542:	f000 f84f 	bl	80005e4 <LCD_nibble_write>
	delay(1);
 8000546:	2001      	movs	r0, #1
 8000548:	f000 f8b9 	bl	80006be <delay>
	LCD_nibble_write(0x20, 0); /* use 4-bit data mode */
 800054c:	2100      	movs	r1, #0
 800054e:	2020      	movs	r0, #32
 8000550:	f000 f848 	bl	80005e4 <LCD_nibble_write>
	delay(1);
 8000554:	2001      	movs	r0, #1
 8000556:	f000 f8b2 	bl	80006be <delay>
	LCD_command(0x28); /* set 4-bit data, 2-line, 5x7 font */
 800055a:	2028      	movs	r0, #40	; 0x28
 800055c:	f000 f872 	bl	8000644 <LCD_command>
	LCD_command(0x06); /* move cursor right */
 8000560:	2006      	movs	r0, #6
 8000562:	f000 f86f 	bl	8000644 <LCD_command>
	LCD_command(0x01); /* clear screen, move cursor to home */
 8000566:	2001      	movs	r0, #1
 8000568:	f000 f86c 	bl	8000644 <LCD_command>
	LCD_command(0x0F); /* turn on display, cursor blinking */
 800056c:	200f      	movs	r0, #15
 800056e:	f000 f869 	bl	8000644 <LCD_command>
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <PORTS_init>:

void PORTS_init(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
		RCC->AHB1ENR |= 0x1;                     // Enable AHB1 BUS which is connected to PA5 via GPIO port A
 800057c:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <PORTS_init+0x60>)
 800057e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000580:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <PORTS_init+0x60>)
 8000582:	f043 0301 	orr.w	r3, r3, #1
 8000586:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= 0x4;					// Enanle AHB1 bus conneted to GPIO port C
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <PORTS_init+0x60>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058c:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <PORTS_init+0x60>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6313      	str	r3, [r2, #48]	; 0x30
	//	RCC->AHB1ENR |=0x2;						//Enanle AHB1 bus conneted to GPIO port B
		GPIOA->MODER &=~0xFC00;                 //clear all pin PA5 PA6 PA7
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <PORTS_init+0x64>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a10      	ldr	r2, [pc, #64]	; (80005dc <PORTS_init+0x64>)
 800059a:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800059e:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |=0x5400; 				//set all pin 5,6,7 as o/p mode
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <PORTS_init+0x64>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <PORTS_init+0x64>)
 80005a6:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 80005aa:	6013      	str	r3, [r2, #0]
		GPIOA->BSRR = 0xC00000;	//(3<<22)			//turn off EN and RW pin
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <PORTS_init+0x64>)
 80005ae:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80005b2:	619a      	str	r2, [r3, #24]
		GPIOC->MODER &=~0xFF00;				// CLEAR all pin 4-7 of port C
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <PORTS_init+0x68>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <PORTS_init+0x68>)
 80005ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80005be:	6013      	str	r3, [r2, #0]
		GPIOC->MODER |= 0x5500;				// set all pin 4-7 as o/p mode
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <PORTS_init+0x68>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <PORTS_init+0x68>)
 80005c6:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80005ca:	6013      	str	r3, [r2, #0]


}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40020000 	.word	0x40020000
 80005e0:	40020800 	.word	0x40020800

080005e4 <LCD_nibble_write>:

void LCD_nibble_write(char data, unsigned char control)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	460a      	mov	r2, r1
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	4613      	mov	r3, r2
 80005f2:	71bb      	strb	r3, [r7, #6]
	/*populate data bits */
	GPIOC->BSRR = 0xF00000; 					/* clear data bits */
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <LCD_nibble_write+0x58>)
 80005f6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80005fa:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = data & 0xF0; 					/* set data bits 4-7 */
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	4a0f      	ldr	r2, [pc, #60]	; (800063c <LCD_nibble_write+0x58>)
 8000600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000604:	6193      	str	r3, [r2, #24]
	/* set R/S bit */
	if (control & RS)
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	f003 0320 	and.w	r3, r3, #32
 800060c:	2b00      	cmp	r3, #0
 800060e:	d003      	beq.n	8000618 <LCD_nibble_write+0x34>
		GPIOA->BSRR = RS;
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <LCD_nibble_write+0x5c>)
 8000612:	2220      	movs	r2, #32
 8000614:	619a      	str	r2, [r3, #24]
 8000616:	e003      	b.n	8000620 <LCD_nibble_write+0x3c>
	else
		GPIOA->BSRR = RS << 16;	//(1<<21)  //
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <LCD_nibble_write+0x5c>)
 800061a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800061e:	619a      	str	r2, [r3, #24]
	/* pulse E */
	GPIOA->BSRR = EN;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <LCD_nibble_write+0x5c>)
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	619a      	str	r2, [r3, #24]
	delay(0);
 8000626:	2000      	movs	r0, #0
 8000628:	f000 f849 	bl	80006be <delay>
	GPIOA->BSRR = EN << 16;
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <LCD_nibble_write+0x5c>)
 800062e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000632:	619a      	str	r2, [r3, #24]
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40020800 	.word	0x40020800
 8000640:	40020000 	.word	0x40020000

08000644 <LCD_command>:
void LCD_command(unsigned char command)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write(command & 0xF0, 0); 			/* upper nibble first */
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f023 030f 	bic.w	r3, r3, #15
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffc3 	bl	80005e4 <LCD_nibble_write>
	LCD_nibble_write(command << 4, 0); 				/* then lower nibble */
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ffbc 	bl	80005e4 <LCD_nibble_write>
	if (command < 4)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b03      	cmp	r3, #3
 8000670:	d803      	bhi.n	800067a <LCD_command+0x36>
		delay(2); 									/* command 1 and 2 needs up to 1.64ms */
 8000672:	2002      	movs	r0, #2
 8000674:	f000 f823 	bl	80006be <delay>
	else
		delay(1); 									/* all others 40 us */

}
 8000678:	e002      	b.n	8000680 <LCD_command+0x3c>
		delay(1); 									/* all others 40 us */
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f81f 	bl	80006be <delay>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <LCD_data>:
void LCD_data(char data)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write(data & 0xF0, RS); 				/* upper nibble first */
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f023 030f 	bic.w	r3, r3, #15
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2120      	movs	r1, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ffa1 	bl	80005e4 <LCD_nibble_write>
	LCD_nibble_write(data << 4, RS); 				/* then lower nibble */
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	011b      	lsls	r3, r3, #4
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2120      	movs	r1, #32
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff9a 	bl	80005e4 <LCD_nibble_write>
	delay(100);
 80006b0:	2064      	movs	r0, #100	; 0x64
 80006b2:	f000 f804 	bl	80006be <delay>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <delay>:

void delay(int seconds)
{
 80006be:	b480      	push	{r7}
 80006c0:	b085      	sub	sp, #20
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]

	for(;seconds>0;seconds--)
 80006c6:	e00d      	b.n	80006e4 <delay+0x26>
	{
		for(int count1=0;count1<3000;count1++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	e002      	b.n	80006d4 <delay+0x16>
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80006da:	4293      	cmp	r3, r2
 80006dc:	ddf7      	ble.n	80006ce <delay+0x10>
	for(;seconds>0;seconds--)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3b01      	subs	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	dcee      	bgt.n	80006c8 <delay+0xa>
		{

		}
	}
}
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fe:	f000 f937 	bl	8000970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000702:	f000 f839 	bl	8000778 <SystemClock_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  LCD_init();
 8000706:	f7ff ff05 	bl	8000514 <LCD_init>
  delay(10);
 800070a:	200a      	movs	r0, #10
 800070c:	f7ff ffd7 	bl	80006be <delay>
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)==0)
 8000710:	2101      	movs	r1, #1
 8000712:	4816      	ldr	r0, [pc, #88]	; (800076c <main+0x74>)
 8000714:	f000 fb39 	bl	8000d8a <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d11e      	bne.n	800075c <main+0x64>
  	  {
  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000724:	4812      	ldr	r0, [pc, #72]	; (8000770 <main+0x78>)
 8000726:	f000 fb48 	bl	8000dba <HAL_GPIO_WritePin>
  		  HAL_Delay(1000);
 800072a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800072e:	f000 f991 	bl	8000a54 <HAL_Delay>
  		  char str[]={"Hey sankalp!"};
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <main+0x7c>)
 8000734:	463c      	mov	r4, r7
 8000736:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000738:	c407      	stmia	r4!, {r0, r1, r2}
 800073a:	7023      	strb	r3, [r4, #0]
//  		  strcpy(str,USER_DATA);
  		  LCD_string(str);
 800073c:	463b      	mov	r3, r7
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fecc 	bl	80004dc <LCD_string>
  		  delay(500);
 8000744:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000748:	f7ff ffb9 	bl	80006be <delay>
  		  LCD_command(0xC0);
 800074c:	20c0      	movs	r0, #192	; 0xc0
 800074e:	f7ff ff79 	bl	8000644 <LCD_command>
//  		  strcpy(str1,Data_Buffer);
//  		  LCD_string(str1);
//  		  LCD_command(1);
  		  delay(500);
 8000752:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000756:	f7ff ffb2 	bl	80006be <delay>
 800075a:	e7d9      	b.n	8000710 <main+0x18>
  	  }
  	  else
  	  {
  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000762:	4803      	ldr	r0, [pc, #12]	; (8000770 <main+0x78>)
 8000764:	f000 fb29 	bl	8000dba <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)==0)
 8000768:	e7d2      	b.n	8000710 <main+0x18>
 800076a:	bf00      	nop
 800076c:	40020800 	.word	0x40020800
 8000770:	40020400 	.word	0x40020400
 8000774:	08001f48 	.word	0x08001f48

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fbca 	bl	8001f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <SystemClock_Config+0xb4>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a21      	ldr	r2, [pc, #132]	; (800082c <SystemClock_Config+0xb4>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <SystemClock_Config+0xb4>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <SystemClock_Config+0xb8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <SystemClock_Config+0xb8>)
 80007c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <SystemClock_Config+0xb8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007dc:	2310      	movs	r3, #16
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 faff 	bl	8000dec <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007f4:	f000 f81e 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fd62 	bl	80012dc <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800081e:	f000 f809 	bl	8000834 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	; 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>
	...

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <HAL_MspInit+0x4c>)
 8000850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000854:	6453      	str	r3, [r2, #68]	; 0x44
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_MspInit+0x4c>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 f89a 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008e8:	4802      	ldr	r0, [pc, #8]	; (80008f4 <USART2_IRQHandler+0x10>)
 80008ea:	f000 fea3 	bl	8001634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000028 	.word	0x20000028

080008f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <SystemInit+0x20>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <SystemInit+0x20>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800091c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000922:	490e      	ldr	r1, [pc, #56]	; (800095c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000938:	4c0b      	ldr	r4, [pc, #44]	; (8000968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000946:	f7ff ffd7 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094a:	f001 fac5 	bl	8001ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094e:	f7ff fed3 	bl	80006f8 <main>
  bx  lr    
 8000952:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000960:	08001f78 	.word	0x08001f78
  ldr r2, =_sbss
 8000964:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000968:	20000070 	.word	0x20000070

0800096c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <HAL_Init+0x40>)
 800097a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_Init+0x40>)
 8000986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_Init+0x40>)
 8000992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f931 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	200f      	movs	r0, #15
 80009a0:	f000 f808 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff ff4c 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023c00 	.word	0x40023c00

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x54>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f93b 	bl	8000c4e <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e00e      	b.n	8000a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d80a      	bhi.n	80009fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f000 f911 	bl	8000c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <HAL_InitTick+0x5c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008
 8000a38:	2000006c 	.word	0x2000006c

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	2000006c 	.word	0x2000006c

08000a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff ffee 	bl	8000a3c <HAL_GetTick>
 8000a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d005      	beq.n	8000a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_Delay+0x44>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a7a:	bf00      	nop
 8000a7c:	f7ff ffde 	bl	8000a3c <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d8f7      	bhi.n	8000a7c <HAL_Delay+0x28>
  {
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	; (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	; (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bcc:	d301      	bcc.n	8000bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00f      	b.n	8000bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <SysTick_Config+0x40>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bda:	210f      	movs	r1, #15
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f7ff ff8e 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <SysTick_Config+0x40>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <SysTick_Config+0x40>)
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff47 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c28:	f7ff ff5c 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff ff8e 	bl	8000b54 <NVIC_EncodePriority>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff5d 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffb0 	bl	8000bbc <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b084      	sub	sp, #16
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff fee2 	bl	8000a3c <HAL_GetTick>
 8000c78:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d008      	beq.n	8000c98 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e052      	b.n	8000d3e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f022 0216 	bic.w	r2, r2, #22
 8000ca6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	695a      	ldr	r2, [r3, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cb6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d103      	bne.n	8000cc8 <HAL_DMA_Abort+0x62>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d007      	beq.n	8000cd8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0208 	bic.w	r2, r2, #8
 8000cd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f022 0201 	bic.w	r2, r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ce8:	e013      	b.n	8000d12 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000cea:	f7ff fea7 	bl	8000a3c <HAL_GetTick>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	2b05      	cmp	r3, #5
 8000cf6:	d90c      	bls.n	8000d12 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2220      	movs	r2, #32
 8000cfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2203      	movs	r2, #3
 8000d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e015      	b.n	8000d3e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1e4      	bne.n	8000cea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d24:	223f      	movs	r2, #63	; 0x3f
 8000d26:	409a      	lsls	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d004      	beq.n	8000d64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e00c      	b.n	8000d7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2205      	movs	r2, #5
 8000d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0201 	bic.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b085      	sub	sp, #20
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	460b      	mov	r3, r1
 8000d94:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	691a      	ldr	r2, [r3, #16]
 8000d9a:	887b      	ldrh	r3, [r7, #2]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000da2:	2301      	movs	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	e001      	b.n	8000dac <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	807b      	strh	r3, [r7, #2]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dca:	787b      	ldrb	r3, [r7, #1]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dd0:	887a      	ldrh	r2, [r7, #2]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000dd6:	e003      	b.n	8000de0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000dd8:	887b      	ldrh	r3, [r7, #2]
 8000dda:	041a      	lsls	r2, r3, #16
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	619a      	str	r2, [r3, #24]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e267      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d075      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e0a:	4b88      	ldr	r3, [pc, #544]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f003 030c 	and.w	r3, r3, #12
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	d00c      	beq.n	8000e30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e16:	4b85      	ldr	r3, [pc, #532]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e1e:	2b08      	cmp	r3, #8
 8000e20:	d112      	bne.n	8000e48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e22:	4b82      	ldr	r3, [pc, #520]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e2e:	d10b      	bne.n	8000e48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e30:	4b7e      	ldr	r3, [pc, #504]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d05b      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x108>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d157      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e242      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e50:	d106      	bne.n	8000e60 <HAL_RCC_OscConfig+0x74>
 8000e52:	4b76      	ldr	r3, [pc, #472]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a75      	ldr	r2, [pc, #468]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e5c:	6013      	str	r3, [r2, #0]
 8000e5e:	e01d      	b.n	8000e9c <HAL_RCC_OscConfig+0xb0>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e68:	d10c      	bne.n	8000e84 <HAL_RCC_OscConfig+0x98>
 8000e6a:	4b70      	ldr	r3, [pc, #448]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a6f      	ldr	r2, [pc, #444]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	4b6d      	ldr	r3, [pc, #436]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a6c      	ldr	r2, [pc, #432]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e00b      	b.n	8000e9c <HAL_RCC_OscConfig+0xb0>
 8000e84:	4b69      	ldr	r3, [pc, #420]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a68      	ldr	r2, [pc, #416]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	4b66      	ldr	r3, [pc, #408]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a65      	ldr	r2, [pc, #404]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d013      	beq.n	8000ecc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fdca 	bl	8000a3c <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eac:	f7ff fdc6 	bl	8000a3c <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b64      	cmp	r3, #100	; 0x64
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e207      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ebe:	4b5b      	ldr	r3, [pc, #364]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0f0      	beq.n	8000eac <HAL_RCC_OscConfig+0xc0>
 8000eca:	e014      	b.n	8000ef6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fdb6 	bl	8000a3c <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed4:	f7ff fdb2 	bl	8000a3c <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b64      	cmp	r3, #100	; 0x64
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e1f3      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee6:	4b51      	ldr	r3, [pc, #324]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f0      	bne.n	8000ed4 <HAL_RCC_OscConfig+0xe8>
 8000ef2:	e000      	b.n	8000ef6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d063      	beq.n	8000fca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f02:	4b4a      	ldr	r3, [pc, #296]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00b      	beq.n	8000f26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f0e:	4b47      	ldr	r3, [pc, #284]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d11c      	bne.n	8000f54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f1a:	4b44      	ldr	r3, [pc, #272]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d116      	bne.n	8000f54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f26:	4b41      	ldr	r3, [pc, #260]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d005      	beq.n	8000f3e <HAL_RCC_OscConfig+0x152>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d001      	beq.n	8000f3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e1c7      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3e:	4b3b      	ldr	r3, [pc, #236]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	4937      	ldr	r1, [pc, #220]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f52:	e03a      	b.n	8000fca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d020      	beq.n	8000f9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f5c:	4b34      	ldr	r3, [pc, #208]	; (8001030 <HAL_RCC_OscConfig+0x244>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f62:	f7ff fd6b 	bl	8000a3c <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f6a:	f7ff fd67 	bl	8000a3c <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e1a8      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f7c:	4b2b      	ldr	r3, [pc, #172]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f0      	beq.n	8000f6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f88:	4b28      	ldr	r3, [pc, #160]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	4925      	ldr	r1, [pc, #148]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	600b      	str	r3, [r1, #0]
 8000f9c:	e015      	b.n	8000fca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <HAL_RCC_OscConfig+0x244>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fd4a 	bl	8000a3c <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fac:	f7ff fd46 	bl	8000a3c <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e187      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f0      	bne.n	8000fac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d036      	beq.n	8001044 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d016      	beq.n	800100c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_RCC_OscConfig+0x248>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fe4:	f7ff fd2a 	bl	8000a3c <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fec:	f7ff fd26 	bl	8000a3c <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e167      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <HAL_RCC_OscConfig+0x240>)
 8001000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f0      	beq.n	8000fec <HAL_RCC_OscConfig+0x200>
 800100a:	e01b      	b.n	8001044 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_RCC_OscConfig+0x248>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001012:	f7ff fd13 	bl	8000a3c <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001018:	e00e      	b.n	8001038 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800101a:	f7ff fd0f 	bl	8000a3c <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d907      	bls.n	8001038 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e150      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
 800102c:	40023800 	.word	0x40023800
 8001030:	42470000 	.word	0x42470000
 8001034:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001038:	4b88      	ldr	r3, [pc, #544]	; (800125c <HAL_RCC_OscConfig+0x470>)
 800103a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1ea      	bne.n	800101a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 8097 	beq.w	8001180 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001056:	4b81      	ldr	r3, [pc, #516]	; (800125c <HAL_RCC_OscConfig+0x470>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10f      	bne.n	8001082 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	4b7d      	ldr	r3, [pc, #500]	; (800125c <HAL_RCC_OscConfig+0x470>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	4a7c      	ldr	r2, [pc, #496]	; (800125c <HAL_RCC_OscConfig+0x470>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001070:	6413      	str	r3, [r2, #64]	; 0x40
 8001072:	4b7a      	ldr	r3, [pc, #488]	; (800125c <HAL_RCC_OscConfig+0x470>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800107e:	2301      	movs	r3, #1
 8001080:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001082:	4b77      	ldr	r3, [pc, #476]	; (8001260 <HAL_RCC_OscConfig+0x474>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108a:	2b00      	cmp	r3, #0
 800108c:	d118      	bne.n	80010c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800108e:	4b74      	ldr	r3, [pc, #464]	; (8001260 <HAL_RCC_OscConfig+0x474>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a73      	ldr	r2, [pc, #460]	; (8001260 <HAL_RCC_OscConfig+0x474>)
 8001094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800109a:	f7ff fccf 	bl	8000a3c <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010a2:	f7ff fccb 	bl	8000a3c <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e10c      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b4:	4b6a      	ldr	r3, [pc, #424]	; (8001260 <HAL_RCC_OscConfig+0x474>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0f0      	beq.n	80010a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d106      	bne.n	80010d6 <HAL_RCC_OscConfig+0x2ea>
 80010c8:	4b64      	ldr	r3, [pc, #400]	; (800125c <HAL_RCC_OscConfig+0x470>)
 80010ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010cc:	4a63      	ldr	r2, [pc, #396]	; (800125c <HAL_RCC_OscConfig+0x470>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6713      	str	r3, [r2, #112]	; 0x70
 80010d4:	e01c      	b.n	8001110 <HAL_RCC_OscConfig+0x324>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2b05      	cmp	r3, #5
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x30c>
 80010de:	4b5f      	ldr	r3, [pc, #380]	; (800125c <HAL_RCC_OscConfig+0x470>)
 80010e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010e2:	4a5e      	ldr	r2, [pc, #376]	; (800125c <HAL_RCC_OscConfig+0x470>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6713      	str	r3, [r2, #112]	; 0x70
 80010ea:	4b5c      	ldr	r3, [pc, #368]	; (800125c <HAL_RCC_OscConfig+0x470>)
 80010ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010ee:	4a5b      	ldr	r2, [pc, #364]	; (800125c <HAL_RCC_OscConfig+0x470>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6713      	str	r3, [r2, #112]	; 0x70
 80010f6:	e00b      	b.n	8001110 <HAL_RCC_OscConfig+0x324>
 80010f8:	4b58      	ldr	r3, [pc, #352]	; (800125c <HAL_RCC_OscConfig+0x470>)
 80010fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010fc:	4a57      	ldr	r2, [pc, #348]	; (800125c <HAL_RCC_OscConfig+0x470>)
 80010fe:	f023 0301 	bic.w	r3, r3, #1
 8001102:	6713      	str	r3, [r2, #112]	; 0x70
 8001104:	4b55      	ldr	r3, [pc, #340]	; (800125c <HAL_RCC_OscConfig+0x470>)
 8001106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001108:	4a54      	ldr	r2, [pc, #336]	; (800125c <HAL_RCC_OscConfig+0x470>)
 800110a:	f023 0304 	bic.w	r3, r3, #4
 800110e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d015      	beq.n	8001144 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001118:	f7ff fc90 	bl	8000a3c <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800111e:	e00a      	b.n	8001136 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001120:	f7ff fc8c 	bl	8000a3c <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	f241 3288 	movw	r2, #5000	; 0x1388
 800112e:	4293      	cmp	r3, r2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e0cb      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001136:	4b49      	ldr	r3, [pc, #292]	; (800125c <HAL_RCC_OscConfig+0x470>)
 8001138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0ee      	beq.n	8001120 <HAL_RCC_OscConfig+0x334>
 8001142:	e014      	b.n	800116e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001144:	f7ff fc7a 	bl	8000a3c <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800114a:	e00a      	b.n	8001162 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800114c:	f7ff fc76 	bl	8000a3c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	f241 3288 	movw	r2, #5000	; 0x1388
 800115a:	4293      	cmp	r3, r2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e0b5      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001162:	4b3e      	ldr	r3, [pc, #248]	; (800125c <HAL_RCC_OscConfig+0x470>)
 8001164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1ee      	bne.n	800114c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800116e:	7dfb      	ldrb	r3, [r7, #23]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d105      	bne.n	8001180 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001174:	4b39      	ldr	r3, [pc, #228]	; (800125c <HAL_RCC_OscConfig+0x470>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	4a38      	ldr	r2, [pc, #224]	; (800125c <HAL_RCC_OscConfig+0x470>)
 800117a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800117e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80a1 	beq.w	80012cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800118a:	4b34      	ldr	r3, [pc, #208]	; (800125c <HAL_RCC_OscConfig+0x470>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b08      	cmp	r3, #8
 8001194:	d05c      	beq.n	8001250 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d141      	bne.n	8001222 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119e:	4b31      	ldr	r3, [pc, #196]	; (8001264 <HAL_RCC_OscConfig+0x478>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fc4a 	bl	8000a3c <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ac:	f7ff fc46 	bl	8000a3c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e087      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <HAL_RCC_OscConfig+0x470>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69da      	ldr	r2, [r3, #28]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	431a      	orrs	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	019b      	lsls	r3, r3, #6
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e0:	085b      	lsrs	r3, r3, #1
 80011e2:	3b01      	subs	r3, #1
 80011e4:	041b      	lsls	r3, r3, #16
 80011e6:	431a      	orrs	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	061b      	lsls	r3, r3, #24
 80011ee:	491b      	ldr	r1, [pc, #108]	; (800125c <HAL_RCC_OscConfig+0x470>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_RCC_OscConfig+0x478>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fa:	f7ff fc1f 	bl	8000a3c <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001202:	f7ff fc1b 	bl	8000a3c <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e05c      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_RCC_OscConfig+0x470>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x416>
 8001220:	e054      	b.n	80012cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_RCC_OscConfig+0x478>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fc08 	bl	8000a3c <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001230:	f7ff fc04 	bl	8000a3c <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e045      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_RCC_OscConfig+0x470>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x444>
 800124e:	e03d      	b.n	80012cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d107      	bne.n	8001268 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e038      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
 800125c:	40023800 	.word	0x40023800
 8001260:	40007000 	.word	0x40007000
 8001264:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <HAL_RCC_OscConfig+0x4ec>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d028      	beq.n	80012c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001280:	429a      	cmp	r2, r3
 8001282:	d121      	bne.n	80012c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800128e:	429a      	cmp	r2, r3
 8001290:	d11a      	bne.n	80012c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001298:	4013      	ands	r3, r2
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800129e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d111      	bne.n	80012c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	085b      	lsrs	r3, r3, #1
 80012b0:	3b01      	subs	r3, #1
 80012b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d107      	bne.n	80012c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d001      	beq.n	80012cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e0cc      	b.n	800148a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012f0:	4b68      	ldr	r3, [pc, #416]	; (8001494 <HAL_RCC_ClockConfig+0x1b8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d90c      	bls.n	8001318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fe:	4b65      	ldr	r3, [pc, #404]	; (8001494 <HAL_RCC_ClockConfig+0x1b8>)
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001306:	4b63      	ldr	r3, [pc, #396]	; (8001494 <HAL_RCC_ClockConfig+0x1b8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d001      	beq.n	8001318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e0b8      	b.n	800148a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d020      	beq.n	8001366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001330:	4b59      	ldr	r3, [pc, #356]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	4a58      	ldr	r2, [pc, #352]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800133a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001348:	4b53      	ldr	r3, [pc, #332]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	4a52      	ldr	r2, [pc, #328]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 800134e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001354:	4b50      	ldr	r3, [pc, #320]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	494d      	ldr	r1, [pc, #308]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 8001362:	4313      	orrs	r3, r2
 8001364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d044      	beq.n	80013fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b47      	ldr	r3, [pc, #284]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d119      	bne.n	80013ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e07f      	b.n	800148a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d003      	beq.n	800139a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001396:	2b03      	cmp	r3, #3
 8001398:	d107      	bne.n	80013aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139a:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d109      	bne.n	80013ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e06f      	b.n	800148a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013aa:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e067      	b.n	800148a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ba:	4b37      	ldr	r3, [pc, #220]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f023 0203 	bic.w	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	4934      	ldr	r1, [pc, #208]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013cc:	f7ff fb36 	bl	8000a3c <HAL_GetTick>
 80013d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d2:	e00a      	b.n	80013ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d4:	f7ff fb32 	bl	8000a3c <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e04f      	b.n	800148a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ea:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 020c 	and.w	r2, r3, #12
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d1eb      	bne.n	80013d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013fc:	4b25      	ldr	r3, [pc, #148]	; (8001494 <HAL_RCC_ClockConfig+0x1b8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d20c      	bcs.n	8001424 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <HAL_RCC_ClockConfig+0x1b8>)
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <HAL_RCC_ClockConfig+0x1b8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d001      	beq.n	8001424 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e032      	b.n	800148a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4916      	ldr	r1, [pc, #88]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	4313      	orrs	r3, r2
 8001440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	2b00      	cmp	r3, #0
 800144c:	d009      	beq.n	8001462 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	490e      	ldr	r1, [pc, #56]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	4313      	orrs	r3, r2
 8001460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001462:	f000 f821 	bl	80014a8 <HAL_RCC_GetSysClockFreq>
 8001466:	4602      	mov	r2, r0
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	490a      	ldr	r1, [pc, #40]	; (800149c <HAL_RCC_ClockConfig+0x1c0>)
 8001474:	5ccb      	ldrb	r3, [r1, r3]
 8001476:	fa22 f303 	lsr.w	r3, r2, r3
 800147a:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 800147c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fa96 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023c00 	.word	0x40023c00
 8001498:	40023800 	.word	0x40023800
 800149c:	08001f58 	.word	0x08001f58
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000004 	.word	0x20000004

080014a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014ac:	b090      	sub	sp, #64	; 0x40
 80014ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	637b      	str	r3, [r7, #52]	; 0x34
 80014b4:	2300      	movs	r3, #0
 80014b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014b8:	2300      	movs	r3, #0
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014c0:	4b59      	ldr	r3, [pc, #356]	; (8001628 <HAL_RCC_GetSysClockFreq+0x180>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d00d      	beq.n	80014e8 <HAL_RCC_GetSysClockFreq+0x40>
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	f200 80a1 	bhi.w	8001614 <HAL_RCC_GetSysClockFreq+0x16c>
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <HAL_RCC_GetSysClockFreq+0x34>
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d003      	beq.n	80014e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80014da:	e09b      	b.n	8001614 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014dc:	4b53      	ldr	r3, [pc, #332]	; (800162c <HAL_RCC_GetSysClockFreq+0x184>)
 80014de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80014e0:	e09b      	b.n	800161a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014e2:	4b53      	ldr	r3, [pc, #332]	; (8001630 <HAL_RCC_GetSysClockFreq+0x188>)
 80014e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80014e6:	e098      	b.n	800161a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014e8:	4b4f      	ldr	r3, [pc, #316]	; (8001628 <HAL_RCC_GetSysClockFreq+0x180>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014f2:	4b4d      	ldr	r3, [pc, #308]	; (8001628 <HAL_RCC_GetSysClockFreq+0x180>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d028      	beq.n	8001550 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014fe:	4b4a      	ldr	r3, [pc, #296]	; (8001628 <HAL_RCC_GetSysClockFreq+0x180>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	099b      	lsrs	r3, r3, #6
 8001504:	2200      	movs	r2, #0
 8001506:	623b      	str	r3, [r7, #32]
 8001508:	627a      	str	r2, [r7, #36]	; 0x24
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001510:	2100      	movs	r1, #0
 8001512:	4b47      	ldr	r3, [pc, #284]	; (8001630 <HAL_RCC_GetSysClockFreq+0x188>)
 8001514:	fb03 f201 	mul.w	r2, r3, r1
 8001518:	2300      	movs	r3, #0
 800151a:	fb00 f303 	mul.w	r3, r0, r3
 800151e:	4413      	add	r3, r2
 8001520:	4a43      	ldr	r2, [pc, #268]	; (8001630 <HAL_RCC_GetSysClockFreq+0x188>)
 8001522:	fba0 1202 	umull	r1, r2, r0, r2
 8001526:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001528:	460a      	mov	r2, r1
 800152a:	62ba      	str	r2, [r7, #40]	; 0x28
 800152c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800152e:	4413      	add	r3, r2
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001534:	2200      	movs	r2, #0
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	61fa      	str	r2, [r7, #28]
 800153a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800153e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001542:	f7fe fe49 	bl	80001d8 <__aeabi_uldivmod>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4613      	mov	r3, r2
 800154c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800154e:	e053      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001550:	4b35      	ldr	r3, [pc, #212]	; (8001628 <HAL_RCC_GetSysClockFreq+0x180>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	099b      	lsrs	r3, r3, #6
 8001556:	2200      	movs	r2, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	617a      	str	r2, [r7, #20]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001562:	f04f 0b00 	mov.w	fp, #0
 8001566:	4652      	mov	r2, sl
 8001568:	465b      	mov	r3, fp
 800156a:	f04f 0000 	mov.w	r0, #0
 800156e:	f04f 0100 	mov.w	r1, #0
 8001572:	0159      	lsls	r1, r3, #5
 8001574:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001578:	0150      	lsls	r0, r2, #5
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	ebb2 080a 	subs.w	r8, r2, sl
 8001582:	eb63 090b 	sbc.w	r9, r3, fp
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001592:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001596:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800159a:	ebb2 0408 	subs.w	r4, r2, r8
 800159e:	eb63 0509 	sbc.w	r5, r3, r9
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	00eb      	lsls	r3, r5, #3
 80015ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015b0:	00e2      	lsls	r2, r4, #3
 80015b2:	4614      	mov	r4, r2
 80015b4:	461d      	mov	r5, r3
 80015b6:	eb14 030a 	adds.w	r3, r4, sl
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	eb45 030b 	adc.w	r3, r5, fp
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015ce:	4629      	mov	r1, r5
 80015d0:	028b      	lsls	r3, r1, #10
 80015d2:	4621      	mov	r1, r4
 80015d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015d8:	4621      	mov	r1, r4
 80015da:	028a      	lsls	r2, r1, #10
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e2:	2200      	movs	r2, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	60fa      	str	r2, [r7, #12]
 80015e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015ec:	f7fe fdf4 	bl	80001d8 <__aeabi_uldivmod>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4613      	mov	r3, r2
 80015f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_RCC_GetSysClockFreq+0x180>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	0c1b      	lsrs	r3, r3, #16
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	3301      	adds	r3, #1
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800160a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001612:	e002      	b.n	800161a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_RCC_GetSysClockFreq+0x184>)
 8001616:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800161a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800161c:	4618      	mov	r0, r3
 800161e:	3740      	adds	r7, #64	; 0x40
 8001620:	46bd      	mov	sp, r7
 8001622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	00f42400 	.word	0x00f42400
 8001630:	017d7840 	.word	0x017d7840

08001634 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0ba      	sub	sp, #232	; 0xe8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10f      	bne.n	800169a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800167a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800167e:	f003 0320 	and.w	r3, r3, #32
 8001682:	2b00      	cmp	r3, #0
 8001684:	d009      	beq.n	800169a <HAL_UART_IRQHandler+0x66>
 8001686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fb65 	bl	8001d62 <UART_Receive_IT>
      return;
 8001698:	e256      	b.n	8001b48 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800169a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 80de 	beq.w	8001860 <HAL_UART_IRQHandler+0x22c>
 80016a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d106      	bne.n	80016be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80016b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80016b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80d1 	beq.w	8001860 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80016be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <HAL_UART_IRQHandler+0xae>
 80016ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80016ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f043 0201 	orr.w	r2, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <HAL_UART_IRQHandler+0xd2>
 80016ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d005      	beq.n	8001706 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f043 0202 	orr.w	r2, r3, #2
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <HAL_UART_IRQHandler+0xf6>
 8001712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f043 0204 	orr.w	r2, r3, #4
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800172a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d011      	beq.n	800175a <HAL_UART_IRQHandler+0x126>
 8001736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	2b00      	cmp	r3, #0
 8001740:	d105      	bne.n	800174e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f043 0208 	orr.w	r2, r3, #8
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 81ed 	beq.w	8001b3e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001768:	f003 0320 	and.w	r3, r3, #32
 800176c:	2b00      	cmp	r3, #0
 800176e:	d008      	beq.n	8001782 <HAL_UART_IRQHandler+0x14e>
 8001770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 faf0 	bl	8001d62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800178c:	2b40      	cmp	r3, #64	; 0x40
 800178e:	bf0c      	ite	eq
 8001790:	2301      	moveq	r3, #1
 8001792:	2300      	movne	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d103      	bne.n	80017ae <HAL_UART_IRQHandler+0x17a>
 80017a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d04f      	beq.n	800184e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f9f8 	bl	8001ba4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017be:	2b40      	cmp	r3, #64	; 0x40
 80017c0:	d141      	bne.n	8001846 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3314      	adds	r3, #20
 80017c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017d0:	e853 3f00 	ldrex	r3, [r3]
 80017d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80017d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3314      	adds	r3, #20
 80017ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80017ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80017f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80017fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80017fe:	e841 2300 	strex	r3, r2, [r1]
 8001802:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1d9      	bne.n	80017c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001812:	2b00      	cmp	r3, #0
 8001814:	d013      	beq.n	800183e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181a:	4a7d      	ldr	r2, [pc, #500]	; (8001a10 <HAL_UART_IRQHandler+0x3dc>)
 800181c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fa8f 	bl	8000d46 <HAL_DMA_Abort_IT>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d016      	beq.n	800185c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001838:	4610      	mov	r0, r2
 800183a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800183c:	e00e      	b.n	800185c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f99a 	bl	8001b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001844:	e00a      	b.n	800185c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f996 	bl	8001b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800184c:	e006      	b.n	800185c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f992 	bl	8001b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800185a:	e170      	b.n	8001b3e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800185c:	bf00      	nop
    return;
 800185e:	e16e      	b.n	8001b3e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	2b01      	cmp	r3, #1
 8001866:	f040 814a 	bne.w	8001afe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800186a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8143 	beq.w	8001afe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 813c 	beq.w	8001afe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a6:	2b40      	cmp	r3, #64	; 0x40
 80018a8:	f040 80b4 	bne.w	8001a14 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80018b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 8140 	beq.w	8001b42 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80018c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80018ca:	429a      	cmp	r2, r3
 80018cc:	f080 8139 	bcs.w	8001b42 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80018d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018e2:	f000 8088 	beq.w	80019f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	330c      	adds	r3, #12
 80018ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018f4:	e853 3f00 	ldrex	r3, [r3]
 80018f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80018fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001904:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	330c      	adds	r3, #12
 800190e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001912:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001916:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800191a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800191e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001922:	e841 2300 	strex	r3, r2, [r1]
 8001926:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800192a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1d9      	bne.n	80018e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3314      	adds	r3, #20
 8001938:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800193a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800193c:	e853 3f00 	ldrex	r3, [r3]
 8001940:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3314      	adds	r3, #20
 8001952:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001956:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800195a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800195c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800195e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001962:	e841 2300 	strex	r3, r2, [r1]
 8001966:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1e1      	bne.n	8001932 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	3314      	adds	r3, #20
 8001974:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001978:	e853 3f00 	ldrex	r3, [r3]
 800197c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800197e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001984:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3314      	adds	r3, #20
 800198e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001992:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001994:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001996:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001998:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800199a:	e841 2300 	strex	r3, r2, [r1]
 800199e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80019a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1e3      	bne.n	800196e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2220      	movs	r2, #32
 80019aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	330c      	adds	r3, #12
 80019ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019be:	e853 3f00 	ldrex	r3, [r3]
 80019c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80019c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019c6:	f023 0310 	bic.w	r3, r3, #16
 80019ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	330c      	adds	r3, #12
 80019d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80019d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80019da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80019de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019e0:	e841 2300 	strex	r3, r2, [r1]
 80019e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80019e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1e3      	bne.n	80019b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f938 	bl	8000c66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4619      	mov	r1, r3
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f8c0 	bl	8001b8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001a0c:	e099      	b.n	8001b42 <HAL_UART_IRQHandler+0x50e>
 8001a0e:	bf00      	nop
 8001a10:	08001c6b 	.word	0x08001c6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 808b 	beq.w	8001b46 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001a30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8086 	beq.w	8001b46 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	330c      	adds	r3, #12
 8001a40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a44:	e853 3f00 	ldrex	r3, [r3]
 8001a48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001a50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	330c      	adds	r3, #12
 8001a5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001a5e:	647a      	str	r2, [r7, #68]	; 0x44
 8001a60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001a64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a66:	e841 2300 	strex	r3, r2, [r1]
 8001a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1e3      	bne.n	8001a3a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	3314      	adds	r3, #20
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	e853 3f00 	ldrex	r3, [r3]
 8001a80:	623b      	str	r3, [r7, #32]
   return(result);
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3314      	adds	r3, #20
 8001a92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001a96:	633a      	str	r2, [r7, #48]	; 0x30
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a9e:	e841 2300 	strex	r3, r2, [r1]
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1e3      	bne.n	8001a72 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2220      	movs	r2, #32
 8001aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	330c      	adds	r3, #12
 8001abe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	e853 3f00 	ldrex	r3, [r3]
 8001ac6:	60fb      	str	r3, [r7, #12]
   return(result);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f023 0310 	bic.w	r3, r3, #16
 8001ace:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	330c      	adds	r3, #12
 8001ad8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001adc:	61fa      	str	r2, [r7, #28]
 8001ade:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ae0:	69b9      	ldr	r1, [r7, #24]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	e841 2300 	strex	r3, r2, [r1]
 8001ae8:	617b      	str	r3, [r7, #20]
   return(result);
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1e3      	bne.n	8001ab8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001af0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001af4:	4619      	mov	r1, r3
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f848 	bl	8001b8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001afc:	e023      	b.n	8001b46 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d009      	beq.n	8001b1e <HAL_UART_IRQHandler+0x4ea>
 8001b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f8bb 	bl	8001c92 <UART_Transmit_IT>
    return;
 8001b1c:	e014      	b.n	8001b48 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00e      	beq.n	8001b48 <HAL_UART_IRQHandler+0x514>
 8001b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d008      	beq.n	8001b48 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f8fb 	bl	8001d32 <UART_EndTransmit_IT>
    return;
 8001b3c:	e004      	b.n	8001b48 <HAL_UART_IRQHandler+0x514>
    return;
 8001b3e:	bf00      	nop
 8001b40:	e002      	b.n	8001b48 <HAL_UART_IRQHandler+0x514>
      return;
 8001b42:	bf00      	nop
 8001b44:	e000      	b.n	8001b48 <HAL_UART_IRQHandler+0x514>
      return;
 8001b46:	bf00      	nop
  }
}
 8001b48:	37e8      	adds	r7, #232	; 0xe8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop

08001b50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b095      	sub	sp, #84	; 0x54
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	330c      	adds	r3, #12
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb6:	e853 3f00 	ldrex	r3, [r3]
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	330c      	adds	r3, #12
 8001bca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bcc:	643a      	str	r2, [r7, #64]	; 0x40
 8001bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001bd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bd4:	e841 2300 	strex	r3, r2, [r1]
 8001bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1e5      	bne.n	8001bac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3314      	adds	r3, #20
 8001be6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	e853 3f00 	ldrex	r3, [r3]
 8001bee:	61fb      	str	r3, [r7, #28]
   return(result);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f023 0301 	bic.w	r3, r3, #1
 8001bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3314      	adds	r3, #20
 8001bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c08:	e841 2300 	strex	r3, r2, [r1]
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e5      	bne.n	8001be0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d119      	bne.n	8001c50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	330c      	adds	r3, #12
 8001c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	e853 3f00 	ldrex	r3, [r3]
 8001c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f023 0310 	bic.w	r3, r3, #16
 8001c32:	647b      	str	r3, [r7, #68]	; 0x44
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	330c      	adds	r3, #12
 8001c3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c3c:	61ba      	str	r2, [r7, #24]
 8001c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c40:	6979      	ldr	r1, [r7, #20]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	e841 2300 	strex	r3, r2, [r1]
 8001c48:	613b      	str	r3, [r7, #16]
   return(result);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1e5      	bne.n	8001c1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2220      	movs	r2, #32
 8001c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001c5e:	bf00      	nop
 8001c60:	3754      	adds	r7, #84	; 0x54
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f7ff ff77 	bl	8001b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b085      	sub	sp, #20
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b21      	cmp	r3, #33	; 0x21
 8001ca4:	d13e      	bne.n	8001d24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cae:	d114      	bne.n	8001cda <UART_Transmit_IT+0x48>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d110      	bne.n	8001cda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ccc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	1c9a      	adds	r2, r3, #2
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	621a      	str	r2, [r3, #32]
 8001cd8:	e008      	b.n	8001cec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	1c59      	adds	r1, r3, #1
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6211      	str	r1, [r2, #32]
 8001ce4:	781a      	ldrb	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10f      	bne.n	8001d20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	e000      	b.n	8001d26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001d24:	2302      	movs	r3, #2
  }
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fefc 	bl	8001b50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b08c      	sub	sp, #48	; 0x30
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b22      	cmp	r3, #34	; 0x22
 8001d74:	f040 80ab 	bne.w	8001ece <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d80:	d117      	bne.n	8001db2 <UART_Receive_IT+0x50>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d113      	bne.n	8001db2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	1c9a      	adds	r2, r3, #2
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
 8001db0:	e026      	b.n	8001e00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc4:	d007      	beq.n	8001dd6 <UART_Receive_IT+0x74>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10a      	bne.n	8001de4 <UART_Receive_IT+0x82>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	701a      	strb	r2, [r3, #0]
 8001de2:	e008      	b.n	8001df6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d15a      	bne.n	8001eca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0220 	bic.w	r2, r2, #32
 8001e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d135      	bne.n	8001ec0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	330c      	adds	r3, #12
 8001e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	e853 3f00 	ldrex	r3, [r3]
 8001e68:	613b      	str	r3, [r7, #16]
   return(result);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	f023 0310 	bic.w	r3, r3, #16
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	330c      	adds	r3, #12
 8001e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7a:	623a      	str	r2, [r7, #32]
 8001e7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e7e:	69f9      	ldr	r1, [r7, #28]
 8001e80:	6a3a      	ldr	r2, [r7, #32]
 8001e82:	e841 2300 	strex	r3, r2, [r1]
 8001e86:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1e5      	bne.n	8001e5a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d10a      	bne.n	8001eb2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff fe67 	bl	8001b8c <HAL_UARTEx_RxEventCallback>
 8001ebe:	e002      	b.n	8001ec6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff fe4f 	bl	8001b64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e002      	b.n	8001ed0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8001ece:	2302      	movs	r3, #2
  }
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3730      	adds	r7, #48	; 0x30
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <__libc_init_array>:
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	4d0d      	ldr	r5, [pc, #52]	; (8001f10 <__libc_init_array+0x38>)
 8001edc:	4c0d      	ldr	r4, [pc, #52]	; (8001f14 <__libc_init_array+0x3c>)
 8001ede:	1b64      	subs	r4, r4, r5
 8001ee0:	10a4      	asrs	r4, r4, #2
 8001ee2:	2600      	movs	r6, #0
 8001ee4:	42a6      	cmp	r6, r4
 8001ee6:	d109      	bne.n	8001efc <__libc_init_array+0x24>
 8001ee8:	4d0b      	ldr	r5, [pc, #44]	; (8001f18 <__libc_init_array+0x40>)
 8001eea:	4c0c      	ldr	r4, [pc, #48]	; (8001f1c <__libc_init_array+0x44>)
 8001eec:	f000 f820 	bl	8001f30 <_init>
 8001ef0:	1b64      	subs	r4, r4, r5
 8001ef2:	10a4      	asrs	r4, r4, #2
 8001ef4:	2600      	movs	r6, #0
 8001ef6:	42a6      	cmp	r6, r4
 8001ef8:	d105      	bne.n	8001f06 <__libc_init_array+0x2e>
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
 8001efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f00:	4798      	blx	r3
 8001f02:	3601      	adds	r6, #1
 8001f04:	e7ee      	b.n	8001ee4 <__libc_init_array+0xc>
 8001f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f0a:	4798      	blx	r3
 8001f0c:	3601      	adds	r6, #1
 8001f0e:	e7f2      	b.n	8001ef6 <__libc_init_array+0x1e>
 8001f10:	08001f70 	.word	0x08001f70
 8001f14:	08001f70 	.word	0x08001f70
 8001f18:	08001f70 	.word	0x08001f70
 8001f1c:	08001f74 	.word	0x08001f74

08001f20 <memset>:
 8001f20:	4402      	add	r2, r0
 8001f22:	4603      	mov	r3, r0
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d100      	bne.n	8001f2a <memset+0xa>
 8001f28:	4770      	bx	lr
 8001f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f2e:	e7f9      	b.n	8001f24 <memset+0x4>

08001f30 <_init>:
 8001f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f32:	bf00      	nop
 8001f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f36:	bc08      	pop	{r3}
 8001f38:	469e      	mov	lr, r3
 8001f3a:	4770      	bx	lr

08001f3c <_fini>:
 8001f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3e:	bf00      	nop
 8001f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f42:	bc08      	pop	{r3}
 8001f44:	469e      	mov	lr, r3
 8001f46:	4770      	bx	lr
