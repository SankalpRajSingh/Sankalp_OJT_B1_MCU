
RFID_ACCESS_CONTROL_SYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004480  08004480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004548  08004548  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004550  08004550  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004550  08004550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004554  08004554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000074  080045cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080045cc  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3d9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d8d  00000000  00000000  0002d47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  0002f210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0002fd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ef6  00000000  00000000  00030780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e640  00000000  00000000  00047676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e378  00000000  00000000  00055cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e402e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031fc  00000000  00000000  000e4080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004468 	.word	0x08004468

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004468 	.word	0x08004468

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <LCD_string>:
//			LCD_command(1);
//			delay(500);
//		}
//}
void LCD_string(char str[])
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	for(int i=0;str[i]!='\0';i++)
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e009      	b.n	80005d6 <LCD_string+0x22>
	{
		LCD_data(str[i]);
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	4413      	add	r3, r2
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f8c8 	bl	8000760 <LCD_data>
	for(int i=0;str[i]!='\0';i++)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3301      	adds	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	4413      	add	r3, r2
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1ef      	bne.n	80005c2 <LCD_string+0xe>
	}

}
 80005e2:	bf00      	nop
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <LCD_init>:
/* initialize GPIOA/C then initialize LCD controller */
void LCD_init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	PORTS_init();
 80005f0:	f000 f82e 	bl	8000650 <PORTS_init>
	delay(20); /* LCD controller reset sequence */
 80005f4:	2014      	movs	r0, #20
 80005f6:	f000 f8ce 	bl	8000796 <delay>
	LCD_nibble_write(0x30, 0);
 80005fa:	2100      	movs	r1, #0
 80005fc:	2030      	movs	r0, #48	; 0x30
 80005fe:	f000 f85d 	bl	80006bc <LCD_nibble_write>
	delay(5);
 8000602:	2005      	movs	r0, #5
 8000604:	f000 f8c7 	bl	8000796 <delay>
	LCD_nibble_write(0x30, 0);
 8000608:	2100      	movs	r1, #0
 800060a:	2030      	movs	r0, #48	; 0x30
 800060c:	f000 f856 	bl	80006bc <LCD_nibble_write>
	delay(1);
 8000610:	2001      	movs	r0, #1
 8000612:	f000 f8c0 	bl	8000796 <delay>
	LCD_nibble_write(0x30, 0);
 8000616:	2100      	movs	r1, #0
 8000618:	2030      	movs	r0, #48	; 0x30
 800061a:	f000 f84f 	bl	80006bc <LCD_nibble_write>
	delay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 f8b9 	bl	8000796 <delay>
	LCD_nibble_write(0x20, 0); /* use 4-bit data mode */
 8000624:	2100      	movs	r1, #0
 8000626:	2020      	movs	r0, #32
 8000628:	f000 f848 	bl	80006bc <LCD_nibble_write>
	delay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f000 f8b2 	bl	8000796 <delay>
	LCD_command(0x28); /* set 4-bit data, 2-line, 5x7 font */
 8000632:	2028      	movs	r0, #40	; 0x28
 8000634:	f000 f872 	bl	800071c <LCD_command>
	LCD_command(0x06); /* move cursor right */
 8000638:	2006      	movs	r0, #6
 800063a:	f000 f86f 	bl	800071c <LCD_command>
	LCD_command(0x01); /* clear screen, move cursor to home */
 800063e:	2001      	movs	r0, #1
 8000640:	f000 f86c 	bl	800071c <LCD_command>
	LCD_command(0x0C); /* turn on display, cursor blinking */
 8000644:	200c      	movs	r0, #12
 8000646:	f000 f869 	bl	800071c <LCD_command>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <PORTS_init>:

void PORTS_init(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
		RCC->AHB1ENR |= 0x1;                     // Enable AHB1 BUS which is connected to PA5 via GPIO port A
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <PORTS_init+0x60>)
 8000656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000658:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <PORTS_init+0x60>)
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= 0x4;					// Enanle AHB1 bus conneted to GPIO port C
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <PORTS_init+0x60>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <PORTS_init+0x60>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	6313      	str	r3, [r2, #48]	; 0x30
	//	RCC->AHB1ENR |=0x2;						//Enanle AHB1 bus conneted to GPIO port B
		GPIOA->MODER &=~0xFC00;                 //clear all pin PA5 PA6 PA7
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <PORTS_init+0x64>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <PORTS_init+0x64>)
 8000672:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8000676:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |=0x5400; 				//set all pin 5,6,7 as o/p mode
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <PORTS_init+0x64>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <PORTS_init+0x64>)
 800067e:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 8000682:	6013      	str	r3, [r2, #0]
		GPIOA->BSRR = 0xC00000;	//(3<<22)			//turn off EN and RW pin
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <PORTS_init+0x64>)
 8000686:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800068a:	619a      	str	r2, [r3, #24]
		GPIOC->MODER &=~0xFF00;				// CLEAR all pin 4-7 of port C
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <PORTS_init+0x68>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <PORTS_init+0x68>)
 8000692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000696:	6013      	str	r3, [r2, #0]
		GPIOC->MODER |= 0x5500;				// set all pin 4-7 as o/p mode
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <PORTS_init+0x68>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <PORTS_init+0x68>)
 800069e:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80006a2:	6013      	str	r3, [r2, #0]


}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000
 80006b8:	40020800 	.word	0x40020800

080006bc <LCD_nibble_write>:

void LCD_nibble_write(char data, unsigned char control)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	71fb      	strb	r3, [r7, #7]
 80006c8:	4613      	mov	r3, r2
 80006ca:	71bb      	strb	r3, [r7, #6]
	/*populate data bits */
	GPIOC->BSRR = 0xF00000; 					/* clear data bits */
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <LCD_nibble_write+0x58>)
 80006ce:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80006d2:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = data & 0xF0; 					/* set data bits 4-7 */
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <LCD_nibble_write+0x58>)
 80006d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006dc:	6193      	str	r3, [r2, #24]
	/* set R/S bit */
	if (control & RS)
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	f003 0320 	and.w	r3, r3, #32
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d003      	beq.n	80006f0 <LCD_nibble_write+0x34>
		GPIOA->BSRR = RS;
 80006e8:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <LCD_nibble_write+0x5c>)
 80006ea:	2220      	movs	r2, #32
 80006ec:	619a      	str	r2, [r3, #24]
 80006ee:	e003      	b.n	80006f8 <LCD_nibble_write+0x3c>
	else
		GPIOA->BSRR = RS << 16;	//(1<<21)  //
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <LCD_nibble_write+0x5c>)
 80006f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006f6:	619a      	str	r2, [r3, #24]
	/* pulse E */
	GPIOA->BSRR = EN;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <LCD_nibble_write+0x5c>)
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	619a      	str	r2, [r3, #24]
	__NOP();
 80006fe:	bf00      	nop
	GPIOA->BSRR = EN << 16;
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <LCD_nibble_write+0x5c>)
 8000702:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000706:	619a      	str	r2, [r3, #24]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	40020800 	.word	0x40020800
 8000718:	40020000 	.word	0x40020000

0800071c <LCD_command>:
void LCD_command(unsigned char command)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write(command & 0xF0, 0); 			/* upper nibble first */
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	f023 030f 	bic.w	r3, r3, #15
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ffc3 	bl	80006bc <LCD_nibble_write>
	LCD_nibble_write(command << 4, 0); 				/* then lower nibble */
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	011b      	lsls	r3, r3, #4
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ffbc 	bl	80006bc <LCD_nibble_write>
	if (command < 4)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2b03      	cmp	r3, #3
 8000748:	d803      	bhi.n	8000752 <LCD_command+0x36>
		delay(2); 									/* command 1 and 2 needs up to 1.64ms */
 800074a:	2002      	movs	r0, #2
 800074c:	f000 f823 	bl	8000796 <delay>
	else
		delay(1); 									/* all others 40 us */

}
 8000750:	e002      	b.n	8000758 <LCD_command+0x3c>
		delay(1); 									/* all others 40 us */
 8000752:	2001      	movs	r0, #1
 8000754:	f000 f81f 	bl	8000796 <delay>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <LCD_data>:
void LCD_data(char data)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write(data & 0xF0, RS); 				/* upper nibble first */
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	f023 030f 	bic.w	r3, r3, #15
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2120      	movs	r1, #32
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ffa1 	bl	80006bc <LCD_nibble_write>
	LCD_nibble_write(data << 4, RS); 				/* then lower nibble */
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2120      	movs	r1, #32
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff9a 	bl	80006bc <LCD_nibble_write>
	delay(100);
 8000788:	2064      	movs	r0, #100	; 0x64
 800078a:	f000 f804 	bl	8000796 <delay>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <delay>:
void delay(int seconds)
{
 8000796:	b480      	push	{r7}
 8000798:	b085      	sub	sp, #20
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]

	for(;seconds>0;seconds--)
 800079e:	e00d      	b.n	80007bc <delay+0x26>
	{
		for(int count1=0;count1<3000;count1++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	e002      	b.n	80007ac <delay+0x16>
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	3301      	adds	r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80007b2:	4293      	cmp	r3, r2
 80007b4:	ddf7      	ble.n	80007a6 <delay+0x10>
	for(;seconds>0;seconds--)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	dcee      	bgt.n	80007a0 <delay+0xa>
		{

		}
	}
}
 80007c2:	bf00      	nop
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d6:	f000 fcad 	bl	8001134 <HAL_Init>
  LCD_init();
 80007da:	f7ff ff07 	bl	80005ec <LCD_init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f9af 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e2:	f000 fabf 	bl	8000d64 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007e6:	f000 fa0b 	bl	8000c00 <MX_I2C1_Init>
  MX_RTC_Init();
 80007ea:	f000 fa37 	bl	8000c5c <MX_RTC_Init>
  MX_USART1_UART_Init();
 80007ee:	f000 fa8f 	bl	8000d10 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	//  SET TIME
	  sTime.Hours = 15;
 80007f2:	4b30      	ldr	r3, [pc, #192]	; (80008b4 <main+0xe4>)
 80007f4:	220f      	movs	r2, #15
 80007f6:	701a      	strb	r2, [r3, #0]
	  sTime.Minutes = 59;
 80007f8:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <main+0xe4>)
 80007fa:	223b      	movs	r2, #59	; 0x3b
 80007fc:	705a      	strb	r2, [r3, #1]
	  sTime.Seconds = 45;
 80007fe:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <main+0xe4>)
 8000800:	222d      	movs	r2, #45	; 0x2d
 8000802:	709a      	strb	r2, [r3, #2]
	  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000804:	2200      	movs	r2, #0
 8000806:	492b      	ldr	r1, [pc, #172]	; (80008b4 <main+0xe4>)
 8000808:	482b      	ldr	r0, [pc, #172]	; (80008b8 <main+0xe8>)
 800080a:	f001 ff85 	bl	8002718 <HAL_RTC_SetTime>

	//  SET DATE
	  sDate.Date = 26;
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <main+0xec>)
 8000810:	221a      	movs	r2, #26
 8000812:	709a      	strb	r2, [r3, #2]
	  sDate.Month = RTC_MONTH_DECEMBER;
 8000814:	4b29      	ldr	r3, [pc, #164]	; (80008bc <main+0xec>)
 8000816:	2212      	movs	r2, #18
 8000818:	705a      	strb	r2, [r3, #1]
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800081a:	4b28      	ldr	r3, [pc, #160]	; (80008bc <main+0xec>)
 800081c:	2201      	movs	r2, #1
 800081e:	701a      	strb	r2, [r3, #0]
	  sDate.Year = 22;
 8000820:	4b26      	ldr	r3, [pc, #152]	; (80008bc <main+0xec>)
 8000822:	2216      	movs	r2, #22
 8000824:	70da      	strb	r2, [r3, #3]
	  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000826:	2200      	movs	r2, #0
 8000828:	4924      	ldr	r1, [pc, #144]	; (80008bc <main+0xec>)
 800082a:	4823      	ldr	r0, [pc, #140]	; (80008b8 <main+0xe8>)
 800082c:	f002 f86c 	bl	8002908 <HAL_RTC_SetDate>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000830:	2200      	movs	r2, #0
 8000832:	4920      	ldr	r1, [pc, #128]	; (80008b4 <main+0xe4>)
 8000834:	4820      	ldr	r0, [pc, #128]	; (80008b8 <main+0xe8>)
 8000836:	f002 f809 	bl	800284c <HAL_RTC_GetTime>
	  sprintf (buffer1, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <main+0xe4>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <main+0xe4>)
 8000842:	785b      	ldrb	r3, [r3, #1]
 8000844:	4619      	mov	r1, r3
 8000846:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <main+0xe4>)
 8000848:	789b      	ldrb	r3, [r3, #2]
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	460b      	mov	r3, r1
 800084e:	491c      	ldr	r1, [pc, #112]	; (80008c0 <main+0xf0>)
 8000850:	481c      	ldr	r0, [pc, #112]	; (80008c4 <main+0xf4>)
 8000852:	f003 f993 	bl	8003b7c <siprintf>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000856:	2200      	movs	r2, #0
 8000858:	4918      	ldr	r1, [pc, #96]	; (80008bc <main+0xec>)
 800085a:	4817      	ldr	r0, [pc, #92]	; (80008b8 <main+0xe8>)
 800085c:	f002 f8d8 	bl	8002a10 <HAL_RTC_GetDate>
	  sprintf (buffer2, "%02d-%02d-20%02d", sDate.Date, sDate.Month, sDate.Year);
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <main+0xec>)
 8000862:	789b      	ldrb	r3, [r3, #2]
 8000864:	461a      	mov	r2, r3
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <main+0xec>)
 8000868:	785b      	ldrb	r3, [r3, #1]
 800086a:	4619      	mov	r1, r3
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <main+0xec>)
 800086e:	78db      	ldrb	r3, [r3, #3]
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	460b      	mov	r3, r1
 8000874:	4914      	ldr	r1, [pc, #80]	; (80008c8 <main+0xf8>)
 8000876:	4815      	ldr	r0, [pc, #84]	; (80008cc <main+0xfc>)
 8000878:	f003 f980 	bl	8003b7c <siprintf>
	  HAL_Delay(200);
 800087c:	20c8      	movs	r0, #200	; 0xc8
 800087e:	f000 fccb 	bl	8001218 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOA, 10) == 0)
 8000882:	210a      	movs	r1, #10
 8000884:	4812      	ldr	r0, [pc, #72]	; (80008d0 <main+0x100>)
 8000886:	f001 f813 	bl	80018b0 <HAL_GPIO_ReadPin>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1cf      	bne.n	8000830 <main+0x60>
	  {
		  uint16_t len_of_data=strlen(USER_DATA);
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <main+0x104>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fcad 	bl	80001f4 <strlen>
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
//		  HAL_UART_Transmit(&huart1, (uint8_t*)USER_DATA,len_of_data, HAL_MAX_DELAY);
		  while(rec_comp_data != TRUE)
 800089e:	e004      	b.n	80008aa <main+0xda>
		  {
			  HAL_UART_Receive_IT(&huart1,&recvd_data,1);
 80008a0:	2201      	movs	r2, #1
 80008a2:	490d      	ldr	r1, [pc, #52]	; (80008d8 <main+0x108>)
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <main+0x10c>)
 80008a6:	f002 fa0c 	bl	8002cc2 <HAL_UART_Receive_IT>
		  while(rec_comp_data != TRUE)
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <main+0x110>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d1f6      	bne.n	80008a0 <main+0xd0>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80008b2:	e7bd      	b.n	8000830 <main+0x60>
 80008b4:	20000104 	.word	0x20000104
 80008b8:	200000e4 	.word	0x200000e4
 80008bc:	20000118 	.word	0x20000118
 80008c0:	0800448c 	.word	0x0800448c
 80008c4:	200001ac 	.word	0x200001ac
 80008c8:	0800449c 	.word	0x0800449c
 80008cc:	200001bc 	.word	0x200001bc
 80008d0:	40020000 	.word	0x40020000
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000160 	.word	0x20000160
 80008dc:	2000011c 	.word	0x2000011c
 80008e0:	20000197 	.word	0x20000197

080008e4 <HAL_UART_RxCpltCallback>:
  /* USER CODE END 3 */
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	int z=0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
	data_buf[count++]=recvd_data;
 80008f0:	4b85      	ldr	r3, [pc, #532]	; (8000b08 <HAL_UART_RxCpltCallback+0x224>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	b2d1      	uxtb	r1, r2
 80008f8:	4a83      	ldr	r2, [pc, #524]	; (8000b08 <HAL_UART_RxCpltCallback+0x224>)
 80008fa:	7011      	strb	r1, [r2, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b83      	ldr	r3, [pc, #524]	; (8000b0c <HAL_UART_RxCpltCallback+0x228>)
 8000900:	7819      	ldrb	r1, [r3, #0]
 8000902:	4b83      	ldr	r3, [pc, #524]	; (8000b10 <HAL_UART_RxCpltCallback+0x22c>)
 8000904:	5499      	strb	r1, [r3, r2]
	while(z<2)
 8000906:	e006      	b.n	8000916 <HAL_UART_RxCpltCallback+0x32>
	{
		strcpy(str,data_buf);
 8000908:	4981      	ldr	r1, [pc, #516]	; (8000b10 <HAL_UART_RxCpltCallback+0x22c>)
 800090a:	4882      	ldr	r0, [pc, #520]	; (8000b14 <HAL_UART_RxCpltCallback+0x230>)
 800090c:	f003 f956 	bl	8003bbc <strcpy>
		z=z+1;
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	3301      	adds	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
	while(z<2)
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	2b01      	cmp	r3, #1
 800091a:	ddf5      	ble.n	8000908 <HAL_UART_RxCpltCallback+0x24>
	}
	if(strcmp(str,"18")==0)
 800091c:	497e      	ldr	r1, [pc, #504]	; (8000b18 <HAL_UART_RxCpltCallback+0x234>)
 800091e:	487d      	ldr	r0, [pc, #500]	; (8000b14 <HAL_UART_RxCpltCallback+0x230>)
 8000920:	f7ff fc5e 	bl	80001e0 <strcmp>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d149      	bne.n	80009be <HAL_UART_RxCpltCallback+0xda>
	{
		LCD_command(1);
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff fef6 	bl	800071c <LCD_command>
		LCD_string("WELCOME ON BOARD");
 8000930:	487a      	ldr	r0, [pc, #488]	; (8000b1c <HAL_UART_RxCpltCallback+0x238>)
 8000932:	f7ff fe3f 	bl	80005b4 <LCD_string>
		LCD_command(0xC4);
 8000936:	20c4      	movs	r0, #196	; 0xc4
 8000938:	f7ff fef0 	bl	800071c <LCD_command>
		LCD_string("SANKALP!");
 800093c:	4878      	ldr	r0, [pc, #480]	; (8000b20 <HAL_UART_RxCpltCallback+0x23c>)
 800093e:	f7ff fe39 	bl	80005b4 <LCD_string>
		delay(1000);
 8000942:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000946:	f7ff ff26 	bl	8000796 <delay>
		LCD_command(1);
 800094a:	2001      	movs	r0, #1
 800094c:	f7ff fee6 	bl	800071c <LCD_command>
		LCD_command(0x83);
 8000950:	2083      	movs	r0, #131	; 0x83
 8000952:	f7ff fee3 	bl	800071c <LCD_command>
		LCD_string("LOGIN TIME");
 8000956:	4873      	ldr	r0, [pc, #460]	; (8000b24 <HAL_UART_RxCpltCallback+0x240>)
 8000958:	f7ff fe2c 	bl	80005b4 <LCD_string>
		LCD_command(0xC4);
 800095c:	20c4      	movs	r0, #196	; 0xc4
 800095e:	f7ff fedd 	bl	800071c <LCD_command>
		LCD_string(buffer1);
 8000962:	4871      	ldr	r0, [pc, #452]	; (8000b28 <HAL_UART_RxCpltCallback+0x244>)
 8000964:	f7ff fe26 	bl	80005b4 <LCD_string>
		delay(1000);
 8000968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096c:	f7ff ff13 	bl	8000796 <delay>
		LCD_command(1);
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff fed3 	bl	800071c <LCD_command>
		LCD_command(0x83);
 8000976:	2083      	movs	r0, #131	; 0x83
 8000978:	f7ff fed0 	bl	800071c <LCD_command>
		LCD_string("LOGIN TIME");
 800097c:	4869      	ldr	r0, [pc, #420]	; (8000b24 <HAL_UART_RxCpltCallback+0x240>)
 800097e:	f7ff fe19 	bl	80005b4 <LCD_string>
		LCD_command(0xC4);
 8000982:	20c4      	movs	r0, #196	; 0xc4
 8000984:	f7ff feca 	bl	800071c <LCD_command>
		LCD_string(buffer2);
 8000988:	4868      	ldr	r0, [pc, #416]	; (8000b2c <HAL_UART_RxCpltCallback+0x248>)
 800098a:	f7ff fe13 	bl	80005b4 <LCD_string>
		delay(1000);
 800098e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000992:	f7ff ff00 	bl	8000796 <delay>
		for(int i=0;i<z;i++)
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	e006      	b.n	80009aa <HAL_UART_RxCpltCallback+0xc6>
		{
			strcpy(str,0);
 800099c:	2100      	movs	r1, #0
 800099e:	485d      	ldr	r0, [pc, #372]	; (8000b14 <HAL_UART_RxCpltCallback+0x230>)
 80009a0:	f003 f90c 	bl	8003bbc <strcpy>
		for(int i=0;i<z;i++)
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	3301      	adds	r3, #1
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	dbf4      	blt.n	800099c <HAL_UART_RxCpltCallback+0xb8>
		}
		z=0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
		LCD_command(1);
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff feb0 	bl	800071c <LCD_command>
		}
		z=0;
		LCD_command(1);
//		MOTOR_Init();
	}
}
 80009bc:	e0a0      	b.n	8000b00 <HAL_UART_RxCpltCallback+0x21c>
	else if(strcmp(str,"3E")==0)
 80009be:	495c      	ldr	r1, [pc, #368]	; (8000b30 <HAL_UART_RxCpltCallback+0x24c>)
 80009c0:	4854      	ldr	r0, [pc, #336]	; (8000b14 <HAL_UART_RxCpltCallback+0x230>)
 80009c2:	f7ff fc0d 	bl	80001e0 <strcmp>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d149      	bne.n	8000a60 <HAL_UART_RxCpltCallback+0x17c>
		LCD_command(1);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f7ff fea5 	bl	800071c <LCD_command>
		LCD_string("WELCOME ON BOARD");
 80009d2:	4852      	ldr	r0, [pc, #328]	; (8000b1c <HAL_UART_RxCpltCallback+0x238>)
 80009d4:	f7ff fdee 	bl	80005b4 <LCD_string>
		LCD_command(0xC4);
 80009d8:	20c4      	movs	r0, #196	; 0xc4
 80009da:	f7ff fe9f 	bl	800071c <LCD_command>
		LCD_string("NARESH!");
 80009de:	4855      	ldr	r0, [pc, #340]	; (8000b34 <HAL_UART_RxCpltCallback+0x250>)
 80009e0:	f7ff fde8 	bl	80005b4 <LCD_string>
		delay(1000);
 80009e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e8:	f7ff fed5 	bl	8000796 <delay>
		LCD_command(1);
 80009ec:	2001      	movs	r0, #1
 80009ee:	f7ff fe95 	bl	800071c <LCD_command>
		LCD_command(0x83);
 80009f2:	2083      	movs	r0, #131	; 0x83
 80009f4:	f7ff fe92 	bl	800071c <LCD_command>
		LCD_string("LOGIN TIME");
 80009f8:	484a      	ldr	r0, [pc, #296]	; (8000b24 <HAL_UART_RxCpltCallback+0x240>)
 80009fa:	f7ff fddb 	bl	80005b4 <LCD_string>
		LCD_command(0xC4);
 80009fe:	20c4      	movs	r0, #196	; 0xc4
 8000a00:	f7ff fe8c 	bl	800071c <LCD_command>
		LCD_string(buffer1);
 8000a04:	4848      	ldr	r0, [pc, #288]	; (8000b28 <HAL_UART_RxCpltCallback+0x244>)
 8000a06:	f7ff fdd5 	bl	80005b4 <LCD_string>
		delay(1000);
 8000a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a0e:	f7ff fec2 	bl	8000796 <delay>
		LCD_command(1);
 8000a12:	2001      	movs	r0, #1
 8000a14:	f7ff fe82 	bl	800071c <LCD_command>
		LCD_command(0x83);
 8000a18:	2083      	movs	r0, #131	; 0x83
 8000a1a:	f7ff fe7f 	bl	800071c <LCD_command>
		LCD_string("LOGIN TIME");
 8000a1e:	4841      	ldr	r0, [pc, #260]	; (8000b24 <HAL_UART_RxCpltCallback+0x240>)
 8000a20:	f7ff fdc8 	bl	80005b4 <LCD_string>
		LCD_command(0xC4);
 8000a24:	20c4      	movs	r0, #196	; 0xc4
 8000a26:	f7ff fe79 	bl	800071c <LCD_command>
		LCD_string(buffer2);
 8000a2a:	4840      	ldr	r0, [pc, #256]	; (8000b2c <HAL_UART_RxCpltCallback+0x248>)
 8000a2c:	f7ff fdc2 	bl	80005b4 <LCD_string>
		delay(1000);
 8000a30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a34:	f7ff feaf 	bl	8000796 <delay>
		for(int i=0;i<z;i++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	e006      	b.n	8000a4c <HAL_UART_RxCpltCallback+0x168>
			strcpy(str,0);
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4834      	ldr	r0, [pc, #208]	; (8000b14 <HAL_UART_RxCpltCallback+0x230>)
 8000a42:	f003 f8bb 	bl	8003bbc <strcpy>
		for(int i=0;i<z;i++)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dbf4      	blt.n	8000a3e <HAL_UART_RxCpltCallback+0x15a>
		z=0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
		LCD_command(1);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f7ff fe5f 	bl	800071c <LCD_command>
}
 8000a5e:	e04f      	b.n	8000b00 <HAL_UART_RxCpltCallback+0x21c>
	else if(strcmp(str,"55")==0)
 8000a60:	4935      	ldr	r1, [pc, #212]	; (8000b38 <HAL_UART_RxCpltCallback+0x254>)
 8000a62:	482c      	ldr	r0, [pc, #176]	; (8000b14 <HAL_UART_RxCpltCallback+0x230>)
 8000a64:	f7ff fbbc 	bl	80001e0 <strcmp>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d148      	bne.n	8000b00 <HAL_UART_RxCpltCallback+0x21c>
		LCD_command(1);
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f7ff fe54 	bl	800071c <LCD_command>
		LCD_string("WELCOME ON BOARD");
 8000a74:	4829      	ldr	r0, [pc, #164]	; (8000b1c <HAL_UART_RxCpltCallback+0x238>)
 8000a76:	f7ff fd9d 	bl	80005b4 <LCD_string>
		LCD_command(0xC4);
 8000a7a:	20c4      	movs	r0, #196	; 0xc4
 8000a7c:	f7ff fe4e 	bl	800071c <LCD_command>
		LCD_string("SANDEEP!");
 8000a80:	482e      	ldr	r0, [pc, #184]	; (8000b3c <HAL_UART_RxCpltCallback+0x258>)
 8000a82:	f7ff fd97 	bl	80005b4 <LCD_string>
		delay(1000);
 8000a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8a:	f7ff fe84 	bl	8000796 <delay>
		LCD_command(1);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff fe44 	bl	800071c <LCD_command>
		LCD_command(0x83);
 8000a94:	2083      	movs	r0, #131	; 0x83
 8000a96:	f7ff fe41 	bl	800071c <LCD_command>
		LCD_string("LOGIN TIME");
 8000a9a:	4822      	ldr	r0, [pc, #136]	; (8000b24 <HAL_UART_RxCpltCallback+0x240>)
 8000a9c:	f7ff fd8a 	bl	80005b4 <LCD_string>
		LCD_command(0xC4);
 8000aa0:	20c4      	movs	r0, #196	; 0xc4
 8000aa2:	f7ff fe3b 	bl	800071c <LCD_command>
		LCD_string(buffer1);
 8000aa6:	4820      	ldr	r0, [pc, #128]	; (8000b28 <HAL_UART_RxCpltCallback+0x244>)
 8000aa8:	f7ff fd84 	bl	80005b4 <LCD_string>
		delay(1000);
 8000aac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab0:	f7ff fe71 	bl	8000796 <delay>
		LCD_command(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff fe31 	bl	800071c <LCD_command>
		LCD_command(0x83);
 8000aba:	2083      	movs	r0, #131	; 0x83
 8000abc:	f7ff fe2e 	bl	800071c <LCD_command>
		LCD_string("LOGIN TIME");
 8000ac0:	4818      	ldr	r0, [pc, #96]	; (8000b24 <HAL_UART_RxCpltCallback+0x240>)
 8000ac2:	f7ff fd77 	bl	80005b4 <LCD_string>
		LCD_command(0xC4);
 8000ac6:	20c4      	movs	r0, #196	; 0xc4
 8000ac8:	f7ff fe28 	bl	800071c <LCD_command>
		LCD_string(buffer2);
 8000acc:	4817      	ldr	r0, [pc, #92]	; (8000b2c <HAL_UART_RxCpltCallback+0x248>)
 8000ace:	f7ff fd71 	bl	80005b4 <LCD_string>
		delay(1000);
 8000ad2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad6:	f7ff fe5e 	bl	8000796 <delay>
		for(int i=0;i<z;i++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	e006      	b.n	8000aee <HAL_UART_RxCpltCallback+0x20a>
			strcpy(str,0);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	480c      	ldr	r0, [pc, #48]	; (8000b14 <HAL_UART_RxCpltCallback+0x230>)
 8000ae4:	f003 f86a 	bl	8003bbc <strcpy>
		for(int i=0;i<z;i++)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	3301      	adds	r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	dbf4      	blt.n	8000ae0 <HAL_UART_RxCpltCallback+0x1fc>
		z=0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
		LCD_command(1);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f7ff fe0e 	bl	800071c <LCD_command>
}
 8000b00:	bf00      	nop
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000196 	.word	0x20000196
 8000b0c:	20000160 	.word	0x20000160
 8000b10:	20000164 	.word	0x20000164
 8000b14:	20000198 	.word	0x20000198
 8000b18:	080044b0 	.word	0x080044b0
 8000b1c:	080044b4 	.word	0x080044b4
 8000b20:	080044c8 	.word	0x080044c8
 8000b24:	080044d4 	.word	0x080044d4
 8000b28:	200001ac 	.word	0x200001ac
 8000b2c:	200001bc 	.word	0x200001bc
 8000b30:	080044e0 	.word	0x080044e0
 8000b34:	080044e4 	.word	0x080044e4
 8000b38:	080044ec 	.word	0x080044ec
 8000b3c:	080044f0 	.word	0x080044f0

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	; 0x50
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	2230      	movs	r2, #48	; 0x30
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f003 f80c 	bl	8003b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <SystemClock_Config+0xb8>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a22      	ldr	r2, [pc, #136]	; (8000bf8 <SystemClock_Config+0xb8>)
 8000b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <SystemClock_Config+0xb8>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <SystemClock_Config+0xbc>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a1c      	ldr	r2, [pc, #112]	; (8000bfc <SystemClock_Config+0xbc>)
 8000b8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <SystemClock_Config+0xbc>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b9c:	230a      	movs	r3, #10
 8000b9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb0:	f107 0320 	add.w	r3, r7, #32
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 fff1 	bl	8001b9c <HAL_RCC_OscConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bc0:	f000 f920 	bl	8000e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 fa54 	bl	800208c <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bea:	f000 f90b 	bl	8000e04 <Error_Handler>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3750      	adds	r7, #80	; 0x50
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40007000 	.word	0x40007000

08000c00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_I2C1_Init+0x50>)
 8000c06:	4a13      	ldr	r2, [pc, #76]	; (8000c54 <MX_I2C1_Init+0x54>)
 8000c08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_I2C1_Init+0x50>)
 8000c0c:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <MX_I2C1_Init+0x58>)
 8000c0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_I2C1_Init+0x50>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_I2C1_Init+0x50>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_I2C1_Init+0x50>)
 8000c1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <MX_I2C1_Init+0x50>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_I2C1_Init+0x50>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <MX_I2C1_Init+0x50>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_I2C1_Init+0x50>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_I2C1_Init+0x50>)
 8000c3e:	f000 fe69 	bl	8001914 <HAL_I2C_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c48:	f000 f8dc 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000090 	.word	0x20000090
 8000c54:	40005400 	.word	0x40005400
 8000c58:	000186a0 	.word	0x000186a0

08000c5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c70:	2300      	movs	r3, #0
 8000c72:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <MX_RTC_Init+0xac>)
 8000c76:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <MX_RTC_Init+0xb0>)
 8000c78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c7a:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <MX_RTC_Init+0xac>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c80:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <MX_RTC_Init+0xac>)
 8000c82:	227f      	movs	r2, #127	; 0x7f
 8000c84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <MX_RTC_Init+0xac>)
 8000c88:	22ff      	movs	r2, #255	; 0xff
 8000c8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <MX_RTC_Init+0xac>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_RTC_Init+0xac>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_RTC_Init+0xac>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c9e:	481a      	ldr	r0, [pc, #104]	; (8000d08 <MX_RTC_Init+0xac>)
 8000ca0:	f001 fcc4 	bl	800262c <HAL_RTC_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000caa:	f000 f8ab 	bl	8000e04 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 8000cae:	230f      	movs	r3, #15
 8000cb0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 8000cb2:	233b      	movs	r3, #59	; 0x3b
 8000cb4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 45;
 8000cb6:	232d      	movs	r3, #45	; 0x2d
 8000cb8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480f      	ldr	r0, [pc, #60]	; (8000d08 <MX_RTC_Init+0xac>)
 8000cca:	f001 fd25 	bl	8002718 <HAL_RTC_SetTime>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000cd4:	f000 f896 	bl	8000e04 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8000cdc:	2312      	movs	r3, #18
 8000cde:	707b      	strb	r3, [r7, #1]
  sDate.Date = 27;
 8000ce0:	231b      	movs	r3, #27
 8000ce2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8000ce4:	2316      	movs	r3, #22
 8000ce6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <MX_RTC_Init+0xac>)
 8000cf0:	f001 fe0a 	bl	8002908 <HAL_RTC_SetDate>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000cfa:	f000 f883 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200000e4 	.word	0x200000e4
 8000d0c:	40002800 	.word	0x40002800

08000d10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_USART1_UART_Init+0x50>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d48:	f001 ff6e 	bl	8002c28 <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d52:	f000 f857 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000011c 	.word	0x2000011c
 8000d60:	40011000 	.word	0x40011000

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <MX_GPIO_Init+0x98>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a1e      	ldr	r2, [pc, #120]	; (8000dfc <MX_GPIO_Init+0x98>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <MX_GPIO_Init+0x98>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_GPIO_Init+0x98>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <MX_GPIO_Init+0x98>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_GPIO_Init+0x98>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_GPIO_Init+0x98>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <MX_GPIO_Init+0x98>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_GPIO_Init+0x98>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_Output1_Pin|MOTOR_Output2_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2103      	movs	r1, #3
 8000dd2:	480b      	ldr	r0, [pc, #44]	; (8000e00 <MX_GPIO_Init+0x9c>)
 8000dd4:	f000 fd84 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR_Output1_Pin MOTOR_Output2_Pin */
  GPIO_InitStruct.Pin = MOTOR_Output1_Pin|MOTOR_Output2_Pin;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4619      	mov	r1, r3
 8000dee:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_GPIO_Init+0x9c>)
 8000df0:	f000 fbda 	bl	80015a8 <HAL_GPIO_Init>

}
 8000df4:	bf00      	nop
 8000df6:	3720      	adds	r7, #32
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020800 	.word	0x40020800

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <Error_Handler+0x8>
	...

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	6413      	str	r3, [r2, #64]	; 0x40
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800

08000e60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <HAL_I2C_MspInit+0x84>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d12b      	bne.n	8000eda <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_I2C_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a17      	ldr	r2, [pc, #92]	; (8000ee8 <HAL_I2C_MspInit+0x88>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_I2C_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e9e:	23c0      	movs	r3, #192	; 0xc0
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea2:	2312      	movs	r3, #18
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <HAL_I2C_MspInit+0x8c>)
 8000eba:	f000 fb75 	bl	80015a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_I2C_MspInit+0x88>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_I2C_MspInit+0x88>)
 8000ec8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_I2C_MspInit+0x88>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	; 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020400 	.word	0x40020400

08000ef0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
 8000f08:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <HAL_RTC_MspInit+0x50>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d111      	bne.n	8000f38 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f14:	2302      	movs	r3, #2
 8000f16:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f1c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fa92 	bl	800244c <HAL_RCCEx_PeriphCLKConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000f2e:	f7ff ff69 	bl	8000e04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <HAL_RTC_MspInit+0x54>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40002800 	.word	0x40002800
 8000f44:	42470e3c 	.word	0x42470e3c

08000f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <HAL_UART_MspInit+0x94>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d134      	bne.n	8000fd4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f74:	f043 0310 	orr.w	r3, r3, #16
 8000f78:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f003 0310 	and.w	r3, r3, #16
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fa2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <HAL_UART_MspInit+0x9c>)
 8000fc0:	f000 faf2 	bl	80015a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2025      	movs	r0, #37	; 0x25
 8000fca:	f000 fa24 	bl	8001416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fce:	2025      	movs	r0, #37	; 0x25
 8000fd0:	f000 fa3d 	bl	800144e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fd4:	bf00      	nop
 8000fd6:	3728      	adds	r7, #40	; 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40011000 	.word	0x40011000
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <NMI_Handler+0x4>

08000fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <UsageFault_Handler+0x4>

08001006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001034:	f000 f8d0 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <USART1_IRQHandler+0x10>)
 8001042:	f001 fe6f 	bl	8002d24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000011c 	.word	0x2000011c

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f002 fd4a 	bl	8003b18 <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20020000 	.word	0x20020000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	200001cc 	.word	0x200001cc
 80010b8:	200001e8 	.word	0x200001e8

080010bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001118 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010e6:	490e      	ldr	r1, [pc, #56]	; (8001120 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010e8:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010fc:	4c0b      	ldr	r4, [pc, #44]	; (800112c <LoopFillZerobss+0x26>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800110a:	f7ff ffd7 	bl	80010bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110e:	f002 fd09 	bl	8003b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001112:	f7ff fb5d 	bl	80007d0 <main>
  bx  lr    
 8001116:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001118:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001124:	08004558 	.word	0x08004558
  ldr r2, =_sbss
 8001128:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800112c:	200001e4 	.word	0x200001e4

08001130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC_IRQHandler>
	...

08001134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <HAL_Init+0x40>)
 800113e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001142:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_Init+0x40>)
 800114a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800114e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <HAL_Init+0x40>)
 8001156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 f94f 	bl	8001400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001162:	200f      	movs	r0, #15
 8001164:	f000 f808 	bl	8001178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001168:	f7ff fe52 	bl	8000e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023c00 	.word	0x40023c00

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_InitTick+0x54>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x58>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f967 	bl	800146a <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d80a      	bhi.n	80011c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 f92f 	bl	8001416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_InitTick+0x5c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000004 	.word	0x20000004
 80011d0:	2000000c 	.word	0x2000000c
 80011d4:	20000008 	.word	0x20000008

080011d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x20>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x24>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <HAL_IncTick+0x24>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	2000000c 	.word	0x2000000c
 80011fc:	200001d0 	.word	0x200001d0

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_GetTick+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	200001d0 	.word	0x200001d0

08001218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff ffee 	bl	8001200 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001230:	d005      	beq.n	800123e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_Delay+0x44>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800123e:	bf00      	nop
 8001240:	f7ff ffde 	bl	8001200 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	429a      	cmp	r2, r3
 800124e:	d8f7      	bhi.n	8001240 <HAL_Delay+0x28>
  {
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000000c 	.word	0x2000000c

08001260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001292:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60d3      	str	r3, [r2, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4907      	ldr	r1, [pc, #28]	; (80012fc <__NVIC_EnableIRQ+0x38>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	; (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	; (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013cc:	d301      	bcc.n	80013d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <SysTick_Config+0x40>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013da:	210f      	movs	r1, #15
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f7ff ff8e 	bl	8001300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SysTick_Config+0x40>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <SysTick_Config+0x40>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff29 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001428:	f7ff ff3e 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 800142c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f7ff ff8e 	bl	8001354 <NVIC_EncodePriority>
 8001438:	4602      	mov	r2, r0
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff5d 	bl	8001300 <__NVIC_SetPriority>
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff31 	bl	80012c4 <__NVIC_EnableIRQ>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffa2 	bl	80013bc <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b084      	sub	sp, #16
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff feb6 	bl	8001200 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d008      	beq.n	80014b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e052      	b.n	800155a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0216 	bic.w	r2, r2, #22
 80014c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	695a      	ldr	r2, [r3, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d103      	bne.n	80014e4 <HAL_DMA_Abort+0x62>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0208 	bic.w	r2, r2, #8
 80014f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001504:	e013      	b.n	800152e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001506:	f7ff fe7b 	bl	8001200 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b05      	cmp	r3, #5
 8001512:	d90c      	bls.n	800152e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2220      	movs	r2, #32
 8001518:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2203      	movs	r2, #3
 800151e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e015      	b.n	800155a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1e4      	bne.n	8001506 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001540:	223f      	movs	r2, #63	; 0x3f
 8001542:	409a      	lsls	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d004      	beq.n	8001580 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e00c      	b.n	800159a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2205      	movs	r2, #5
 8001584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0201 	bic.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	e159      	b.n	8001878 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	429a      	cmp	r2, r3
 80015de:	f040 8148 	bne.w	8001872 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d005      	beq.n	80015fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d130      	bne.n	800165c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001630:	2201      	movs	r2, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b03      	cmp	r3, #3
 8001666:	d017      	beq.n	8001698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d123      	bne.n	80016ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	08da      	lsrs	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3208      	adds	r2, #8
 80016ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	08da      	lsrs	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3208      	adds	r2, #8
 80016e6:	69b9      	ldr	r1, [r7, #24]
 80016e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0203 	and.w	r2, r3, #3
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80a2 	beq.w	8001872 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b57      	ldr	r3, [pc, #348]	; (8001890 <HAL_GPIO_Init+0x2e8>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a56      	ldr	r2, [pc, #344]	; (8001890 <HAL_GPIO_Init+0x2e8>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b54      	ldr	r3, [pc, #336]	; (8001890 <HAL_GPIO_Init+0x2e8>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800174a:	4a52      	ldr	r2, [pc, #328]	; (8001894 <HAL_GPIO_Init+0x2ec>)
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a49      	ldr	r2, [pc, #292]	; (8001898 <HAL_GPIO_Init+0x2f0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d019      	beq.n	80017aa <HAL_GPIO_Init+0x202>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a48      	ldr	r2, [pc, #288]	; (800189c <HAL_GPIO_Init+0x2f4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x1fe>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a47      	ldr	r2, [pc, #284]	; (80018a0 <HAL_GPIO_Init+0x2f8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x1fa>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a46      	ldr	r2, [pc, #280]	; (80018a4 <HAL_GPIO_Init+0x2fc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x1f6>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a45      	ldr	r2, [pc, #276]	; (80018a8 <HAL_GPIO_Init+0x300>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x1f2>
 8001796:	2304      	movs	r3, #4
 8001798:	e008      	b.n	80017ac <HAL_GPIO_Init+0x204>
 800179a:	2307      	movs	r3, #7
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x204>
 800179e:	2303      	movs	r3, #3
 80017a0:	e004      	b.n	80017ac <HAL_GPIO_Init+0x204>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e002      	b.n	80017ac <HAL_GPIO_Init+0x204>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <HAL_GPIO_Init+0x204>
 80017aa:	2300      	movs	r3, #0
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	f002 0203 	and.w	r2, r2, #3
 80017b2:	0092      	lsls	r2, r2, #2
 80017b4:	4093      	lsls	r3, r2
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017bc:	4935      	ldr	r1, [pc, #212]	; (8001894 <HAL_GPIO_Init+0x2ec>)
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	089b      	lsrs	r3, r3, #2
 80017c2:	3302      	adds	r3, #2
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ca:	4b38      	ldr	r3, [pc, #224]	; (80018ac <HAL_GPIO_Init+0x304>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ee:	4a2f      	ldr	r2, [pc, #188]	; (80018ac <HAL_GPIO_Init+0x304>)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f4:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_GPIO_Init+0x304>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001818:	4a24      	ldr	r2, [pc, #144]	; (80018ac <HAL_GPIO_Init+0x304>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <HAL_GPIO_Init+0x304>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001842:	4a1a      	ldr	r2, [pc, #104]	; (80018ac <HAL_GPIO_Init+0x304>)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001848:	4b18      	ldr	r3, [pc, #96]	; (80018ac <HAL_GPIO_Init+0x304>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800186c:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <HAL_GPIO_Init+0x304>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3301      	adds	r3, #1
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	2b0f      	cmp	r3, #15
 800187c:	f67f aea2 	bls.w	80015c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3724      	adds	r7, #36	; 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800
 8001894:	40013800 	.word	0x40013800
 8001898:	40020000 	.word	0x40020000
 800189c:	40020400 	.word	0x40020400
 80018a0:	40020800 	.word	0x40020800
 80018a4:	40020c00 	.word	0x40020c00
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40013c00 	.word	0x40013c00

080018b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e001      	b.n	80018d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
 80018ec:	4613      	mov	r3, r2
 80018ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f0:	787b      	ldrb	r3, [r7, #1]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f6:	887a      	ldrh	r2, [r7, #2]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018fc:	e003      	b.n	8001906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018fe:	887b      	ldrh	r3, [r7, #2]
 8001900:	041a      	lsls	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	619a      	str	r2, [r3, #24]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e12b      	b.n	8001b7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d106      	bne.n	8001940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff fa90 	bl	8000e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2224      	movs	r2, #36	; 0x24
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001966:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001976:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001978:	f000 fd40 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
 800197c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4a81      	ldr	r2, [pc, #516]	; (8001b88 <HAL_I2C_Init+0x274>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d807      	bhi.n	8001998 <HAL_I2C_Init+0x84>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4a80      	ldr	r2, [pc, #512]	; (8001b8c <HAL_I2C_Init+0x278>)
 800198c:	4293      	cmp	r3, r2
 800198e:	bf94      	ite	ls
 8001990:	2301      	movls	r3, #1
 8001992:	2300      	movhi	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	e006      	b.n	80019a6 <HAL_I2C_Init+0x92>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4a7d      	ldr	r2, [pc, #500]	; (8001b90 <HAL_I2C_Init+0x27c>)
 800199c:	4293      	cmp	r3, r2
 800199e:	bf94      	ite	ls
 80019a0:	2301      	movls	r3, #1
 80019a2:	2300      	movhi	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e0e7      	b.n	8001b7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4a78      	ldr	r2, [pc, #480]	; (8001b94 <HAL_I2C_Init+0x280>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	0c9b      	lsrs	r3, r3, #18
 80019b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a6a      	ldr	r2, [pc, #424]	; (8001b88 <HAL_I2C_Init+0x274>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d802      	bhi.n	80019e8 <HAL_I2C_Init+0xd4>
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	3301      	adds	r3, #1
 80019e6:	e009      	b.n	80019fc <HAL_I2C_Init+0xe8>
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	4a69      	ldr	r2, [pc, #420]	; (8001b98 <HAL_I2C_Init+0x284>)
 80019f4:	fba2 2303 	umull	r2, r3, r2, r3
 80019f8:	099b      	lsrs	r3, r3, #6
 80019fa:	3301      	adds	r3, #1
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	430b      	orrs	r3, r1
 8001a02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	495c      	ldr	r1, [pc, #368]	; (8001b88 <HAL_I2C_Init+0x274>)
 8001a18:	428b      	cmp	r3, r1
 8001a1a:	d819      	bhi.n	8001a50 <HAL_I2C_Init+0x13c>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1e59      	subs	r1, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a2a:	1c59      	adds	r1, r3, #1
 8001a2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a30:	400b      	ands	r3, r1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00a      	beq.n	8001a4c <HAL_I2C_Init+0x138>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1e59      	subs	r1, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a44:	3301      	adds	r3, #1
 8001a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4a:	e051      	b.n	8001af0 <HAL_I2C_Init+0x1dc>
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	e04f      	b.n	8001af0 <HAL_I2C_Init+0x1dc>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d111      	bne.n	8001a7c <HAL_I2C_Init+0x168>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1e58      	subs	r0, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6859      	ldr	r1, [r3, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	440b      	add	r3, r1
 8001a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf0c      	ite	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2300      	movne	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	e012      	b.n	8001aa2 <HAL_I2C_Init+0x18e>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1e58      	subs	r0, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	0099      	lsls	r1, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a92:	3301      	adds	r3, #1
 8001a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_I2C_Init+0x196>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e022      	b.n	8001af0 <HAL_I2C_Init+0x1dc>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10e      	bne.n	8001ad0 <HAL_I2C_Init+0x1bc>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1e58      	subs	r0, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6859      	ldr	r1, [r3, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	440b      	add	r3, r1
 8001ac0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ace:	e00f      	b.n	8001af0 <HAL_I2C_Init+0x1dc>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1e58      	subs	r0, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	0099      	lsls	r1, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	6809      	ldr	r1, [r1, #0]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6911      	ldr	r1, [r2, #16]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68d2      	ldr	r2, [r2, #12]
 8001b2a:	4311      	orrs	r1, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	000186a0 	.word	0x000186a0
 8001b8c:	001e847f 	.word	0x001e847f
 8001b90:	003d08ff 	.word	0x003d08ff
 8001b94:	431bde83 	.word	0x431bde83
 8001b98:	10624dd3 	.word	0x10624dd3

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e267      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d075      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bba:	4b88      	ldr	r3, [pc, #544]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d00c      	beq.n	8001be0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc6:	4b85      	ldr	r3, [pc, #532]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d112      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bd2:	4b82      	ldr	r3, [pc, #520]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bde:	d10b      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	4b7e      	ldr	r3, [pc, #504]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d05b      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x108>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d157      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e242      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c00:	d106      	bne.n	8001c10 <HAL_RCC_OscConfig+0x74>
 8001c02:	4b76      	ldr	r3, [pc, #472]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a75      	ldr	r2, [pc, #468]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e01d      	b.n	8001c4c <HAL_RCC_OscConfig+0xb0>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x98>
 8001c1a:	4b70      	ldr	r3, [pc, #448]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a6f      	ldr	r2, [pc, #444]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b6d      	ldr	r3, [pc, #436]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a6c      	ldr	r2, [pc, #432]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e00b      	b.n	8001c4c <HAL_RCC_OscConfig+0xb0>
 8001c34:	4b69      	ldr	r3, [pc, #420]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a68      	ldr	r2, [pc, #416]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b66      	ldr	r3, [pc, #408]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a65      	ldr	r2, [pc, #404]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d013      	beq.n	8001c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fad4 	bl	8001200 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff fad0 	bl	8001200 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e207      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	4b5b      	ldr	r3, [pc, #364]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0xc0>
 8001c7a:	e014      	b.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fac0 	bl	8001200 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fabc 	bl	8001200 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1f3      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c96:	4b51      	ldr	r3, [pc, #324]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0xe8>
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d063      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cb2:	4b4a      	ldr	r3, [pc, #296]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d11c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cca:	4b44      	ldr	r3, [pc, #272]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d116      	bne.n	8001d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_RCC_OscConfig+0x152>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e1c7      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cee:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4937      	ldr	r1, [pc, #220]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	e03a      	b.n	8001d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0c:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <HAL_RCC_OscConfig+0x244>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7ff fa75 	bl	8001200 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fa71 	bl	8001200 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e1a8      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d38:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4925      	ldr	r1, [pc, #148]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	600b      	str	r3, [r1, #0]
 8001d4c:	e015      	b.n	8001d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4e:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <HAL_RCC_OscConfig+0x244>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fa54 	bl	8001200 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fa50 	bl	8001200 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e187      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d036      	beq.n	8001df4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d016      	beq.n	8001dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_RCC_OscConfig+0x248>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff fa34 	bl	8001200 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fa30 	bl	8001200 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e167      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x200>
 8001dba:	e01b      	b.n	8001df4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_RCC_OscConfig+0x248>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fa1d 	bl	8001200 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc8:	e00e      	b.n	8001de8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dca:	f7ff fa19 	bl	8001200 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d907      	bls.n	8001de8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e150      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	42470000 	.word	0x42470000
 8001de4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de8:	4b88      	ldr	r3, [pc, #544]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1ea      	bne.n	8001dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 8097 	beq.w	8001f30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e06:	4b81      	ldr	r3, [pc, #516]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10f      	bne.n	8001e32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	4b7d      	ldr	r3, [pc, #500]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	4a7c      	ldr	r2, [pc, #496]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	6413      	str	r3, [r2, #64]	; 0x40
 8001e22:	4b7a      	ldr	r3, [pc, #488]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e32:	4b77      	ldr	r3, [pc, #476]	; (8002010 <HAL_RCC_OscConfig+0x474>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3e:	4b74      	ldr	r3, [pc, #464]	; (8002010 <HAL_RCC_OscConfig+0x474>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a73      	ldr	r2, [pc, #460]	; (8002010 <HAL_RCC_OscConfig+0x474>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff f9d9 	bl	8001200 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7ff f9d5 	bl	8001200 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e10c      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4b6a      	ldr	r3, [pc, #424]	; (8002010 <HAL_RCC_OscConfig+0x474>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x2ea>
 8001e78:	4b64      	ldr	r3, [pc, #400]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7c:	4a63      	ldr	r2, [pc, #396]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6713      	str	r3, [r2, #112]	; 0x70
 8001e84:	e01c      	b.n	8001ec0 <HAL_RCC_OscConfig+0x324>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x30c>
 8001e8e:	4b5f      	ldr	r3, [pc, #380]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	4a5e      	ldr	r2, [pc, #376]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9a:	4b5c      	ldr	r3, [pc, #368]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9e:	4a5b      	ldr	r2, [pc, #364]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x324>
 8001ea8:	4b58      	ldr	r3, [pc, #352]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eac:	4a57      	ldr	r2, [pc, #348]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001eae:	f023 0301 	bic.w	r3, r3, #1
 8001eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb4:	4b55      	ldr	r3, [pc, #340]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb8:	4a54      	ldr	r2, [pc, #336]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001eba:	f023 0304 	bic.w	r3, r3, #4
 8001ebe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d015      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec8:	f7ff f99a 	bl	8001200 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed0:	f7ff f996 	bl	8001200 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e0cb      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee6:	4b49      	ldr	r3, [pc, #292]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0ee      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x334>
 8001ef2:	e014      	b.n	8001f1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef4:	f7ff f984 	bl	8001200 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efc:	f7ff f980 	bl	8001200 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e0b5      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f12:	4b3e      	ldr	r3, [pc, #248]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1ee      	bne.n	8001efc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d105      	bne.n	8001f30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f24:	4b39      	ldr	r3, [pc, #228]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	4a38      	ldr	r2, [pc, #224]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80a1 	beq.w	800207c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f3a:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d05c      	beq.n	8002000 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d141      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4e:	4b31      	ldr	r3, [pc, #196]	; (8002014 <HAL_RCC_OscConfig+0x478>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff f954 	bl	8001200 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff f950 	bl	8001200 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e087      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6e:	4b27      	ldr	r3, [pc, #156]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69da      	ldr	r2, [r3, #28]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	019b      	lsls	r3, r3, #6
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	085b      	lsrs	r3, r3, #1
 8001f92:	3b01      	subs	r3, #1
 8001f94:	041b      	lsls	r3, r3, #16
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	061b      	lsls	r3, r3, #24
 8001f9e:	491b      	ldr	r1, [pc, #108]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_RCC_OscConfig+0x478>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7ff f929 	bl	8001200 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7ff f925 	bl	8001200 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e05c      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f0      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x416>
 8001fd0:	e054      	b.n	800207c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <HAL_RCC_OscConfig+0x478>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff f912 	bl	8001200 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe0:	f7ff f90e 	bl	8001200 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e045      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x444>
 8001ffe:	e03d      	b.n	800207c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d107      	bne.n	8002018 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e038      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
 800200c:	40023800 	.word	0x40023800
 8002010:	40007000 	.word	0x40007000
 8002014:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002018:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_RCC_OscConfig+0x4ec>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d028      	beq.n	8002078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d121      	bne.n	8002078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d11a      	bne.n	8002078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002048:	4013      	ands	r3, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800204e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002050:	4293      	cmp	r3, r2
 8002052:	d111      	bne.n	8002078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	085b      	lsrs	r3, r3, #1
 8002060:	3b01      	subs	r3, #1
 8002062:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d107      	bne.n	8002078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800

0800208c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0cc      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a0:	4b68      	ldr	r3, [pc, #416]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d90c      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b65      	ldr	r3, [pc, #404]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b63      	ldr	r3, [pc, #396]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0b8      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e0:	4b59      	ldr	r3, [pc, #356]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a58      	ldr	r2, [pc, #352]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f8:	4b53      	ldr	r3, [pc, #332]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a52      	ldr	r2, [pc, #328]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002104:	4b50      	ldr	r3, [pc, #320]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	494d      	ldr	r1, [pc, #308]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d044      	beq.n	80021ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d119      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e07f      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d003      	beq.n	800214a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002146:	2b03      	cmp	r3, #3
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214a:	4b3f      	ldr	r3, [pc, #252]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e06f      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215a:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e067      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800216a:	4b37      	ldr	r3, [pc, #220]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f023 0203 	bic.w	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4934      	ldr	r1, [pc, #208]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	4313      	orrs	r3, r2
 800217a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800217c:	f7ff f840 	bl	8001200 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	e00a      	b.n	800219a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002184:	f7ff f83c 	bl	8001200 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e04f      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 020c 	and.w	r2, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1eb      	bne.n	8002184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ac:	4b25      	ldr	r3, [pc, #148]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d20c      	bcs.n	80021d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b22      	ldr	r3, [pc, #136]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e032      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4916      	ldr	r1, [pc, #88]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	490e      	ldr	r1, [pc, #56]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002212:	f000 f821 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8002216:	4602      	mov	r2, r0
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	490a      	ldr	r1, [pc, #40]	; (800224c <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	5ccb      	ldrb	r3, [r1, r3]
 8002226:	fa22 f303 	lsr.w	r3, r2, r3
 800222a:	4a09      	ldr	r2, [pc, #36]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_RCC_ClockConfig+0x1c8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe ffa0 	bl	8001178 <HAL_InitTick>

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023c00 	.word	0x40023c00
 8002248:	40023800 	.word	0x40023800
 800224c:	080044fc 	.word	0x080044fc
 8002250:	20000004 	.word	0x20000004
 8002254:	20000008 	.word	0x20000008

08002258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800225c:	b090      	sub	sp, #64	; 0x40
 800225e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	637b      	str	r3, [r7, #52]	; 0x34
 8002264:	2300      	movs	r3, #0
 8002266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002268:	2300      	movs	r3, #0
 800226a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002270:	4b59      	ldr	r3, [pc, #356]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b08      	cmp	r3, #8
 800227a:	d00d      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x40>
 800227c:	2b08      	cmp	r3, #8
 800227e:	f200 80a1 	bhi.w	80023c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x34>
 8002286:	2b04      	cmp	r3, #4
 8002288:	d003      	beq.n	8002292 <HAL_RCC_GetSysClockFreq+0x3a>
 800228a:	e09b      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800228c:	4b53      	ldr	r3, [pc, #332]	; (80023dc <HAL_RCC_GetSysClockFreq+0x184>)
 800228e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002290:	e09b      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002292:	4b53      	ldr	r3, [pc, #332]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002294:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002296:	e098      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002298:	4b4f      	ldr	r3, [pc, #316]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022a2:	4b4d      	ldr	r3, [pc, #308]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d028      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ae:	4b4a      	ldr	r3, [pc, #296]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	099b      	lsrs	r3, r3, #6
 80022b4:	2200      	movs	r2, #0
 80022b6:	623b      	str	r3, [r7, #32]
 80022b8:	627a      	str	r2, [r7, #36]	; 0x24
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022c0:	2100      	movs	r1, #0
 80022c2:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022c4:	fb03 f201 	mul.w	r2, r3, r1
 80022c8:	2300      	movs	r3, #0
 80022ca:	fb00 f303 	mul.w	r3, r0, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	4a43      	ldr	r2, [pc, #268]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022d2:	fba0 1202 	umull	r1, r2, r0, r2
 80022d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022d8:	460a      	mov	r2, r1
 80022da:	62ba      	str	r2, [r7, #40]	; 0x28
 80022dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022de:	4413      	add	r3, r2
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e4:	2200      	movs	r2, #0
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	61fa      	str	r2, [r7, #28]
 80022ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022f2:	f7fd ffdd 	bl	80002b0 <__aeabi_uldivmod>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4613      	mov	r3, r2
 80022fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022fe:	e053      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002300:	4b35      	ldr	r3, [pc, #212]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	099b      	lsrs	r3, r3, #6
 8002306:	2200      	movs	r2, #0
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	617a      	str	r2, [r7, #20]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002312:	f04f 0b00 	mov.w	fp, #0
 8002316:	4652      	mov	r2, sl
 8002318:	465b      	mov	r3, fp
 800231a:	f04f 0000 	mov.w	r0, #0
 800231e:	f04f 0100 	mov.w	r1, #0
 8002322:	0159      	lsls	r1, r3, #5
 8002324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002328:	0150      	lsls	r0, r2, #5
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	ebb2 080a 	subs.w	r8, r2, sl
 8002332:	eb63 090b 	sbc.w	r9, r3, fp
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002342:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002346:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800234a:	ebb2 0408 	subs.w	r4, r2, r8
 800234e:	eb63 0509 	sbc.w	r5, r3, r9
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	00eb      	lsls	r3, r5, #3
 800235c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002360:	00e2      	lsls	r2, r4, #3
 8002362:	4614      	mov	r4, r2
 8002364:	461d      	mov	r5, r3
 8002366:	eb14 030a 	adds.w	r3, r4, sl
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	eb45 030b 	adc.w	r3, r5, fp
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800237e:	4629      	mov	r1, r5
 8002380:	028b      	lsls	r3, r1, #10
 8002382:	4621      	mov	r1, r4
 8002384:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002388:	4621      	mov	r1, r4
 800238a:	028a      	lsls	r2, r1, #10
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002392:	2200      	movs	r2, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	60fa      	str	r2, [r7, #12]
 8002398:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800239c:	f7fd ff88 	bl	80002b0 <__aeabi_uldivmod>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4613      	mov	r3, r2
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	3301      	adds	r3, #1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80023b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023c2:	e002      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_RCC_GetSysClockFreq+0x184>)
 80023c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3740      	adds	r7, #64	; 0x40
 80023d0:	46bd      	mov	sp, r7
 80023d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800
 80023dc:	00f42400 	.word	0x00f42400
 80023e0:	017d7840 	.word	0x017d7840

080023e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000004 	.word	0x20000004

080023fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002400:	f7ff fff0 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	0a9b      	lsrs	r3, r3, #10
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4903      	ldr	r1, [pc, #12]	; (8002420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40023800 	.word	0x40023800
 8002420:	0800450c 	.word	0x0800450c

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002428:	f7ff ffdc 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	0b5b      	lsrs	r3, r3, #13
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4903      	ldr	r1, [pc, #12]	; (8002448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	0800450c 	.word	0x0800450c

0800244c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002470:	2b00      	cmp	r3, #0
 8002472:	d038      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002474:	4b68      	ldr	r3, [pc, #416]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800247a:	f7fe fec1 	bl	8001200 <HAL_GetTick>
 800247e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002482:	f7fe febd 	bl	8001200 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0bd      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002494:	4b61      	ldr	r3, [pc, #388]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f0      	bne.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	019b      	lsls	r3, r3, #6
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	071b      	lsls	r3, r3, #28
 80024b2:	495a      	ldr	r1, [pc, #360]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024ba:	4b57      	ldr	r3, [pc, #348]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024bc:	2201      	movs	r2, #1
 80024be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024c0:	f7fe fe9e 	bl	8001200 <HAL_GetTick>
 80024c4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80024c8:	f7fe fe9a 	bl	8001200 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e09a      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024da:	4b50      	ldr	r3, [pc, #320]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8083 	beq.w	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	4b48      	ldr	r3, [pc, #288]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	4a47      	ldr	r2, [pc, #284]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002502:	6413      	str	r3, [r2, #64]	; 0x40
 8002504:	4b45      	ldr	r3, [pc, #276]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002510:	4b43      	ldr	r3, [pc, #268]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a42      	ldr	r2, [pc, #264]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800251c:	f7fe fe70 	bl	8001200 <HAL_GetTick>
 8002520:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002524:	f7fe fe6c 	bl	8001200 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e06c      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002536:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002542:	4b36      	ldr	r3, [pc, #216]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d02f      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	429a      	cmp	r2, r3
 800255e:	d028      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002560:	4b2e      	ldr	r3, [pc, #184]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002568:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800256a:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002570:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002576:	4a29      	ldr	r2, [pc, #164]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d114      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe fe3a 	bl	8001200 <HAL_GetTick>
 800258c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258e:	e00a      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7fe fe36 	bl	8001200 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e034      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a6:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0ee      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025be:	d10d      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x190>
 80025c0:	4b16      	ldr	r3, [pc, #88]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80025d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d4:	4911      	ldr	r1, [pc, #68]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
 80025da:	e005      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	4a0e      	ldr	r2, [pc, #56]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025e6:	6093      	str	r3, [r2, #8]
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f4:	4909      	ldr	r1, [pc, #36]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	7d1a      	ldrb	r2, [r3, #20]
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800260c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	42470068 	.word	0x42470068
 800261c:	40023800 	.word	0x40023800
 8002620:	40007000 	.word	0x40007000
 8002624:	42470e40 	.word	0x42470e40
 8002628:	424711e0 	.word	0x424711e0

0800262c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e066      	b.n	8002710 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	7f5b      	ldrb	r3, [r3, #29]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d105      	bne.n	8002658 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe fc4c 	bl	8000ef0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	22ca      	movs	r2, #202	; 0xca
 8002664:	625a      	str	r2, [r3, #36]	; 0x24
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2253      	movs	r2, #83	; 0x53
 800266c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fa45 	bl	8002afe <RTC_EnterInitMode>
 8002674:	4603      	mov	r3, r0
 8002676:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d12c      	bne.n	80026d8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800268c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002690:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6899      	ldr	r1, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68d2      	ldr	r2, [r2, #12]
 80026b8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6919      	ldr	r1, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	041a      	lsls	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fa4c 	bl	8002b6c <RTC_ExitInitMode>
 80026d4:	4603      	mov	r3, r0
 80026d6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d113      	bne.n	8002706 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699a      	ldr	r2, [r3, #24]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	22ff      	movs	r2, #255	; 0xff
 800270c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800270e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	7f1b      	ldrb	r3, [r3, #28]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_RTC_SetTime+0x1c>
 8002730:	2302      	movs	r3, #2
 8002732:	e087      	b.n	8002844 <HAL_RTC_SetTime+0x12c>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2202      	movs	r2, #2
 800273e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d126      	bne.n	8002794 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2200      	movs	r2, #0
 8002758:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fa29 	bl	8002bb6 <RTC_ByteToBcd2>
 8002764:	4603      	mov	r3, r0
 8002766:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	785b      	ldrb	r3, [r3, #1]
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fa22 	bl	8002bb6 <RTC_ByteToBcd2>
 8002772:	4603      	mov	r3, r0
 8002774:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002776:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	789b      	ldrb	r3, [r3, #2]
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fa1a 	bl	8002bb6 <RTC_ByteToBcd2>
 8002782:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002784:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	78db      	ldrb	r3, [r3, #3]
 800278c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800278e:	4313      	orrs	r3, r2
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	e018      	b.n	80027c6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d102      	bne.n	80027a8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2200      	movs	r2, #0
 80027a6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	785b      	ldrb	r3, [r3, #1]
 80027b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027b4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80027ba:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	78db      	ldrb	r3, [r3, #3]
 80027c0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	22ca      	movs	r2, #202	; 0xca
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2253      	movs	r2, #83	; 0x53
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f991 	bl	8002afe <RTC_EnterInitMode>
 80027dc:	4603      	mov	r3, r0
 80027de:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d120      	bne.n	8002828 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80027f0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80027f4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002804:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6899      	ldr	r1, [r3, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	431a      	orrs	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f9a4 	bl	8002b6c <RTC_ExitInitMode>
 8002824:	4603      	mov	r3, r0
 8002826:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d102      	bne.n	8002834 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	22ff      	movs	r2, #255	; 0xff
 800283a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	771a      	strb	r2, [r3, #28]

  return status;
 8002842:	7cfb      	ldrb	r3, [r7, #19]
}
 8002844:	4618      	mov	r0, r3
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd90      	pop	{r4, r7, pc}

0800284c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800287e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002882:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	0c1b      	lsrs	r3, r3, #16
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800288e:	b2da      	uxtb	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	0d9b      	lsrs	r3, r3, #22
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d11a      	bne.n	80028fe <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 f98f 	bl	8002bf0 <RTC_Bcd2ToByte>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461a      	mov	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	785b      	ldrb	r3, [r3, #1]
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f986 	bl	8002bf0 <RTC_Bcd2ToByte>
 80028e4:	4603      	mov	r3, r0
 80028e6:	461a      	mov	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	789b      	ldrb	r3, [r3, #2]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 f97d 	bl	8002bf0 <RTC_Bcd2ToByte>
 80028f6:	4603      	mov	r3, r0
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	7f1b      	ldrb	r3, [r3, #28]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_RTC_SetDate+0x1c>
 8002920:	2302      	movs	r3, #2
 8002922:	e071      	b.n	8002a08 <HAL_RTC_SetDate+0x100>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2202      	movs	r2, #2
 800292e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10e      	bne.n	8002954 <HAL_RTC_SetDate+0x4c>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	785b      	ldrb	r3, [r3, #1]
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	785b      	ldrb	r3, [r3, #1]
 8002946:	f023 0310 	bic.w	r3, r3, #16
 800294a:	b2db      	uxtb	r3, r3
 800294c:	330a      	adds	r3, #10
 800294e:	b2da      	uxtb	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d11c      	bne.n	8002994 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	78db      	ldrb	r3, [r3, #3]
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f929 	bl	8002bb6 <RTC_ByteToBcd2>
 8002964:	4603      	mov	r3, r0
 8002966:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	785b      	ldrb	r3, [r3, #1]
 800296c:	4618      	mov	r0, r3
 800296e:	f000 f922 	bl	8002bb6 <RTC_ByteToBcd2>
 8002972:	4603      	mov	r3, r0
 8002974:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002976:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	789b      	ldrb	r3, [r3, #2]
 800297c:	4618      	mov	r0, r3
 800297e:	f000 f91a 	bl	8002bb6 <RTC_ByteToBcd2>
 8002982:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002984:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	e00e      	b.n	80029b2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	78db      	ldrb	r3, [r3, #3]
 8002998:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	785b      	ldrb	r3, [r3, #1]
 800299e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80029a0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80029a6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80029ae:	4313      	orrs	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	22ca      	movs	r2, #202	; 0xca
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2253      	movs	r2, #83	; 0x53
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f89b 	bl	8002afe <RTC_EnterInitMode>
 80029c8:	4603      	mov	r3, r0
 80029ca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10c      	bne.n	80029ec <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80029dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80029e0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f8c2 	bl	8002b6c <RTC_ExitInitMode>
 80029e8:	4603      	mov	r3, r0
 80029ea:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d102      	bne.n	80029f8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	22ff      	movs	r2, #255	; 0xff
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	771a      	strb	r2, [r3, #28]

  return status;
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	371c      	adds	r7, #28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd90      	pop	{r4, r7, pc}

08002a10 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a2a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	0c1b      	lsrs	r3, r3, #16
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	0a1b      	lsrs	r3, r3, #8
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	0b5b      	lsrs	r3, r3, #13
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d11a      	bne.n	8002aa4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	78db      	ldrb	r3, [r3, #3]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f8bc 	bl	8002bf0 <RTC_Bcd2ToByte>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 f8b3 	bl	8002bf0 <RTC_Bcd2ToByte>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	789b      	ldrb	r3, [r3, #2]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 f8aa 	bl	8002bf0 <RTC_Bcd2ToByte>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ac8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aca:	f7fe fb99 	bl	8001200 <HAL_GetTick>
 8002ace:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ad0:	e009      	b.n	8002ae6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ad2:	f7fe fb95 	bl	8001200 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e007      	b.n	8002af6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ee      	beq.n	8002ad2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d122      	bne.n	8002b62 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b2a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b2c:	f7fe fb68 	bl	8001200 <HAL_GetTick>
 8002b30:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b32:	e00c      	b.n	8002b4e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b34:	f7fe fb64 	bl	8001200 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b42:	d904      	bls.n	8002b4e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2204      	movs	r2, #4
 8002b48:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <RTC_EnterInitMode+0x64>
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d1e8      	bne.n	8002b34 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b86:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10a      	bne.n	8002bac <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ff89 	bl	8002aae <HAL_RTC_WaitForSynchro>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d004      	beq.n	8002bac <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002bc4:	e005      	b.n	8002bd2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	3b0a      	subs	r3, #10
 8002bd0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	2b09      	cmp	r3, #9
 8002bd6:	d8f6      	bhi.n	8002bc6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	b2db      	uxtb	r3, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	0092      	lsls	r2, r2, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	4413      	add	r3, r2
 8002c1a:	b2db      	uxtb	r3, r3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e03f      	b.n	8002cba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fe f97a 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2224      	movs	r2, #36	; 0x24
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fcdf 	bl	8003630 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ca0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d11d      	bne.n	8002d18 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_UART_Receive_IT+0x26>
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e016      	b.n	8002d1a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_UART_Receive_IT+0x38>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e00f      	b.n	8002d1a <HAL_UART_Receive_IT+0x58>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fab6 	bl	8003280 <UART_Start_Receive_IT>
 8002d14:	4603      	mov	r3, r0
 8002d16:	e000      	b.n	8002d1a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002d18:	2302      	movs	r3, #2
  }
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b0ba      	sub	sp, #232	; 0xe8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10f      	bne.n	8002d8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_UART_IRQHandler+0x66>
 8002d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fb99 	bl	80034ba <UART_Receive_IT>
      return;
 8002d88:	e256      	b.n	8003238 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80de 	beq.w	8002f50 <HAL_UART_IRQHandler+0x22c>
 8002d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d106      	bne.n	8002dae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80d1 	beq.w	8002f50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00b      	beq.n	8002dd2 <HAL_UART_IRQHandler+0xae>
 8002dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f043 0201 	orr.w	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_UART_IRQHandler+0xd2>
 8002dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f043 0202 	orr.w	r2, r3, #2
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00b      	beq.n	8002e1a <HAL_UART_IRQHandler+0xf6>
 8002e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f043 0204 	orr.w	r2, r3, #4
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d011      	beq.n	8002e4a <HAL_UART_IRQHandler+0x126>
 8002e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d105      	bne.n	8002e3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f043 0208 	orr.w	r2, r3, #8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 81ed 	beq.w	800322e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <HAL_UART_IRQHandler+0x14e>
 8002e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fb24 	bl	80034ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d103      	bne.n	8002e9e <HAL_UART_IRQHandler+0x17a>
 8002e96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d04f      	beq.n	8002f3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fa2c 	bl	80032fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eae:	2b40      	cmp	r3, #64	; 0x40
 8002eb0:	d141      	bne.n	8002f36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3314      	adds	r3, #20
 8002eb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ec0:	e853 3f00 	ldrex	r3, [r3]
 8002ec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3314      	adds	r3, #20
 8002eda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ede:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002eea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1d9      	bne.n	8002eb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d013      	beq.n	8002f2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	4a7d      	ldr	r2, [pc, #500]	; (8003100 <HAL_UART_IRQHandler+0x3dc>)
 8002f0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe fb25 	bl	8001562 <HAL_DMA_Abort_IT>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d016      	beq.n	8002f4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f2c:	e00e      	b.n	8002f4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f990 	bl	8003254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f34:	e00a      	b.n	8002f4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f98c 	bl	8003254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f3c:	e006      	b.n	8002f4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f988 	bl	8003254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f4a:	e170      	b.n	800322e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f4c:	bf00      	nop
    return;
 8002f4e:	e16e      	b.n	800322e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	f040 814a 	bne.w	80031ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8143 	beq.w	80031ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 813c 	beq.w	80031ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f96:	2b40      	cmp	r3, #64	; 0x40
 8002f98:	f040 80b4 	bne.w	8003104 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8140 	beq.w	8003232 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	f080 8139 	bcs.w	8003232 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd2:	f000 8088 	beq.w	80030e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	330c      	adds	r3, #12
 8002fdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fe4:	e853 3f00 	ldrex	r3, [r3]
 8002fe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002fec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	330c      	adds	r3, #12
 8002ffe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003002:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800300e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003012:	e841 2300 	strex	r3, r2, [r1]
 8003016:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800301a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1d9      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3314      	adds	r3, #20
 8003028:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800302c:	e853 3f00 	ldrex	r3, [r3]
 8003030:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003032:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3314      	adds	r3, #20
 8003042:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003046:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800304a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800304e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003052:	e841 2300 	strex	r3, r2, [r1]
 8003056:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1e1      	bne.n	8003022 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3314      	adds	r3, #20
 8003064:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003068:	e853 3f00 	ldrex	r3, [r3]
 800306c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800306e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3314      	adds	r3, #20
 800307e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003082:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003084:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003086:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003088:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800308a:	e841 2300 	strex	r3, r2, [r1]
 800308e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1e3      	bne.n	800305e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	330c      	adds	r3, #12
 80030aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ae:	e853 3f00 	ldrex	r3, [r3]
 80030b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b6:	f023 0310 	bic.w	r3, r3, #16
 80030ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	330c      	adds	r3, #12
 80030c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80030c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80030ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030d0:	e841 2300 	strex	r3, r2, [r1]
 80030d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e3      	bne.n	80030a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fe f9ce 	bl	8001482 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	4619      	mov	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8b6 	bl	8003268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030fc:	e099      	b.n	8003232 <HAL_UART_IRQHandler+0x50e>
 80030fe:	bf00      	nop
 8003100:	080033c3 	.word	0x080033c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800310c:	b29b      	uxth	r3, r3
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 808b 	beq.w	8003236 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003120:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8086 	beq.w	8003236 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	330c      	adds	r3, #12
 8003130:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003134:	e853 3f00 	ldrex	r3, [r3]
 8003138:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800313a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003140:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	330c      	adds	r3, #12
 800314a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800314e:	647a      	str	r2, [r7, #68]	; 0x44
 8003150:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003152:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003154:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003156:	e841 2300 	strex	r3, r2, [r1]
 800315a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800315c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1e3      	bne.n	800312a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3314      	adds	r3, #20
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	e853 3f00 	ldrex	r3, [r3]
 8003170:	623b      	str	r3, [r7, #32]
   return(result);
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	f023 0301 	bic.w	r3, r3, #1
 8003178:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3314      	adds	r3, #20
 8003182:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003186:	633a      	str	r2, [r7, #48]	; 0x30
 8003188:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800318c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318e:	e841 2300 	strex	r3, r2, [r1]
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1e3      	bne.n	8003162 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	330c      	adds	r3, #12
 80031ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	e853 3f00 	ldrex	r3, [r3]
 80031b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0310 	bic.w	r3, r3, #16
 80031be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	330c      	adds	r3, #12
 80031c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031cc:	61fa      	str	r2, [r7, #28]
 80031ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	69b9      	ldr	r1, [r7, #24]
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	617b      	str	r3, [r7, #20]
   return(result);
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e3      	bne.n	80031a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031e4:	4619      	mov	r1, r3
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f83e 	bl	8003268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031ec:	e023      	b.n	8003236 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <HAL_UART_IRQHandler+0x4ea>
 80031fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f8ef 	bl	80033ea <UART_Transmit_IT>
    return;
 800320c:	e014      	b.n	8003238 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800320e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00e      	beq.n	8003238 <HAL_UART_IRQHandler+0x514>
 800321a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800321e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f92f 	bl	800348a <UART_EndTransmit_IT>
    return;
 800322c:	e004      	b.n	8003238 <HAL_UART_IRQHandler+0x514>
    return;
 800322e:	bf00      	nop
 8003230:	e002      	b.n	8003238 <HAL_UART_IRQHandler+0x514>
      return;
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <HAL_UART_IRQHandler+0x514>
      return;
 8003236:	bf00      	nop
  }
}
 8003238:	37e8      	adds	r7, #232	; 0xe8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop

08003240 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	4613      	mov	r3, r2
 800328c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	88fa      	ldrh	r2, [r7, #6]
 8003298:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	88fa      	ldrh	r2, [r7, #6]
 800329e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2222      	movs	r2, #34	; 0x22
 80032aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0201 	orr.w	r2, r2, #1
 80032dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0220 	orr.w	r2, r2, #32
 80032ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b095      	sub	sp, #84	; 0x54
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	330c      	adds	r3, #12
 800330a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330e:	e853 3f00 	ldrex	r3, [r3]
 8003312:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800331a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	330c      	adds	r3, #12
 8003322:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003324:	643a      	str	r2, [r7, #64]	; 0x40
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003328:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800332a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800332c:	e841 2300 	strex	r3, r2, [r1]
 8003330:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e5      	bne.n	8003304 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3314      	adds	r3, #20
 800333e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	e853 3f00 	ldrex	r3, [r3]
 8003346:	61fb      	str	r3, [r7, #28]
   return(result);
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3314      	adds	r3, #20
 8003356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003358:	62fa      	str	r2, [r7, #44]	; 0x2c
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800335e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e5      	bne.n	8003338 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	2b01      	cmp	r3, #1
 8003372:	d119      	bne.n	80033a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	330c      	adds	r3, #12
 800337a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	e853 3f00 	ldrex	r3, [r3]
 8003382:	60bb      	str	r3, [r7, #8]
   return(result);
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f023 0310 	bic.w	r3, r3, #16
 800338a:	647b      	str	r3, [r7, #68]	; 0x44
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	330c      	adds	r3, #12
 8003392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003394:	61ba      	str	r2, [r7, #24]
 8003396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003398:	6979      	ldr	r1, [r7, #20]
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	e841 2300 	strex	r3, r2, [r1]
 80033a0:	613b      	str	r3, [r7, #16]
   return(result);
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e5      	bne.n	8003374 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033b6:	bf00      	nop
 80033b8:	3754      	adds	r7, #84	; 0x54
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f7ff ff39 	bl	8003254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033e2:	bf00      	nop
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b21      	cmp	r3, #33	; 0x21
 80033fc:	d13e      	bne.n	800347c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003406:	d114      	bne.n	8003432 <UART_Transmit_IT+0x48>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d110      	bne.n	8003432 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003424:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	1c9a      	adds	r2, r3, #2
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	621a      	str	r2, [r3, #32]
 8003430:	e008      	b.n	8003444 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	1c59      	adds	r1, r3, #1
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6211      	str	r1, [r2, #32]
 800343c:	781a      	ldrb	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29b      	uxth	r3, r3
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	4619      	mov	r1, r3
 8003452:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10f      	bne.n	8003478 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003466:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003476:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	e000      	b.n	800347e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
  }
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff fec8 	bl	8003240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b08c      	sub	sp, #48	; 0x30
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b22      	cmp	r3, #34	; 0x22
 80034cc:	f040 80ab 	bne.w	8003626 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d8:	d117      	bne.n	800350a <UART_Receive_IT+0x50>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d113      	bne.n	800350a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	1c9a      	adds	r2, r3, #2
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	629a      	str	r2, [r3, #40]	; 0x28
 8003508:	e026      	b.n	8003558 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003510:	2300      	movs	r3, #0
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351c:	d007      	beq.n	800352e <UART_Receive_IT+0x74>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10a      	bne.n	800353c <UART_Receive_IT+0x82>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	701a      	strb	r2, [r3, #0]
 800353a:	e008      	b.n	800354e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003548:	b2da      	uxtb	r2, r3
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29b      	uxth	r3, r3
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4619      	mov	r1, r3
 8003566:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003568:	2b00      	cmp	r3, #0
 800356a:	d15a      	bne.n	8003622 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0220 	bic.w	r2, r2, #32
 800357a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800358a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d135      	bne.n	8003618 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	330c      	adds	r3, #12
 80035b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	613b      	str	r3, [r7, #16]
   return(result);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f023 0310 	bic.w	r3, r3, #16
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	330c      	adds	r3, #12
 80035d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d2:	623a      	str	r2, [r7, #32]
 80035d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d6:	69f9      	ldr	r1, [r7, #28]
 80035d8:	6a3a      	ldr	r2, [r7, #32]
 80035da:	e841 2300 	strex	r3, r2, [r1]
 80035de:	61bb      	str	r3, [r7, #24]
   return(result);
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1e5      	bne.n	80035b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b10      	cmp	r3, #16
 80035f2:	d10a      	bne.n	800360a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff fe29 	bl	8003268 <HAL_UARTEx_RxEventCallback>
 8003616:	e002      	b.n	800361e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7fd f963 	bl	80008e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e002      	b.n	8003628 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	e000      	b.n	8003628 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003626:	2302      	movs	r3, #2
  }
}
 8003628:	4618      	mov	r0, r3
 800362a:	3730      	adds	r7, #48	; 0x30
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003634:	b0c0      	sub	sp, #256	; 0x100
 8003636:	af00      	add	r7, sp, #0
 8003638:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364c:	68d9      	ldr	r1, [r3, #12]
 800364e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	ea40 0301 	orr.w	r3, r0, r1
 8003658:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800365a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	431a      	orrs	r2, r3
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	431a      	orrs	r2, r3
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003688:	f021 010c 	bic.w	r1, r1, #12
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003696:	430b      	orrs	r3, r1
 8003698:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036aa:	6999      	ldr	r1, [r3, #24]
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	ea40 0301 	orr.w	r3, r0, r1
 80036b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4b8f      	ldr	r3, [pc, #572]	; (80038fc <UART_SetConfig+0x2cc>)
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d005      	beq.n	80036d0 <UART_SetConfig+0xa0>
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	4b8d      	ldr	r3, [pc, #564]	; (8003900 <UART_SetConfig+0x2d0>)
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d104      	bne.n	80036da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036d0:	f7fe fea8 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 80036d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036d8:	e003      	b.n	80036e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036da:	f7fe fe8f 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
 80036de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ec:	f040 810c 	bne.w	8003908 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036f4:	2200      	movs	r2, #0
 80036f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80036fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003702:	4622      	mov	r2, r4
 8003704:	462b      	mov	r3, r5
 8003706:	1891      	adds	r1, r2, r2
 8003708:	65b9      	str	r1, [r7, #88]	; 0x58
 800370a:	415b      	adcs	r3, r3
 800370c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800370e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003712:	4621      	mov	r1, r4
 8003714:	eb12 0801 	adds.w	r8, r2, r1
 8003718:	4629      	mov	r1, r5
 800371a:	eb43 0901 	adc.w	r9, r3, r1
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800372a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800372e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003732:	4690      	mov	r8, r2
 8003734:	4699      	mov	r9, r3
 8003736:	4623      	mov	r3, r4
 8003738:	eb18 0303 	adds.w	r3, r8, r3
 800373c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003740:	462b      	mov	r3, r5
 8003742:	eb49 0303 	adc.w	r3, r9, r3
 8003746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800374a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003756:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800375a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800375e:	460b      	mov	r3, r1
 8003760:	18db      	adds	r3, r3, r3
 8003762:	653b      	str	r3, [r7, #80]	; 0x50
 8003764:	4613      	mov	r3, r2
 8003766:	eb42 0303 	adc.w	r3, r2, r3
 800376a:	657b      	str	r3, [r7, #84]	; 0x54
 800376c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003770:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003774:	f7fc fd9c 	bl	80002b0 <__aeabi_uldivmod>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4b61      	ldr	r3, [pc, #388]	; (8003904 <UART_SetConfig+0x2d4>)
 800377e:	fba3 2302 	umull	r2, r3, r3, r2
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	011c      	lsls	r4, r3, #4
 8003786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800378a:	2200      	movs	r2, #0
 800378c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003790:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003794:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003798:	4642      	mov	r2, r8
 800379a:	464b      	mov	r3, r9
 800379c:	1891      	adds	r1, r2, r2
 800379e:	64b9      	str	r1, [r7, #72]	; 0x48
 80037a0:	415b      	adcs	r3, r3
 80037a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037a8:	4641      	mov	r1, r8
 80037aa:	eb12 0a01 	adds.w	sl, r2, r1
 80037ae:	4649      	mov	r1, r9
 80037b0:	eb43 0b01 	adc.w	fp, r3, r1
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037c8:	4692      	mov	sl, r2
 80037ca:	469b      	mov	fp, r3
 80037cc:	4643      	mov	r3, r8
 80037ce:	eb1a 0303 	adds.w	r3, sl, r3
 80037d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037d6:	464b      	mov	r3, r9
 80037d8:	eb4b 0303 	adc.w	r3, fp, r3
 80037dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80037f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037f4:	460b      	mov	r3, r1
 80037f6:	18db      	adds	r3, r3, r3
 80037f8:	643b      	str	r3, [r7, #64]	; 0x40
 80037fa:	4613      	mov	r3, r2
 80037fc:	eb42 0303 	adc.w	r3, r2, r3
 8003800:	647b      	str	r3, [r7, #68]	; 0x44
 8003802:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003806:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800380a:	f7fc fd51 	bl	80002b0 <__aeabi_uldivmod>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4611      	mov	r1, r2
 8003814:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <UART_SetConfig+0x2d4>)
 8003816:	fba3 2301 	umull	r2, r3, r3, r1
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	2264      	movs	r2, #100	; 0x64
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	1acb      	subs	r3, r1, r3
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800382a:	4b36      	ldr	r3, [pc, #216]	; (8003904 <UART_SetConfig+0x2d4>)
 800382c:	fba3 2302 	umull	r2, r3, r3, r2
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003838:	441c      	add	r4, r3
 800383a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800383e:	2200      	movs	r2, #0
 8003840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003844:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003848:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800384c:	4642      	mov	r2, r8
 800384e:	464b      	mov	r3, r9
 8003850:	1891      	adds	r1, r2, r2
 8003852:	63b9      	str	r1, [r7, #56]	; 0x38
 8003854:	415b      	adcs	r3, r3
 8003856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003858:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800385c:	4641      	mov	r1, r8
 800385e:	1851      	adds	r1, r2, r1
 8003860:	6339      	str	r1, [r7, #48]	; 0x30
 8003862:	4649      	mov	r1, r9
 8003864:	414b      	adcs	r3, r1
 8003866:	637b      	str	r3, [r7, #52]	; 0x34
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003874:	4659      	mov	r1, fp
 8003876:	00cb      	lsls	r3, r1, #3
 8003878:	4651      	mov	r1, sl
 800387a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800387e:	4651      	mov	r1, sl
 8003880:	00ca      	lsls	r2, r1, #3
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	4603      	mov	r3, r0
 8003888:	4642      	mov	r2, r8
 800388a:	189b      	adds	r3, r3, r2
 800388c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003890:	464b      	mov	r3, r9
 8003892:	460a      	mov	r2, r1
 8003894:	eb42 0303 	adc.w	r3, r2, r3
 8003898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038b0:	460b      	mov	r3, r1
 80038b2:	18db      	adds	r3, r3, r3
 80038b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038b6:	4613      	mov	r3, r2
 80038b8:	eb42 0303 	adc.w	r3, r2, r3
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038c6:	f7fc fcf3 	bl	80002b0 <__aeabi_uldivmod>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <UART_SetConfig+0x2d4>)
 80038d0:	fba3 1302 	umull	r1, r3, r3, r2
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	2164      	movs	r1, #100	; 0x64
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	3332      	adds	r3, #50	; 0x32
 80038e2:	4a08      	ldr	r2, [pc, #32]	; (8003904 <UART_SetConfig+0x2d4>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	f003 0207 	and.w	r2, r3, #7
 80038ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4422      	add	r2, r4
 80038f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038f8:	e105      	b.n	8003b06 <UART_SetConfig+0x4d6>
 80038fa:	bf00      	nop
 80038fc:	40011000 	.word	0x40011000
 8003900:	40011400 	.word	0x40011400
 8003904:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800390c:	2200      	movs	r2, #0
 800390e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003912:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003916:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800391a:	4642      	mov	r2, r8
 800391c:	464b      	mov	r3, r9
 800391e:	1891      	adds	r1, r2, r2
 8003920:	6239      	str	r1, [r7, #32]
 8003922:	415b      	adcs	r3, r3
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
 8003926:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800392a:	4641      	mov	r1, r8
 800392c:	1854      	adds	r4, r2, r1
 800392e:	4649      	mov	r1, r9
 8003930:	eb43 0501 	adc.w	r5, r3, r1
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	00eb      	lsls	r3, r5, #3
 800393e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003942:	00e2      	lsls	r2, r4, #3
 8003944:	4614      	mov	r4, r2
 8003946:	461d      	mov	r5, r3
 8003948:	4643      	mov	r3, r8
 800394a:	18e3      	adds	r3, r4, r3
 800394c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003950:	464b      	mov	r3, r9
 8003952:	eb45 0303 	adc.w	r3, r5, r3
 8003956:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003966:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003976:	4629      	mov	r1, r5
 8003978:	008b      	lsls	r3, r1, #2
 800397a:	4621      	mov	r1, r4
 800397c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003980:	4621      	mov	r1, r4
 8003982:	008a      	lsls	r2, r1, #2
 8003984:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003988:	f7fc fc92 	bl	80002b0 <__aeabi_uldivmod>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4b60      	ldr	r3, [pc, #384]	; (8003b14 <UART_SetConfig+0x4e4>)
 8003992:	fba3 2302 	umull	r2, r3, r3, r2
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	011c      	lsls	r4, r3, #4
 800399a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039ac:	4642      	mov	r2, r8
 80039ae:	464b      	mov	r3, r9
 80039b0:	1891      	adds	r1, r2, r2
 80039b2:	61b9      	str	r1, [r7, #24]
 80039b4:	415b      	adcs	r3, r3
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039bc:	4641      	mov	r1, r8
 80039be:	1851      	adds	r1, r2, r1
 80039c0:	6139      	str	r1, [r7, #16]
 80039c2:	4649      	mov	r1, r9
 80039c4:	414b      	adcs	r3, r1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039d4:	4659      	mov	r1, fp
 80039d6:	00cb      	lsls	r3, r1, #3
 80039d8:	4651      	mov	r1, sl
 80039da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039de:	4651      	mov	r1, sl
 80039e0:	00ca      	lsls	r2, r1, #3
 80039e2:	4610      	mov	r0, r2
 80039e4:	4619      	mov	r1, r3
 80039e6:	4603      	mov	r3, r0
 80039e8:	4642      	mov	r2, r8
 80039ea:	189b      	adds	r3, r3, r2
 80039ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039f0:	464b      	mov	r3, r9
 80039f2:	460a      	mov	r2, r1
 80039f4:	eb42 0303 	adc.w	r3, r2, r3
 80039f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a14:	4649      	mov	r1, r9
 8003a16:	008b      	lsls	r3, r1, #2
 8003a18:	4641      	mov	r1, r8
 8003a1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a1e:	4641      	mov	r1, r8
 8003a20:	008a      	lsls	r2, r1, #2
 8003a22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a26:	f7fc fc43 	bl	80002b0 <__aeabi_uldivmod>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <UART_SetConfig+0x4e4>)
 8003a30:	fba3 1302 	umull	r1, r3, r3, r2
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	2164      	movs	r1, #100	; 0x64
 8003a38:	fb01 f303 	mul.w	r3, r1, r3
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	3332      	adds	r3, #50	; 0x32
 8003a42:	4a34      	ldr	r2, [pc, #208]	; (8003b14 <UART_SetConfig+0x4e4>)
 8003a44:	fba2 2303 	umull	r2, r3, r2, r3
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a4e:	441c      	add	r4, r3
 8003a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a54:	2200      	movs	r2, #0
 8003a56:	673b      	str	r3, [r7, #112]	; 0x70
 8003a58:	677a      	str	r2, [r7, #116]	; 0x74
 8003a5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a5e:	4642      	mov	r2, r8
 8003a60:	464b      	mov	r3, r9
 8003a62:	1891      	adds	r1, r2, r2
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	415b      	adcs	r3, r3
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a6e:	4641      	mov	r1, r8
 8003a70:	1851      	adds	r1, r2, r1
 8003a72:	6039      	str	r1, [r7, #0]
 8003a74:	4649      	mov	r1, r9
 8003a76:	414b      	adcs	r3, r1
 8003a78:	607b      	str	r3, [r7, #4]
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a86:	4659      	mov	r1, fp
 8003a88:	00cb      	lsls	r3, r1, #3
 8003a8a:	4651      	mov	r1, sl
 8003a8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a90:	4651      	mov	r1, sl
 8003a92:	00ca      	lsls	r2, r1, #3
 8003a94:	4610      	mov	r0, r2
 8003a96:	4619      	mov	r1, r3
 8003a98:	4603      	mov	r3, r0
 8003a9a:	4642      	mov	r2, r8
 8003a9c:	189b      	adds	r3, r3, r2
 8003a9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	460a      	mov	r2, r1
 8003aa4:	eb42 0303 	adc.w	r3, r2, r3
 8003aa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ab4:	667a      	str	r2, [r7, #100]	; 0x64
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	008b      	lsls	r3, r1, #2
 8003ac6:	4641      	mov	r1, r8
 8003ac8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003acc:	4641      	mov	r1, r8
 8003ace:	008a      	lsls	r2, r1, #2
 8003ad0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ad4:	f7fc fbec 	bl	80002b0 <__aeabi_uldivmod>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <UART_SetConfig+0x4e4>)
 8003ade:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	2164      	movs	r1, #100	; 0x64
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	3332      	adds	r3, #50	; 0x32
 8003af0:	4a08      	ldr	r2, [pc, #32]	; (8003b14 <UART_SetConfig+0x4e4>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	f003 020f 	and.w	r2, r3, #15
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4422      	add	r2, r4
 8003b04:	609a      	str	r2, [r3, #8]
}
 8003b06:	bf00      	nop
 8003b08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b12:	bf00      	nop
 8003b14:	51eb851f 	.word	0x51eb851f

08003b18 <__errno>:
 8003b18:	4b01      	ldr	r3, [pc, #4]	; (8003b20 <__errno+0x8>)
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000010 	.word	0x20000010

08003b24 <__libc_init_array>:
 8003b24:	b570      	push	{r4, r5, r6, lr}
 8003b26:	4d0d      	ldr	r5, [pc, #52]	; (8003b5c <__libc_init_array+0x38>)
 8003b28:	4c0d      	ldr	r4, [pc, #52]	; (8003b60 <__libc_init_array+0x3c>)
 8003b2a:	1b64      	subs	r4, r4, r5
 8003b2c:	10a4      	asrs	r4, r4, #2
 8003b2e:	2600      	movs	r6, #0
 8003b30:	42a6      	cmp	r6, r4
 8003b32:	d109      	bne.n	8003b48 <__libc_init_array+0x24>
 8003b34:	4d0b      	ldr	r5, [pc, #44]	; (8003b64 <__libc_init_array+0x40>)
 8003b36:	4c0c      	ldr	r4, [pc, #48]	; (8003b68 <__libc_init_array+0x44>)
 8003b38:	f000 fc96 	bl	8004468 <_init>
 8003b3c:	1b64      	subs	r4, r4, r5
 8003b3e:	10a4      	asrs	r4, r4, #2
 8003b40:	2600      	movs	r6, #0
 8003b42:	42a6      	cmp	r6, r4
 8003b44:	d105      	bne.n	8003b52 <__libc_init_array+0x2e>
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4c:	4798      	blx	r3
 8003b4e:	3601      	adds	r6, #1
 8003b50:	e7ee      	b.n	8003b30 <__libc_init_array+0xc>
 8003b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b56:	4798      	blx	r3
 8003b58:	3601      	adds	r6, #1
 8003b5a:	e7f2      	b.n	8003b42 <__libc_init_array+0x1e>
 8003b5c:	08004550 	.word	0x08004550
 8003b60:	08004550 	.word	0x08004550
 8003b64:	08004550 	.word	0x08004550
 8003b68:	08004554 	.word	0x08004554

08003b6c <memset>:
 8003b6c:	4402      	add	r2, r0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d100      	bne.n	8003b76 <memset+0xa>
 8003b74:	4770      	bx	lr
 8003b76:	f803 1b01 	strb.w	r1, [r3], #1
 8003b7a:	e7f9      	b.n	8003b70 <memset+0x4>

08003b7c <siprintf>:
 8003b7c:	b40e      	push	{r1, r2, r3}
 8003b7e:	b500      	push	{lr}
 8003b80:	b09c      	sub	sp, #112	; 0x70
 8003b82:	ab1d      	add	r3, sp, #116	; 0x74
 8003b84:	9002      	str	r0, [sp, #8]
 8003b86:	9006      	str	r0, [sp, #24]
 8003b88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b8c:	4809      	ldr	r0, [pc, #36]	; (8003bb4 <siprintf+0x38>)
 8003b8e:	9107      	str	r1, [sp, #28]
 8003b90:	9104      	str	r1, [sp, #16]
 8003b92:	4909      	ldr	r1, [pc, #36]	; (8003bb8 <siprintf+0x3c>)
 8003b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b98:	9105      	str	r1, [sp, #20]
 8003b9a:	6800      	ldr	r0, [r0, #0]
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	a902      	add	r1, sp, #8
 8003ba0:	f000 f870 	bl	8003c84 <_svfiprintf_r>
 8003ba4:	9b02      	ldr	r3, [sp, #8]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]
 8003baa:	b01c      	add	sp, #112	; 0x70
 8003bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bb0:	b003      	add	sp, #12
 8003bb2:	4770      	bx	lr
 8003bb4:	20000010 	.word	0x20000010
 8003bb8:	ffff0208 	.word	0xffff0208

08003bbc <strcpy>:
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bc2:	f803 2b01 	strb.w	r2, [r3], #1
 8003bc6:	2a00      	cmp	r2, #0
 8003bc8:	d1f9      	bne.n	8003bbe <strcpy+0x2>
 8003bca:	4770      	bx	lr

08003bcc <__ssputs_r>:
 8003bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd0:	688e      	ldr	r6, [r1, #8]
 8003bd2:	429e      	cmp	r6, r3
 8003bd4:	4682      	mov	sl, r0
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	4690      	mov	r8, r2
 8003bda:	461f      	mov	r7, r3
 8003bdc:	d838      	bhi.n	8003c50 <__ssputs_r+0x84>
 8003bde:	898a      	ldrh	r2, [r1, #12]
 8003be0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003be4:	d032      	beq.n	8003c4c <__ssputs_r+0x80>
 8003be6:	6825      	ldr	r5, [r4, #0]
 8003be8:	6909      	ldr	r1, [r1, #16]
 8003bea:	eba5 0901 	sub.w	r9, r5, r1
 8003bee:	6965      	ldr	r5, [r4, #20]
 8003bf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	444b      	add	r3, r9
 8003bfc:	106d      	asrs	r5, r5, #1
 8003bfe:	429d      	cmp	r5, r3
 8003c00:	bf38      	it	cc
 8003c02:	461d      	movcc	r5, r3
 8003c04:	0553      	lsls	r3, r2, #21
 8003c06:	d531      	bpl.n	8003c6c <__ssputs_r+0xa0>
 8003c08:	4629      	mov	r1, r5
 8003c0a:	f000 fb63 	bl	80042d4 <_malloc_r>
 8003c0e:	4606      	mov	r6, r0
 8003c10:	b950      	cbnz	r0, 8003c28 <__ssputs_r+0x5c>
 8003c12:	230c      	movs	r3, #12
 8003c14:	f8ca 3000 	str.w	r3, [sl]
 8003c18:	89a3      	ldrh	r3, [r4, #12]
 8003c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c1e:	81a3      	strh	r3, [r4, #12]
 8003c20:	f04f 30ff 	mov.w	r0, #4294967295
 8003c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c28:	6921      	ldr	r1, [r4, #16]
 8003c2a:	464a      	mov	r2, r9
 8003c2c:	f000 fabe 	bl	80041ac <memcpy>
 8003c30:	89a3      	ldrh	r3, [r4, #12]
 8003c32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c3a:	81a3      	strh	r3, [r4, #12]
 8003c3c:	6126      	str	r6, [r4, #16]
 8003c3e:	6165      	str	r5, [r4, #20]
 8003c40:	444e      	add	r6, r9
 8003c42:	eba5 0509 	sub.w	r5, r5, r9
 8003c46:	6026      	str	r6, [r4, #0]
 8003c48:	60a5      	str	r5, [r4, #8]
 8003c4a:	463e      	mov	r6, r7
 8003c4c:	42be      	cmp	r6, r7
 8003c4e:	d900      	bls.n	8003c52 <__ssputs_r+0x86>
 8003c50:	463e      	mov	r6, r7
 8003c52:	6820      	ldr	r0, [r4, #0]
 8003c54:	4632      	mov	r2, r6
 8003c56:	4641      	mov	r1, r8
 8003c58:	f000 fab6 	bl	80041c8 <memmove>
 8003c5c:	68a3      	ldr	r3, [r4, #8]
 8003c5e:	1b9b      	subs	r3, r3, r6
 8003c60:	60a3      	str	r3, [r4, #8]
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	4433      	add	r3, r6
 8003c66:	6023      	str	r3, [r4, #0]
 8003c68:	2000      	movs	r0, #0
 8003c6a:	e7db      	b.n	8003c24 <__ssputs_r+0x58>
 8003c6c:	462a      	mov	r2, r5
 8003c6e:	f000 fba5 	bl	80043bc <_realloc_r>
 8003c72:	4606      	mov	r6, r0
 8003c74:	2800      	cmp	r0, #0
 8003c76:	d1e1      	bne.n	8003c3c <__ssputs_r+0x70>
 8003c78:	6921      	ldr	r1, [r4, #16]
 8003c7a:	4650      	mov	r0, sl
 8003c7c:	f000 fabe 	bl	80041fc <_free_r>
 8003c80:	e7c7      	b.n	8003c12 <__ssputs_r+0x46>
	...

08003c84 <_svfiprintf_r>:
 8003c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c88:	4698      	mov	r8, r3
 8003c8a:	898b      	ldrh	r3, [r1, #12]
 8003c8c:	061b      	lsls	r3, r3, #24
 8003c8e:	b09d      	sub	sp, #116	; 0x74
 8003c90:	4607      	mov	r7, r0
 8003c92:	460d      	mov	r5, r1
 8003c94:	4614      	mov	r4, r2
 8003c96:	d50e      	bpl.n	8003cb6 <_svfiprintf_r+0x32>
 8003c98:	690b      	ldr	r3, [r1, #16]
 8003c9a:	b963      	cbnz	r3, 8003cb6 <_svfiprintf_r+0x32>
 8003c9c:	2140      	movs	r1, #64	; 0x40
 8003c9e:	f000 fb19 	bl	80042d4 <_malloc_r>
 8003ca2:	6028      	str	r0, [r5, #0]
 8003ca4:	6128      	str	r0, [r5, #16]
 8003ca6:	b920      	cbnz	r0, 8003cb2 <_svfiprintf_r+0x2e>
 8003ca8:	230c      	movs	r3, #12
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb0:	e0d1      	b.n	8003e56 <_svfiprintf_r+0x1d2>
 8003cb2:	2340      	movs	r3, #64	; 0x40
 8003cb4:	616b      	str	r3, [r5, #20]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8003cba:	2320      	movs	r3, #32
 8003cbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cc4:	2330      	movs	r3, #48	; 0x30
 8003cc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003e70 <_svfiprintf_r+0x1ec>
 8003cca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cce:	f04f 0901 	mov.w	r9, #1
 8003cd2:	4623      	mov	r3, r4
 8003cd4:	469a      	mov	sl, r3
 8003cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cda:	b10a      	cbz	r2, 8003ce0 <_svfiprintf_r+0x5c>
 8003cdc:	2a25      	cmp	r2, #37	; 0x25
 8003cde:	d1f9      	bne.n	8003cd4 <_svfiprintf_r+0x50>
 8003ce0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ce4:	d00b      	beq.n	8003cfe <_svfiprintf_r+0x7a>
 8003ce6:	465b      	mov	r3, fp
 8003ce8:	4622      	mov	r2, r4
 8003cea:	4629      	mov	r1, r5
 8003cec:	4638      	mov	r0, r7
 8003cee:	f7ff ff6d 	bl	8003bcc <__ssputs_r>
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	f000 80aa 	beq.w	8003e4c <_svfiprintf_r+0x1c8>
 8003cf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cfa:	445a      	add	r2, fp
 8003cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8003cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 80a2 	beq.w	8003e4c <_svfiprintf_r+0x1c8>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d12:	f10a 0a01 	add.w	sl, sl, #1
 8003d16:	9304      	str	r3, [sp, #16]
 8003d18:	9307      	str	r3, [sp, #28]
 8003d1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d1e:	931a      	str	r3, [sp, #104]	; 0x68
 8003d20:	4654      	mov	r4, sl
 8003d22:	2205      	movs	r2, #5
 8003d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d28:	4851      	ldr	r0, [pc, #324]	; (8003e70 <_svfiprintf_r+0x1ec>)
 8003d2a:	f7fc fa71 	bl	8000210 <memchr>
 8003d2e:	9a04      	ldr	r2, [sp, #16]
 8003d30:	b9d8      	cbnz	r0, 8003d6a <_svfiprintf_r+0xe6>
 8003d32:	06d0      	lsls	r0, r2, #27
 8003d34:	bf44      	itt	mi
 8003d36:	2320      	movmi	r3, #32
 8003d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d3c:	0711      	lsls	r1, r2, #28
 8003d3e:	bf44      	itt	mi
 8003d40:	232b      	movmi	r3, #43	; 0x2b
 8003d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d46:	f89a 3000 	ldrb.w	r3, [sl]
 8003d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d4c:	d015      	beq.n	8003d7a <_svfiprintf_r+0xf6>
 8003d4e:	9a07      	ldr	r2, [sp, #28]
 8003d50:	4654      	mov	r4, sl
 8003d52:	2000      	movs	r0, #0
 8003d54:	f04f 0c0a 	mov.w	ip, #10
 8003d58:	4621      	mov	r1, r4
 8003d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d5e:	3b30      	subs	r3, #48	; 0x30
 8003d60:	2b09      	cmp	r3, #9
 8003d62:	d94e      	bls.n	8003e02 <_svfiprintf_r+0x17e>
 8003d64:	b1b0      	cbz	r0, 8003d94 <_svfiprintf_r+0x110>
 8003d66:	9207      	str	r2, [sp, #28]
 8003d68:	e014      	b.n	8003d94 <_svfiprintf_r+0x110>
 8003d6a:	eba0 0308 	sub.w	r3, r0, r8
 8003d6e:	fa09 f303 	lsl.w	r3, r9, r3
 8003d72:	4313      	orrs	r3, r2
 8003d74:	9304      	str	r3, [sp, #16]
 8003d76:	46a2      	mov	sl, r4
 8003d78:	e7d2      	b.n	8003d20 <_svfiprintf_r+0x9c>
 8003d7a:	9b03      	ldr	r3, [sp, #12]
 8003d7c:	1d19      	adds	r1, r3, #4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	9103      	str	r1, [sp, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	bfbb      	ittet	lt
 8003d86:	425b      	neglt	r3, r3
 8003d88:	f042 0202 	orrlt.w	r2, r2, #2
 8003d8c:	9307      	strge	r3, [sp, #28]
 8003d8e:	9307      	strlt	r3, [sp, #28]
 8003d90:	bfb8      	it	lt
 8003d92:	9204      	strlt	r2, [sp, #16]
 8003d94:	7823      	ldrb	r3, [r4, #0]
 8003d96:	2b2e      	cmp	r3, #46	; 0x2e
 8003d98:	d10c      	bne.n	8003db4 <_svfiprintf_r+0x130>
 8003d9a:	7863      	ldrb	r3, [r4, #1]
 8003d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d9e:	d135      	bne.n	8003e0c <_svfiprintf_r+0x188>
 8003da0:	9b03      	ldr	r3, [sp, #12]
 8003da2:	1d1a      	adds	r2, r3, #4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	9203      	str	r2, [sp, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bfb8      	it	lt
 8003dac:	f04f 33ff 	movlt.w	r3, #4294967295
 8003db0:	3402      	adds	r4, #2
 8003db2:	9305      	str	r3, [sp, #20]
 8003db4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003e80 <_svfiprintf_r+0x1fc>
 8003db8:	7821      	ldrb	r1, [r4, #0]
 8003dba:	2203      	movs	r2, #3
 8003dbc:	4650      	mov	r0, sl
 8003dbe:	f7fc fa27 	bl	8000210 <memchr>
 8003dc2:	b140      	cbz	r0, 8003dd6 <_svfiprintf_r+0x152>
 8003dc4:	2340      	movs	r3, #64	; 0x40
 8003dc6:	eba0 000a 	sub.w	r0, r0, sl
 8003dca:	fa03 f000 	lsl.w	r0, r3, r0
 8003dce:	9b04      	ldr	r3, [sp, #16]
 8003dd0:	4303      	orrs	r3, r0
 8003dd2:	3401      	adds	r4, #1
 8003dd4:	9304      	str	r3, [sp, #16]
 8003dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dda:	4826      	ldr	r0, [pc, #152]	; (8003e74 <_svfiprintf_r+0x1f0>)
 8003ddc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003de0:	2206      	movs	r2, #6
 8003de2:	f7fc fa15 	bl	8000210 <memchr>
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d038      	beq.n	8003e5c <_svfiprintf_r+0x1d8>
 8003dea:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <_svfiprintf_r+0x1f4>)
 8003dec:	bb1b      	cbnz	r3, 8003e36 <_svfiprintf_r+0x1b2>
 8003dee:	9b03      	ldr	r3, [sp, #12]
 8003df0:	3307      	adds	r3, #7
 8003df2:	f023 0307 	bic.w	r3, r3, #7
 8003df6:	3308      	adds	r3, #8
 8003df8:	9303      	str	r3, [sp, #12]
 8003dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dfc:	4433      	add	r3, r6
 8003dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8003e00:	e767      	b.n	8003cd2 <_svfiprintf_r+0x4e>
 8003e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e06:	460c      	mov	r4, r1
 8003e08:	2001      	movs	r0, #1
 8003e0a:	e7a5      	b.n	8003d58 <_svfiprintf_r+0xd4>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	3401      	adds	r4, #1
 8003e10:	9305      	str	r3, [sp, #20]
 8003e12:	4619      	mov	r1, r3
 8003e14:	f04f 0c0a 	mov.w	ip, #10
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e1e:	3a30      	subs	r2, #48	; 0x30
 8003e20:	2a09      	cmp	r2, #9
 8003e22:	d903      	bls.n	8003e2c <_svfiprintf_r+0x1a8>
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0c5      	beq.n	8003db4 <_svfiprintf_r+0x130>
 8003e28:	9105      	str	r1, [sp, #20]
 8003e2a:	e7c3      	b.n	8003db4 <_svfiprintf_r+0x130>
 8003e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e30:	4604      	mov	r4, r0
 8003e32:	2301      	movs	r3, #1
 8003e34:	e7f0      	b.n	8003e18 <_svfiprintf_r+0x194>
 8003e36:	ab03      	add	r3, sp, #12
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	462a      	mov	r2, r5
 8003e3c:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <_svfiprintf_r+0x1f8>)
 8003e3e:	a904      	add	r1, sp, #16
 8003e40:	4638      	mov	r0, r7
 8003e42:	f3af 8000 	nop.w
 8003e46:	1c42      	adds	r2, r0, #1
 8003e48:	4606      	mov	r6, r0
 8003e4a:	d1d6      	bne.n	8003dfa <_svfiprintf_r+0x176>
 8003e4c:	89ab      	ldrh	r3, [r5, #12]
 8003e4e:	065b      	lsls	r3, r3, #25
 8003e50:	f53f af2c 	bmi.w	8003cac <_svfiprintf_r+0x28>
 8003e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e56:	b01d      	add	sp, #116	; 0x74
 8003e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e5c:	ab03      	add	r3, sp, #12
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	462a      	mov	r2, r5
 8003e62:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <_svfiprintf_r+0x1f8>)
 8003e64:	a904      	add	r1, sp, #16
 8003e66:	4638      	mov	r0, r7
 8003e68:	f000 f87a 	bl	8003f60 <_printf_i>
 8003e6c:	e7eb      	b.n	8003e46 <_svfiprintf_r+0x1c2>
 8003e6e:	bf00      	nop
 8003e70:	08004514 	.word	0x08004514
 8003e74:	0800451e 	.word	0x0800451e
 8003e78:	00000000 	.word	0x00000000
 8003e7c:	08003bcd 	.word	0x08003bcd
 8003e80:	0800451a 	.word	0x0800451a

08003e84 <_printf_common>:
 8003e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e88:	4616      	mov	r6, r2
 8003e8a:	4699      	mov	r9, r3
 8003e8c:	688a      	ldr	r2, [r1, #8]
 8003e8e:	690b      	ldr	r3, [r1, #16]
 8003e90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e94:	4293      	cmp	r3, r2
 8003e96:	bfb8      	it	lt
 8003e98:	4613      	movlt	r3, r2
 8003e9a:	6033      	str	r3, [r6, #0]
 8003e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ea0:	4607      	mov	r7, r0
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	b10a      	cbz	r2, 8003eaa <_printf_common+0x26>
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	6033      	str	r3, [r6, #0]
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	0699      	lsls	r1, r3, #26
 8003eae:	bf42      	ittt	mi
 8003eb0:	6833      	ldrmi	r3, [r6, #0]
 8003eb2:	3302      	addmi	r3, #2
 8003eb4:	6033      	strmi	r3, [r6, #0]
 8003eb6:	6825      	ldr	r5, [r4, #0]
 8003eb8:	f015 0506 	ands.w	r5, r5, #6
 8003ebc:	d106      	bne.n	8003ecc <_printf_common+0x48>
 8003ebe:	f104 0a19 	add.w	sl, r4, #25
 8003ec2:	68e3      	ldr	r3, [r4, #12]
 8003ec4:	6832      	ldr	r2, [r6, #0]
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	42ab      	cmp	r3, r5
 8003eca:	dc26      	bgt.n	8003f1a <_printf_common+0x96>
 8003ecc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ed0:	1e13      	subs	r3, r2, #0
 8003ed2:	6822      	ldr	r2, [r4, #0]
 8003ed4:	bf18      	it	ne
 8003ed6:	2301      	movne	r3, #1
 8003ed8:	0692      	lsls	r2, r2, #26
 8003eda:	d42b      	bmi.n	8003f34 <_printf_common+0xb0>
 8003edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	47c0      	blx	r8
 8003ee6:	3001      	adds	r0, #1
 8003ee8:	d01e      	beq.n	8003f28 <_printf_common+0xa4>
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	68e5      	ldr	r5, [r4, #12]
 8003eee:	6832      	ldr	r2, [r6, #0]
 8003ef0:	f003 0306 	and.w	r3, r3, #6
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	bf08      	it	eq
 8003ef8:	1aad      	subeq	r5, r5, r2
 8003efa:	68a3      	ldr	r3, [r4, #8]
 8003efc:	6922      	ldr	r2, [r4, #16]
 8003efe:	bf0c      	ite	eq
 8003f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f04:	2500      	movne	r5, #0
 8003f06:	4293      	cmp	r3, r2
 8003f08:	bfc4      	itt	gt
 8003f0a:	1a9b      	subgt	r3, r3, r2
 8003f0c:	18ed      	addgt	r5, r5, r3
 8003f0e:	2600      	movs	r6, #0
 8003f10:	341a      	adds	r4, #26
 8003f12:	42b5      	cmp	r5, r6
 8003f14:	d11a      	bne.n	8003f4c <_printf_common+0xc8>
 8003f16:	2000      	movs	r0, #0
 8003f18:	e008      	b.n	8003f2c <_printf_common+0xa8>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	4652      	mov	r2, sl
 8003f1e:	4649      	mov	r1, r9
 8003f20:	4638      	mov	r0, r7
 8003f22:	47c0      	blx	r8
 8003f24:	3001      	adds	r0, #1
 8003f26:	d103      	bne.n	8003f30 <_printf_common+0xac>
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f30:	3501      	adds	r5, #1
 8003f32:	e7c6      	b.n	8003ec2 <_printf_common+0x3e>
 8003f34:	18e1      	adds	r1, r4, r3
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	2030      	movs	r0, #48	; 0x30
 8003f3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f3e:	4422      	add	r2, r4
 8003f40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f48:	3302      	adds	r3, #2
 8003f4a:	e7c7      	b.n	8003edc <_printf_common+0x58>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	4622      	mov	r2, r4
 8003f50:	4649      	mov	r1, r9
 8003f52:	4638      	mov	r0, r7
 8003f54:	47c0      	blx	r8
 8003f56:	3001      	adds	r0, #1
 8003f58:	d0e6      	beq.n	8003f28 <_printf_common+0xa4>
 8003f5a:	3601      	adds	r6, #1
 8003f5c:	e7d9      	b.n	8003f12 <_printf_common+0x8e>
	...

08003f60 <_printf_i>:
 8003f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f64:	7e0f      	ldrb	r7, [r1, #24]
 8003f66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f68:	2f78      	cmp	r7, #120	; 0x78
 8003f6a:	4691      	mov	r9, r2
 8003f6c:	4680      	mov	r8, r0
 8003f6e:	460c      	mov	r4, r1
 8003f70:	469a      	mov	sl, r3
 8003f72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f76:	d807      	bhi.n	8003f88 <_printf_i+0x28>
 8003f78:	2f62      	cmp	r7, #98	; 0x62
 8003f7a:	d80a      	bhi.n	8003f92 <_printf_i+0x32>
 8003f7c:	2f00      	cmp	r7, #0
 8003f7e:	f000 80d8 	beq.w	8004132 <_printf_i+0x1d2>
 8003f82:	2f58      	cmp	r7, #88	; 0x58
 8003f84:	f000 80a3 	beq.w	80040ce <_printf_i+0x16e>
 8003f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f90:	e03a      	b.n	8004008 <_printf_i+0xa8>
 8003f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f96:	2b15      	cmp	r3, #21
 8003f98:	d8f6      	bhi.n	8003f88 <_printf_i+0x28>
 8003f9a:	a101      	add	r1, pc, #4	; (adr r1, 8003fa0 <_printf_i+0x40>)
 8003f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fa0:	08003ff9 	.word	0x08003ff9
 8003fa4:	0800400d 	.word	0x0800400d
 8003fa8:	08003f89 	.word	0x08003f89
 8003fac:	08003f89 	.word	0x08003f89
 8003fb0:	08003f89 	.word	0x08003f89
 8003fb4:	08003f89 	.word	0x08003f89
 8003fb8:	0800400d 	.word	0x0800400d
 8003fbc:	08003f89 	.word	0x08003f89
 8003fc0:	08003f89 	.word	0x08003f89
 8003fc4:	08003f89 	.word	0x08003f89
 8003fc8:	08003f89 	.word	0x08003f89
 8003fcc:	08004119 	.word	0x08004119
 8003fd0:	0800403d 	.word	0x0800403d
 8003fd4:	080040fb 	.word	0x080040fb
 8003fd8:	08003f89 	.word	0x08003f89
 8003fdc:	08003f89 	.word	0x08003f89
 8003fe0:	0800413b 	.word	0x0800413b
 8003fe4:	08003f89 	.word	0x08003f89
 8003fe8:	0800403d 	.word	0x0800403d
 8003fec:	08003f89 	.word	0x08003f89
 8003ff0:	08003f89 	.word	0x08003f89
 8003ff4:	08004103 	.word	0x08004103
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	1d1a      	adds	r2, r3, #4
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	602a      	str	r2, [r5, #0]
 8004000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004008:	2301      	movs	r3, #1
 800400a:	e0a3      	b.n	8004154 <_printf_i+0x1f4>
 800400c:	6820      	ldr	r0, [r4, #0]
 800400e:	6829      	ldr	r1, [r5, #0]
 8004010:	0606      	lsls	r6, r0, #24
 8004012:	f101 0304 	add.w	r3, r1, #4
 8004016:	d50a      	bpl.n	800402e <_printf_i+0xce>
 8004018:	680e      	ldr	r6, [r1, #0]
 800401a:	602b      	str	r3, [r5, #0]
 800401c:	2e00      	cmp	r6, #0
 800401e:	da03      	bge.n	8004028 <_printf_i+0xc8>
 8004020:	232d      	movs	r3, #45	; 0x2d
 8004022:	4276      	negs	r6, r6
 8004024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004028:	485e      	ldr	r0, [pc, #376]	; (80041a4 <_printf_i+0x244>)
 800402a:	230a      	movs	r3, #10
 800402c:	e019      	b.n	8004062 <_printf_i+0x102>
 800402e:	680e      	ldr	r6, [r1, #0]
 8004030:	602b      	str	r3, [r5, #0]
 8004032:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004036:	bf18      	it	ne
 8004038:	b236      	sxthne	r6, r6
 800403a:	e7ef      	b.n	800401c <_printf_i+0xbc>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	6820      	ldr	r0, [r4, #0]
 8004040:	1d19      	adds	r1, r3, #4
 8004042:	6029      	str	r1, [r5, #0]
 8004044:	0601      	lsls	r1, r0, #24
 8004046:	d501      	bpl.n	800404c <_printf_i+0xec>
 8004048:	681e      	ldr	r6, [r3, #0]
 800404a:	e002      	b.n	8004052 <_printf_i+0xf2>
 800404c:	0646      	lsls	r6, r0, #25
 800404e:	d5fb      	bpl.n	8004048 <_printf_i+0xe8>
 8004050:	881e      	ldrh	r6, [r3, #0]
 8004052:	4854      	ldr	r0, [pc, #336]	; (80041a4 <_printf_i+0x244>)
 8004054:	2f6f      	cmp	r7, #111	; 0x6f
 8004056:	bf0c      	ite	eq
 8004058:	2308      	moveq	r3, #8
 800405a:	230a      	movne	r3, #10
 800405c:	2100      	movs	r1, #0
 800405e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004062:	6865      	ldr	r5, [r4, #4]
 8004064:	60a5      	str	r5, [r4, #8]
 8004066:	2d00      	cmp	r5, #0
 8004068:	bfa2      	ittt	ge
 800406a:	6821      	ldrge	r1, [r4, #0]
 800406c:	f021 0104 	bicge.w	r1, r1, #4
 8004070:	6021      	strge	r1, [r4, #0]
 8004072:	b90e      	cbnz	r6, 8004078 <_printf_i+0x118>
 8004074:	2d00      	cmp	r5, #0
 8004076:	d04d      	beq.n	8004114 <_printf_i+0x1b4>
 8004078:	4615      	mov	r5, r2
 800407a:	fbb6 f1f3 	udiv	r1, r6, r3
 800407e:	fb03 6711 	mls	r7, r3, r1, r6
 8004082:	5dc7      	ldrb	r7, [r0, r7]
 8004084:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004088:	4637      	mov	r7, r6
 800408a:	42bb      	cmp	r3, r7
 800408c:	460e      	mov	r6, r1
 800408e:	d9f4      	bls.n	800407a <_printf_i+0x11a>
 8004090:	2b08      	cmp	r3, #8
 8004092:	d10b      	bne.n	80040ac <_printf_i+0x14c>
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	07de      	lsls	r6, r3, #31
 8004098:	d508      	bpl.n	80040ac <_printf_i+0x14c>
 800409a:	6923      	ldr	r3, [r4, #16]
 800409c:	6861      	ldr	r1, [r4, #4]
 800409e:	4299      	cmp	r1, r3
 80040a0:	bfde      	ittt	le
 80040a2:	2330      	movle	r3, #48	; 0x30
 80040a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040ac:	1b52      	subs	r2, r2, r5
 80040ae:	6122      	str	r2, [r4, #16]
 80040b0:	f8cd a000 	str.w	sl, [sp]
 80040b4:	464b      	mov	r3, r9
 80040b6:	aa03      	add	r2, sp, #12
 80040b8:	4621      	mov	r1, r4
 80040ba:	4640      	mov	r0, r8
 80040bc:	f7ff fee2 	bl	8003e84 <_printf_common>
 80040c0:	3001      	adds	r0, #1
 80040c2:	d14c      	bne.n	800415e <_printf_i+0x1fe>
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	b004      	add	sp, #16
 80040ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ce:	4835      	ldr	r0, [pc, #212]	; (80041a4 <_printf_i+0x244>)
 80040d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040d4:	6829      	ldr	r1, [r5, #0]
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80040dc:	6029      	str	r1, [r5, #0]
 80040de:	061d      	lsls	r5, r3, #24
 80040e0:	d514      	bpl.n	800410c <_printf_i+0x1ac>
 80040e2:	07df      	lsls	r7, r3, #31
 80040e4:	bf44      	itt	mi
 80040e6:	f043 0320 	orrmi.w	r3, r3, #32
 80040ea:	6023      	strmi	r3, [r4, #0]
 80040ec:	b91e      	cbnz	r6, 80040f6 <_printf_i+0x196>
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	f023 0320 	bic.w	r3, r3, #32
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	2310      	movs	r3, #16
 80040f8:	e7b0      	b.n	800405c <_printf_i+0xfc>
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	f043 0320 	orr.w	r3, r3, #32
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	2378      	movs	r3, #120	; 0x78
 8004104:	4828      	ldr	r0, [pc, #160]	; (80041a8 <_printf_i+0x248>)
 8004106:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800410a:	e7e3      	b.n	80040d4 <_printf_i+0x174>
 800410c:	0659      	lsls	r1, r3, #25
 800410e:	bf48      	it	mi
 8004110:	b2b6      	uxthmi	r6, r6
 8004112:	e7e6      	b.n	80040e2 <_printf_i+0x182>
 8004114:	4615      	mov	r5, r2
 8004116:	e7bb      	b.n	8004090 <_printf_i+0x130>
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	6826      	ldr	r6, [r4, #0]
 800411c:	6961      	ldr	r1, [r4, #20]
 800411e:	1d18      	adds	r0, r3, #4
 8004120:	6028      	str	r0, [r5, #0]
 8004122:	0635      	lsls	r5, r6, #24
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	d501      	bpl.n	800412c <_printf_i+0x1cc>
 8004128:	6019      	str	r1, [r3, #0]
 800412a:	e002      	b.n	8004132 <_printf_i+0x1d2>
 800412c:	0670      	lsls	r0, r6, #25
 800412e:	d5fb      	bpl.n	8004128 <_printf_i+0x1c8>
 8004130:	8019      	strh	r1, [r3, #0]
 8004132:	2300      	movs	r3, #0
 8004134:	6123      	str	r3, [r4, #16]
 8004136:	4615      	mov	r5, r2
 8004138:	e7ba      	b.n	80040b0 <_printf_i+0x150>
 800413a:	682b      	ldr	r3, [r5, #0]
 800413c:	1d1a      	adds	r2, r3, #4
 800413e:	602a      	str	r2, [r5, #0]
 8004140:	681d      	ldr	r5, [r3, #0]
 8004142:	6862      	ldr	r2, [r4, #4]
 8004144:	2100      	movs	r1, #0
 8004146:	4628      	mov	r0, r5
 8004148:	f7fc f862 	bl	8000210 <memchr>
 800414c:	b108      	cbz	r0, 8004152 <_printf_i+0x1f2>
 800414e:	1b40      	subs	r0, r0, r5
 8004150:	6060      	str	r0, [r4, #4]
 8004152:	6863      	ldr	r3, [r4, #4]
 8004154:	6123      	str	r3, [r4, #16]
 8004156:	2300      	movs	r3, #0
 8004158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800415c:	e7a8      	b.n	80040b0 <_printf_i+0x150>
 800415e:	6923      	ldr	r3, [r4, #16]
 8004160:	462a      	mov	r2, r5
 8004162:	4649      	mov	r1, r9
 8004164:	4640      	mov	r0, r8
 8004166:	47d0      	blx	sl
 8004168:	3001      	adds	r0, #1
 800416a:	d0ab      	beq.n	80040c4 <_printf_i+0x164>
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	079b      	lsls	r3, r3, #30
 8004170:	d413      	bmi.n	800419a <_printf_i+0x23a>
 8004172:	68e0      	ldr	r0, [r4, #12]
 8004174:	9b03      	ldr	r3, [sp, #12]
 8004176:	4298      	cmp	r0, r3
 8004178:	bfb8      	it	lt
 800417a:	4618      	movlt	r0, r3
 800417c:	e7a4      	b.n	80040c8 <_printf_i+0x168>
 800417e:	2301      	movs	r3, #1
 8004180:	4632      	mov	r2, r6
 8004182:	4649      	mov	r1, r9
 8004184:	4640      	mov	r0, r8
 8004186:	47d0      	blx	sl
 8004188:	3001      	adds	r0, #1
 800418a:	d09b      	beq.n	80040c4 <_printf_i+0x164>
 800418c:	3501      	adds	r5, #1
 800418e:	68e3      	ldr	r3, [r4, #12]
 8004190:	9903      	ldr	r1, [sp, #12]
 8004192:	1a5b      	subs	r3, r3, r1
 8004194:	42ab      	cmp	r3, r5
 8004196:	dcf2      	bgt.n	800417e <_printf_i+0x21e>
 8004198:	e7eb      	b.n	8004172 <_printf_i+0x212>
 800419a:	2500      	movs	r5, #0
 800419c:	f104 0619 	add.w	r6, r4, #25
 80041a0:	e7f5      	b.n	800418e <_printf_i+0x22e>
 80041a2:	bf00      	nop
 80041a4:	08004525 	.word	0x08004525
 80041a8:	08004536 	.word	0x08004536

080041ac <memcpy>:
 80041ac:	440a      	add	r2, r1
 80041ae:	4291      	cmp	r1, r2
 80041b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80041b4:	d100      	bne.n	80041b8 <memcpy+0xc>
 80041b6:	4770      	bx	lr
 80041b8:	b510      	push	{r4, lr}
 80041ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041c2:	4291      	cmp	r1, r2
 80041c4:	d1f9      	bne.n	80041ba <memcpy+0xe>
 80041c6:	bd10      	pop	{r4, pc}

080041c8 <memmove>:
 80041c8:	4288      	cmp	r0, r1
 80041ca:	b510      	push	{r4, lr}
 80041cc:	eb01 0402 	add.w	r4, r1, r2
 80041d0:	d902      	bls.n	80041d8 <memmove+0x10>
 80041d2:	4284      	cmp	r4, r0
 80041d4:	4623      	mov	r3, r4
 80041d6:	d807      	bhi.n	80041e8 <memmove+0x20>
 80041d8:	1e43      	subs	r3, r0, #1
 80041da:	42a1      	cmp	r1, r4
 80041dc:	d008      	beq.n	80041f0 <memmove+0x28>
 80041de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041e6:	e7f8      	b.n	80041da <memmove+0x12>
 80041e8:	4402      	add	r2, r0
 80041ea:	4601      	mov	r1, r0
 80041ec:	428a      	cmp	r2, r1
 80041ee:	d100      	bne.n	80041f2 <memmove+0x2a>
 80041f0:	bd10      	pop	{r4, pc}
 80041f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041fa:	e7f7      	b.n	80041ec <memmove+0x24>

080041fc <_free_r>:
 80041fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041fe:	2900      	cmp	r1, #0
 8004200:	d044      	beq.n	800428c <_free_r+0x90>
 8004202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004206:	9001      	str	r0, [sp, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f1a1 0404 	sub.w	r4, r1, #4
 800420e:	bfb8      	it	lt
 8004210:	18e4      	addlt	r4, r4, r3
 8004212:	f000 f913 	bl	800443c <__malloc_lock>
 8004216:	4a1e      	ldr	r2, [pc, #120]	; (8004290 <_free_r+0x94>)
 8004218:	9801      	ldr	r0, [sp, #4]
 800421a:	6813      	ldr	r3, [r2, #0]
 800421c:	b933      	cbnz	r3, 800422c <_free_r+0x30>
 800421e:	6063      	str	r3, [r4, #4]
 8004220:	6014      	str	r4, [r2, #0]
 8004222:	b003      	add	sp, #12
 8004224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004228:	f000 b90e 	b.w	8004448 <__malloc_unlock>
 800422c:	42a3      	cmp	r3, r4
 800422e:	d908      	bls.n	8004242 <_free_r+0x46>
 8004230:	6825      	ldr	r5, [r4, #0]
 8004232:	1961      	adds	r1, r4, r5
 8004234:	428b      	cmp	r3, r1
 8004236:	bf01      	itttt	eq
 8004238:	6819      	ldreq	r1, [r3, #0]
 800423a:	685b      	ldreq	r3, [r3, #4]
 800423c:	1949      	addeq	r1, r1, r5
 800423e:	6021      	streq	r1, [r4, #0]
 8004240:	e7ed      	b.n	800421e <_free_r+0x22>
 8004242:	461a      	mov	r2, r3
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	b10b      	cbz	r3, 800424c <_free_r+0x50>
 8004248:	42a3      	cmp	r3, r4
 800424a:	d9fa      	bls.n	8004242 <_free_r+0x46>
 800424c:	6811      	ldr	r1, [r2, #0]
 800424e:	1855      	adds	r5, r2, r1
 8004250:	42a5      	cmp	r5, r4
 8004252:	d10b      	bne.n	800426c <_free_r+0x70>
 8004254:	6824      	ldr	r4, [r4, #0]
 8004256:	4421      	add	r1, r4
 8004258:	1854      	adds	r4, r2, r1
 800425a:	42a3      	cmp	r3, r4
 800425c:	6011      	str	r1, [r2, #0]
 800425e:	d1e0      	bne.n	8004222 <_free_r+0x26>
 8004260:	681c      	ldr	r4, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	6053      	str	r3, [r2, #4]
 8004266:	4421      	add	r1, r4
 8004268:	6011      	str	r1, [r2, #0]
 800426a:	e7da      	b.n	8004222 <_free_r+0x26>
 800426c:	d902      	bls.n	8004274 <_free_r+0x78>
 800426e:	230c      	movs	r3, #12
 8004270:	6003      	str	r3, [r0, #0]
 8004272:	e7d6      	b.n	8004222 <_free_r+0x26>
 8004274:	6825      	ldr	r5, [r4, #0]
 8004276:	1961      	adds	r1, r4, r5
 8004278:	428b      	cmp	r3, r1
 800427a:	bf04      	itt	eq
 800427c:	6819      	ldreq	r1, [r3, #0]
 800427e:	685b      	ldreq	r3, [r3, #4]
 8004280:	6063      	str	r3, [r4, #4]
 8004282:	bf04      	itt	eq
 8004284:	1949      	addeq	r1, r1, r5
 8004286:	6021      	streq	r1, [r4, #0]
 8004288:	6054      	str	r4, [r2, #4]
 800428a:	e7ca      	b.n	8004222 <_free_r+0x26>
 800428c:	b003      	add	sp, #12
 800428e:	bd30      	pop	{r4, r5, pc}
 8004290:	200001d4 	.word	0x200001d4

08004294 <sbrk_aligned>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	4e0e      	ldr	r6, [pc, #56]	; (80042d0 <sbrk_aligned+0x3c>)
 8004298:	460c      	mov	r4, r1
 800429a:	6831      	ldr	r1, [r6, #0]
 800429c:	4605      	mov	r5, r0
 800429e:	b911      	cbnz	r1, 80042a6 <sbrk_aligned+0x12>
 80042a0:	f000 f8bc 	bl	800441c <_sbrk_r>
 80042a4:	6030      	str	r0, [r6, #0]
 80042a6:	4621      	mov	r1, r4
 80042a8:	4628      	mov	r0, r5
 80042aa:	f000 f8b7 	bl	800441c <_sbrk_r>
 80042ae:	1c43      	adds	r3, r0, #1
 80042b0:	d00a      	beq.n	80042c8 <sbrk_aligned+0x34>
 80042b2:	1cc4      	adds	r4, r0, #3
 80042b4:	f024 0403 	bic.w	r4, r4, #3
 80042b8:	42a0      	cmp	r0, r4
 80042ba:	d007      	beq.n	80042cc <sbrk_aligned+0x38>
 80042bc:	1a21      	subs	r1, r4, r0
 80042be:	4628      	mov	r0, r5
 80042c0:	f000 f8ac 	bl	800441c <_sbrk_r>
 80042c4:	3001      	adds	r0, #1
 80042c6:	d101      	bne.n	80042cc <sbrk_aligned+0x38>
 80042c8:	f04f 34ff 	mov.w	r4, #4294967295
 80042cc:	4620      	mov	r0, r4
 80042ce:	bd70      	pop	{r4, r5, r6, pc}
 80042d0:	200001d8 	.word	0x200001d8

080042d4 <_malloc_r>:
 80042d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d8:	1ccd      	adds	r5, r1, #3
 80042da:	f025 0503 	bic.w	r5, r5, #3
 80042de:	3508      	adds	r5, #8
 80042e0:	2d0c      	cmp	r5, #12
 80042e2:	bf38      	it	cc
 80042e4:	250c      	movcc	r5, #12
 80042e6:	2d00      	cmp	r5, #0
 80042e8:	4607      	mov	r7, r0
 80042ea:	db01      	blt.n	80042f0 <_malloc_r+0x1c>
 80042ec:	42a9      	cmp	r1, r5
 80042ee:	d905      	bls.n	80042fc <_malloc_r+0x28>
 80042f0:	230c      	movs	r3, #12
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	2600      	movs	r6, #0
 80042f6:	4630      	mov	r0, r6
 80042f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042fc:	4e2e      	ldr	r6, [pc, #184]	; (80043b8 <_malloc_r+0xe4>)
 80042fe:	f000 f89d 	bl	800443c <__malloc_lock>
 8004302:	6833      	ldr	r3, [r6, #0]
 8004304:	461c      	mov	r4, r3
 8004306:	bb34      	cbnz	r4, 8004356 <_malloc_r+0x82>
 8004308:	4629      	mov	r1, r5
 800430a:	4638      	mov	r0, r7
 800430c:	f7ff ffc2 	bl	8004294 <sbrk_aligned>
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	4604      	mov	r4, r0
 8004314:	d14d      	bne.n	80043b2 <_malloc_r+0xde>
 8004316:	6834      	ldr	r4, [r6, #0]
 8004318:	4626      	mov	r6, r4
 800431a:	2e00      	cmp	r6, #0
 800431c:	d140      	bne.n	80043a0 <_malloc_r+0xcc>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	4631      	mov	r1, r6
 8004322:	4638      	mov	r0, r7
 8004324:	eb04 0803 	add.w	r8, r4, r3
 8004328:	f000 f878 	bl	800441c <_sbrk_r>
 800432c:	4580      	cmp	r8, r0
 800432e:	d13a      	bne.n	80043a6 <_malloc_r+0xd2>
 8004330:	6821      	ldr	r1, [r4, #0]
 8004332:	3503      	adds	r5, #3
 8004334:	1a6d      	subs	r5, r5, r1
 8004336:	f025 0503 	bic.w	r5, r5, #3
 800433a:	3508      	adds	r5, #8
 800433c:	2d0c      	cmp	r5, #12
 800433e:	bf38      	it	cc
 8004340:	250c      	movcc	r5, #12
 8004342:	4629      	mov	r1, r5
 8004344:	4638      	mov	r0, r7
 8004346:	f7ff ffa5 	bl	8004294 <sbrk_aligned>
 800434a:	3001      	adds	r0, #1
 800434c:	d02b      	beq.n	80043a6 <_malloc_r+0xd2>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	442b      	add	r3, r5
 8004352:	6023      	str	r3, [r4, #0]
 8004354:	e00e      	b.n	8004374 <_malloc_r+0xa0>
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	1b52      	subs	r2, r2, r5
 800435a:	d41e      	bmi.n	800439a <_malloc_r+0xc6>
 800435c:	2a0b      	cmp	r2, #11
 800435e:	d916      	bls.n	800438e <_malloc_r+0xba>
 8004360:	1961      	adds	r1, r4, r5
 8004362:	42a3      	cmp	r3, r4
 8004364:	6025      	str	r5, [r4, #0]
 8004366:	bf18      	it	ne
 8004368:	6059      	strne	r1, [r3, #4]
 800436a:	6863      	ldr	r3, [r4, #4]
 800436c:	bf08      	it	eq
 800436e:	6031      	streq	r1, [r6, #0]
 8004370:	5162      	str	r2, [r4, r5]
 8004372:	604b      	str	r3, [r1, #4]
 8004374:	4638      	mov	r0, r7
 8004376:	f104 060b 	add.w	r6, r4, #11
 800437a:	f000 f865 	bl	8004448 <__malloc_unlock>
 800437e:	f026 0607 	bic.w	r6, r6, #7
 8004382:	1d23      	adds	r3, r4, #4
 8004384:	1af2      	subs	r2, r6, r3
 8004386:	d0b6      	beq.n	80042f6 <_malloc_r+0x22>
 8004388:	1b9b      	subs	r3, r3, r6
 800438a:	50a3      	str	r3, [r4, r2]
 800438c:	e7b3      	b.n	80042f6 <_malloc_r+0x22>
 800438e:	6862      	ldr	r2, [r4, #4]
 8004390:	42a3      	cmp	r3, r4
 8004392:	bf0c      	ite	eq
 8004394:	6032      	streq	r2, [r6, #0]
 8004396:	605a      	strne	r2, [r3, #4]
 8004398:	e7ec      	b.n	8004374 <_malloc_r+0xa0>
 800439a:	4623      	mov	r3, r4
 800439c:	6864      	ldr	r4, [r4, #4]
 800439e:	e7b2      	b.n	8004306 <_malloc_r+0x32>
 80043a0:	4634      	mov	r4, r6
 80043a2:	6876      	ldr	r6, [r6, #4]
 80043a4:	e7b9      	b.n	800431a <_malloc_r+0x46>
 80043a6:	230c      	movs	r3, #12
 80043a8:	603b      	str	r3, [r7, #0]
 80043aa:	4638      	mov	r0, r7
 80043ac:	f000 f84c 	bl	8004448 <__malloc_unlock>
 80043b0:	e7a1      	b.n	80042f6 <_malloc_r+0x22>
 80043b2:	6025      	str	r5, [r4, #0]
 80043b4:	e7de      	b.n	8004374 <_malloc_r+0xa0>
 80043b6:	bf00      	nop
 80043b8:	200001d4 	.word	0x200001d4

080043bc <_realloc_r>:
 80043bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c0:	4680      	mov	r8, r0
 80043c2:	4614      	mov	r4, r2
 80043c4:	460e      	mov	r6, r1
 80043c6:	b921      	cbnz	r1, 80043d2 <_realloc_r+0x16>
 80043c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043cc:	4611      	mov	r1, r2
 80043ce:	f7ff bf81 	b.w	80042d4 <_malloc_r>
 80043d2:	b92a      	cbnz	r2, 80043e0 <_realloc_r+0x24>
 80043d4:	f7ff ff12 	bl	80041fc <_free_r>
 80043d8:	4625      	mov	r5, r4
 80043da:	4628      	mov	r0, r5
 80043dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e0:	f000 f838 	bl	8004454 <_malloc_usable_size_r>
 80043e4:	4284      	cmp	r4, r0
 80043e6:	4607      	mov	r7, r0
 80043e8:	d802      	bhi.n	80043f0 <_realloc_r+0x34>
 80043ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043ee:	d812      	bhi.n	8004416 <_realloc_r+0x5a>
 80043f0:	4621      	mov	r1, r4
 80043f2:	4640      	mov	r0, r8
 80043f4:	f7ff ff6e 	bl	80042d4 <_malloc_r>
 80043f8:	4605      	mov	r5, r0
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d0ed      	beq.n	80043da <_realloc_r+0x1e>
 80043fe:	42bc      	cmp	r4, r7
 8004400:	4622      	mov	r2, r4
 8004402:	4631      	mov	r1, r6
 8004404:	bf28      	it	cs
 8004406:	463a      	movcs	r2, r7
 8004408:	f7ff fed0 	bl	80041ac <memcpy>
 800440c:	4631      	mov	r1, r6
 800440e:	4640      	mov	r0, r8
 8004410:	f7ff fef4 	bl	80041fc <_free_r>
 8004414:	e7e1      	b.n	80043da <_realloc_r+0x1e>
 8004416:	4635      	mov	r5, r6
 8004418:	e7df      	b.n	80043da <_realloc_r+0x1e>
	...

0800441c <_sbrk_r>:
 800441c:	b538      	push	{r3, r4, r5, lr}
 800441e:	4d06      	ldr	r5, [pc, #24]	; (8004438 <_sbrk_r+0x1c>)
 8004420:	2300      	movs	r3, #0
 8004422:	4604      	mov	r4, r0
 8004424:	4608      	mov	r0, r1
 8004426:	602b      	str	r3, [r5, #0]
 8004428:	f7fc fe12 	bl	8001050 <_sbrk>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	d102      	bne.n	8004436 <_sbrk_r+0x1a>
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	b103      	cbz	r3, 8004436 <_sbrk_r+0x1a>
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	bd38      	pop	{r3, r4, r5, pc}
 8004438:	200001dc 	.word	0x200001dc

0800443c <__malloc_lock>:
 800443c:	4801      	ldr	r0, [pc, #4]	; (8004444 <__malloc_lock+0x8>)
 800443e:	f000 b811 	b.w	8004464 <__retarget_lock_acquire_recursive>
 8004442:	bf00      	nop
 8004444:	200001e0 	.word	0x200001e0

08004448 <__malloc_unlock>:
 8004448:	4801      	ldr	r0, [pc, #4]	; (8004450 <__malloc_unlock+0x8>)
 800444a:	f000 b80c 	b.w	8004466 <__retarget_lock_release_recursive>
 800444e:	bf00      	nop
 8004450:	200001e0 	.word	0x200001e0

08004454 <_malloc_usable_size_r>:
 8004454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004458:	1f18      	subs	r0, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	bfbc      	itt	lt
 800445e:	580b      	ldrlt	r3, [r1, r0]
 8004460:	18c0      	addlt	r0, r0, r3
 8004462:	4770      	bx	lr

08004464 <__retarget_lock_acquire_recursive>:
 8004464:	4770      	bx	lr

08004466 <__retarget_lock_release_recursive>:
 8004466:	4770      	bx	lr

08004468 <_init>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	bf00      	nop
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr

08004474 <_fini>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	bf00      	nop
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr
